{
  "properties": {
    "[bat]": {
      "$ref": "#/$defs/_1"
    },
    "[bibtex]": {
      "$ref": "#/$defs/_1"
    },
    "[c]": {
      "$ref": "#/$defs/_1"
    },
    "[chatmode]": {
      "$ref": "#/$defs/_8"
    },
    "[clojure]": {
      "$ref": "#/$defs/_2"
    },
    "[code-text-binary]": {
      "$ref": "#/$defs/_1"
    },
    "[coffeescript]": {
      "$ref": "#/$defs/_3"
    },
    "[cpp_embedded_latex]": {
      "$ref": "#/$defs/_1"
    },
    "[cpp]": {
      "$ref": "#/$defs/_1"
    },
    "[csharp]": {
      "$ref": "#/$defs/_5"
    },
    "[css]": {
      "$ref": "#/$defs/_6"
    },
    "[cuda-cpp]": {
      "$ref": "#/$defs/_1"
    },
    "[dart]": {
      "$ref": "#/$defs/_1"
    },
    "[diff]": {
      "$ref": "#/$defs/_1"
    },
    "[dockercompose]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.autoIndent": "advanced",
        "editor.insertSpaces": true,
        "editor.tabSize": 2
      },
      "defaultValueSource": {}
    },
    "[dockerfile]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.quickSuggestions": {
          "strings": true
        }
      },
      "defaultValueSource": {}
    },
    "[fsharp]": {
      "$ref": "#/$defs/_2"
    },
    "[git-commit]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.rulers": [
          50,
          72
        ],
        "editor.wordWrap": "off",
        "workbench.editor.restoreViewState": false
      },
      "defaultValueSource": {}
    },
    "[git-rebase]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "workbench.editor.restoreViewState": false
      },
      "defaultValueSource": {}
    },
    "[go]": {
      "$ref": "#/$defs/_0"
    },
    "[groovy]": {
      "$ref": "#/$defs/_1"
    },
    "[handlebars]": {
      "$ref": "#/$defs/_6"
    },
    "[hlsl]": {
      "$ref": "#/$defs/_1"
    },
    "[html]": {
      "$ref": "#/$defs/_6"
    },
    "[ignore]": {
      "$ref": "#/$defs/_1"
    },
    "[ini]": {
      "$ref": "#/$defs/_1"
    },
    "[instructions]": {
      "$ref": "#/$defs/_8"
    },
    "[jade]": {
      "$ref": "#/$defs/_2"
    },
    "[java]": {
      "$ref": "#/$defs/_1"
    },
    "[javascript]": {
      "$ref": "#/$defs/_5"
    },
    "[javascriptreact]": {
      "$ref": "#/$defs/_1"
    },
    "[json]": {
      "$ref": "#/$defs/_4"
    },
    "[jsonc]": {
      "$ref": "#/$defs/_4"
    },
    "[jsonl]": {
      "$ref": "#/$defs/_1"
    },
    "[jsx-tags]": {
      "$ref": "#/$defs/_1"
    },
    "[julia]": {
      "$ref": "#/$defs/_7"
    },
    "[juliamarkdown]": {
      "$ref": "#/$defs/_1"
    },
    "[latex]": {
      "$ref": "#/$defs/_1"
    },
    "[less]": {
      "$ref": "#/$defs/_6"
    },
    "[log]": {
      "$ref": "#/$defs/_1"
    },
    "[Log]": {
      "$ref": "#/$defs/_1"
    },
    "[lua]": {
      "$ref": "#/$defs/_1"
    },
    "[makefile]": {
      "$ref": "#/$defs/_0"
    },
    "[markdown_latex_combined]": {
      "$ref": "#/$defs/_1"
    },
    "[markdown-math]": {
      "$ref": "#/$defs/_1"
    },
    "[markdown]": {
      "$ref": "#/$defs/_8"
    },
    "[objective-c]": {
      "$ref": "#/$defs/_1"
    },
    "[objective-cpp]": {
      "$ref": "#/$defs/_1"
    },
    "[perl]": {
      "$ref": "#/$defs/_1"
    },
    "[php]": {
      "$ref": "#/$defs/_1"
    },
    "[plaintext]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.unicodeHighlight.ambiguousCharacters": false,
        "editor.unicodeHighlight.invisibleCharacters": false
      },
      "defaultValueSource": {}
    },
    "[powershell]": {
      "$ref": "#/$defs/_1"
    },
    "[prompt]": {
      "$ref": "#/$defs/_8"
    },
    "[properties]": {
      "$ref": "#/$defs/_1"
    },
    "[python]": {
      "$ref": "#/$defs/_3"
    },
    "[r]": {
      "$ref": "#/$defs/_1"
    },
    "[raku]": {
      "$ref": "#/$defs/_1"
    },
    "[razor]": {
      "$ref": "#/$defs/_1"
    },
    "[restructuredtext]": {
      "$ref": "#/$defs/_1"
    },
    "[ruby]": {
      "$ref": "#/$defs/_7"
    },
    "[rust]": {
      "$ref": "#/$defs/_1"
    },
    "[scminput]": {
      "$ref": "#/$defs/_1"
    },
    "[scss]": {
      "$ref": "#/$defs/_6"
    },
    "[search-result]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.lineNumbers": "off"
      },
      "defaultValueSource": {}
    },
    "[shaderlab]": {
      "$ref": "#/$defs/_1"
    },
    "[shellscript]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.defaultColorDecorators": "never",
        "files.eol": "\n"
      },
      "defaultValueSource": {}
    },
    "[snippets]": {
      "$ref": "#/$defs/_4"
    },
    "[sql]": {
      "$ref": "#/$defs/_1"
    },
    "[swift]": {
      "$ref": "#/$defs/_1"
    },
    "[tex]": {
      "$ref": "#/$defs/_1"
    },
    "[typescript]": {
      "$ref": "#/$defs/_1"
    },
    "[typescriptreact]": {
      "$ref": "#/$defs/_1"
    },
    "[vb]": {
      "$ref": "#/$defs/_1"
    },
    "[wat]": {
      "$ref": "#/$defs/_1"
    },
    "[xml]": {
      "$ref": "#/$defs/_1"
    },
    "[xsl]": {
      "$ref": "#/$defs/_1"
    },
    "[yaml]": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "diffEditor.ignoreTrimWhitespace": false,
        "editor.autoIndent": "advanced",
        "editor.defaultColorDecorators": "never",
        "editor.insertSpaces": true,
        "editor.quickSuggestions": {
          "strings": "on"
        },
        "editor.tabSize": 2
      },
      "defaultValueSource": {}
    },
    "accessibility.accessibleView.closeOnKeyPress": {
      "markdownDescription": "On keypress, close the Accessible View and focus the element from which it was invoked.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.debugWatchVariableAnnouncements": {
      "type": "boolean",
      "description": "Controls whether variable changes should be announced in the debug watch view.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.hideAccessibleView": {
      "description": "Controls whether the Accessible View is hidden.",
      "type": "boolean",
      "default": false,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "accessibility.openChatEditedFiles": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether files should be opened when the chat agent has applied edits to them.",
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.replEditor.autoFocusReplExecution": {
      "type": "string",
      "enum": [
        "input",
        "lastExecution",
        "none"
      ],
      "default": "input",
      "description": "Control whether focus should automatically be sent to the REPL when code is executed.",
      "defaultDefaultValue": "input",
      "scope": 5,
      "restricted": false
    },
    "accessibility.replEditor.readLastExecutionOutput": {
      "type": "boolean",
      "description": "Controls whether the output from an execution in the native REPL will be announced.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.signalOptions.debouncePositionChanges": {
      "description": "Whether or not position changes should be debounced",
      "type": "boolean",
      "default": false,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": false,
      "scope": 5,
      "restricted": false
    },
    "accessibility.signalOptions.experimental.delays.errorAtPosition": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "announcement": {
          "description": "The delay in milliseconds before an announcement is made when there's an error at the position.",
          "type": "number",
          "minimum": 0,
          "default": 3000
        },
        "sound": {
          "description": "The delay in milliseconds before a sound is played when there's an error at the position.",
          "type": "number",
          "minimum": 0,
          "default": 1000
        }
      },
      "tags": [
        "accessibility"
      ],
      "default": {},
      "scope": 5,
      "restricted": false
    },
    "accessibility.signalOptions.experimental.delays.general": {
      "type": "object",
      "description": "Delays for all signals besides error and warning at position",
      "additionalProperties": false,
      "properties": {
        "announcement": {
          "description": "The delay in milliseconds before an announcement is made.",
          "type": "number",
          "minimum": 0,
          "default": 3000
        },
        "sound": {
          "description": "The delay in milliseconds before a sound is played.",
          "type": "number",
          "minimum": 0,
          "default": 400
        }
      },
      "tags": [
        "accessibility"
      ],
      "default": {},
      "scope": 5,
      "restricted": false
    },
    "accessibility.signalOptions.experimental.delays.warningAtPosition": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "announcement": {
          "description": "The delay in milliseconds before an announcement is made when there's a warning at the position.",
          "type": "number",
          "minimum": 0,
          "default": 3000
        },
        "sound": {
          "description": "The delay in milliseconds before a sound is played when there's a warning at the position.",
          "type": "number",
          "minimum": 0,
          "default": 1000
        }
      },
      "tags": [
        "accessibility"
      ],
      "default": {},
      "scope": 5,
      "restricted": false
    },
    "accessibility.signalOptions.volume": {
      "description": "The volume of the sounds in percent (0-100).",
      "type": "number",
      "minimum": 0,
      "maximum": 100,
      "default": 70,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": 70,
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.chatEditModifiedFile": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "sound": "auto"
      },
      "description": "Plays a sound / audio cue when revealing a file with changes from chat edits",
      "properties": {
        "sound": {
          "description": "Plays a sound when revealing a file with changes from chat edits",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.chatRequestSent": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when a chat request is made.",
      "properties": {
        "announcement": {
          "description": "Announces when a chat request is made.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when a chat request is made.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.chatResponseReceived": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "sound": "auto"
      },
      "description": "Plays a sound / audio cue when the response has been received.",
      "properties": {
        "sound": {
          "description": "Plays a sound on when the response has been received.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.chatUserActionRequired": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "markdownDescription": "Plays a signal - sound (audio cue) and/or announcement (alert) - when user action is required in the chat.",
      "properties": {
        "announcement": {
          "description": "Announces when a user action is required in the chat - including information about the action and how to take it.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when user action is required in the chat.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.clear": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when a feature is cleared (for example, the terminal, Debug Console, or Output channel).",
      "properties": {
        "announcement": {
          "description": "Announces when a feature is cleared.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when a feature is cleared.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.codeActionApplied": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "sound": "auto"
      },
      "description": "Plays a sound / audio cue when the code action has been applied.",
      "properties": {
        "sound": {
          "description": "Plays a sound when the code action has been applied.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.codeActionTriggered": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "sound": "auto"
      },
      "description": "Plays a sound / audio cue - when a code action has been triggered.",
      "properties": {
        "sound": {
          "description": "Plays a sound when a code action has been triggered.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.diffLineDeleted": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "sound": "auto"
      },
      "description": "Plays a sound / audio cue when the focus moves to an deleted line in Accessible Diff Viewer mode or to the next/previous change.",
      "properties": {
        "sound": {
          "description": "Plays a sound when the focus moves to an deleted line in Accessible Diff Viewer mode or to the next/previous change.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.diffLineInserted": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "sound": "auto"
      },
      "description": "Plays a sound / audio cue when the focus moves to an inserted line in Accessible Diff Viewer mode or to the next/previous change.",
      "properties": {
        "sound": {
          "description": "Plays a sound when the focus moves to an inserted line in Accessible Diff Viewer mode or to the next/previous change.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.diffLineModified": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "sound": "auto"
      },
      "description": "Plays a sound / audio cue when the focus moves to an modified line in Accessible Diff Viewer mode or to the next/previous change.",
      "properties": {
        "sound": {
          "description": "Plays a sound when the focus moves to a modified line in Accessible Diff Viewer mode or to the next/previous change.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.editsKept": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when edits are kept.",
      "properties": {
        "announcement": {
          "description": "Announces when edits are kept.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when edits are kept.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.editsUndone": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when edits have been undone.",
      "properties": {
        "announcement": {
          "description": "Announces when edits have been undone.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when edits have been undone.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.format": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "markdownDescription": "Plays a signal - sound (audio cue) and/or announcement (alert) - when a file or notebook is formatted.",
      "properties": {
        "announcement": {
          "description": "Announces when a file or notebook is formatted.",
          "type": "string",
          "enum": [
            "always",
            "never",
            "userGesture"
          ],
          "default": "never",
          "enumDescriptions": [
            "Announces whenever a file is formatted, including if it is set to format on save, type, or, paste, or run of a cell.",
            "Never announces.",
            "Announces when a user explicitly formats a file."
          ]
        },
        "sound": {
          "description": "Plays a sound when a file or notebook is formatted.",
          "type": "string",
          "enum": [
            "always",
            "never",
            "userGesture"
          ],
          "default": "never",
          "enumDescriptions": [
            "Plays the sound whenever a file is formatted, including if it is set to format on save, type, or, paste, or run of a cell.",
            "Never plays the sound.",
            "Plays the sound when a user explicitly formats a file."
          ]
        }
      },
      "default": {
        "announcement": "never",
        "sound": "never"
      },
      "defaultDefaultValue": {
        "announcement": "never",
        "sound": "never"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.lineHasBreakpoint": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a breakpoint.",
      "properties": {
        "announcement": {
          "description": "Announces when the active line has a breakpoint.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when the active line has a breakpoint.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.lineHasError": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has an error.",
      "properties": {
        "announcement": {
          "description": "Announces when the active line has an error.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "off",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when the active line has an error.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.lineHasFoldedArea": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - the active line has a folded area that can be unfolded.",
      "properties": {
        "announcement": {
          "description": "Announces when the active line has a folded area that can be unfolded.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when the active line has a folded area that can be unfolded.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "off",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.lineHasInlineSuggestion": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "sound": "auto"
      },
      "description": "Plays a sound / audio cue when the active line has an inline suggestion.",
      "properties": {
        "sound": {
          "description": "Plays a sound when the active line has an inline suggestion.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "off",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.lineHasWarning": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.",
      "properties": {
        "announcement": {
          "description": "Announces when the active line has a warning.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "off",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "$ref": "#/$defs/_330"
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.nextEditSuggestion": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound / audio cue and/or announcement (alert) when there is a next edit suggestion.",
      "properties": {
        "announcement": {
          "description": "Announces when there is a next edit suggestion.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when there is a next edit suggestion.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.noInlayHints": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when trying to read a line with inlay hints that has no inlay hints.",
      "properties": {
        "announcement": {
          "description": "Announces when trying to read a line with inlay hints that has no inlay hints.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when trying to read a line with inlay hints that has no inlay hints.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.notebookCellCompleted": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when a notebook cell execution is successfully completed.",
      "properties": {
        "announcement": {
          "description": "Announces when a notebook cell execution is successfully completed.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when a notebook cell execution is successfully completed.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.notebookCellFailed": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when a notebook cell execution fails.",
      "properties": {
        "announcement": {
          "description": "Announces when a notebook cell execution fails.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when a notebook cell execution fails.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.onDebugBreak": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when the debugger stopped on a breakpoint.",
      "properties": {
        "announcement": {
          "description": "Announces when the debugger stopped on a breakpoint.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when the debugger stopped on a breakpoint.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.positionHasError": {
      "$ref": "#/$defs/_331"
    },
    "accessibility.signals.positionHasWarning": {
      "$ref": "#/$defs/_331"
    },
    "accessibility.signals.progress": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - on loop while progress is occurring.",
      "properties": {
        "announcement": {
          "description": "Alerts on loop while progress is occurring.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound on loop while progress is occurring.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.save": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "markdownDescription": "Plays a signal - sound (audio cue) and/or announcement (alert) - when a file is saved.",
      "properties": {
        "announcement": {
          "description": "Announces when a file is saved.",
          "type": "string",
          "enum": [
            "always",
            "never",
            "userGesture"
          ],
          "default": "never",
          "enumDescriptions": [
            "Announces whenever a file is saved, including auto save.",
            "Never plays the announcement.",
            "Announces when a user explicitly saves a file."
          ]
        },
        "sound": {
          "description": "Plays a sound when a file is saved.",
          "type": "string",
          "enum": [
            "always",
            "never",
            "userGesture"
          ],
          "default": "never",
          "enumDescriptions": [
            "Plays the sound whenever a file is saved, including auto save.",
            "Never plays the sound.",
            "Plays the sound when a user explicitly saves a file."
          ]
        }
      },
      "default": {
        "announcement": "never",
        "sound": "never"
      },
      "defaultDefaultValue": {
        "announcement": "never",
        "sound": "never"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.taskCompleted": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when a task is completed.",
      "properties": {
        "announcement": {
          "description": "Announces when a task is completed.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when a task is completed.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.taskFailed": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when a task fails (non-zero exit code).",
      "properties": {
        "announcement": {
          "description": "Announces when a task fails (non-zero exit code).",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when a task fails (non-zero exit code).",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.terminalBell": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when the terminal bell is ringing.",
      "properties": {
        "announcement": {
          "description": "Announces when the terminal bell is ringing.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when the terminal bell is ringing.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.terminalCommandFailed": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when a terminal command fails (non-zero exit code) or when a command with such an exit code is navigated to in the accessible view.",
      "properties": {
        "announcement": {
          "description": "Announces when a terminal command fails (non-zero exit code) or when a command with such an exit code is navigated to in the accessible view.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when a terminal command fails (non-zero exit code) or when a command with such an exit code is navigated to in the accessible view.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.terminalCommandSucceeded": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when a terminal command succeeds (zero exit code) or when a command with such an exit code is navigated to in the accessible view.",
      "properties": {
        "announcement": {
          "description": "Announces when a terminal command succeeds (zero exit code) or when a command with such an exit code is navigated to in the accessible view.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when a terminal command succeeds (zero exit code) or when a command with such an exit code is navigated to in the accessible view.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.terminalQuickFix": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "announcement": "auto",
        "sound": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when terminal Quick Fixes are available.",
      "properties": {
        "announcement": {
          "description": "Announces when terminal Quick Fixes are available.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        },
        "sound": {
          "description": "Plays a sound when terminal Quick Fixes are available.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "announcement": "auto",
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.voiceRecordingStarted": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "sound": "on"
      },
      "description": "Plays a sound / audio cue when the voice recording has started.",
      "properties": {
        "sound": {
          "description": "Plays a sound when the voice recording has started.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "auto",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "sound": "on"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.signals.voiceRecordingStopped": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "sound": "auto"
      },
      "description": "Plays a sound / audio cue when the voice recording has stopped.",
      "properties": {
        "sound": {
          "description": "Plays a sound when the voice recording has stopped.",
          "type": "string",
          "enum": [
            "auto",
            "off",
            "on"
          ],
          "default": "off",
          "enumDescriptions": [
            "Enable sound when a screen reader is attached.",
            "Disable sound.",
            "Enable sound."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "sound": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "accessibility.underlineLinks": {
      "type": "boolean",
      "description": "Controls whether links should be underlined in the workbench.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.comments": {
      "description": "Provide information about actions that can be taken in the comment widget or in a file which contains comments.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.debug": {
      "description": "Provide information about how to access the debug console accessibility help dialog when the debug console or run and debug viewlet is focused. Note that a reload of the window is required for this to take effect.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.diffEditor": {
      "description": "Provide information about how to navigate changes in the diff editor when it is focused.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.diffEditorActive": {
      "description": "Indicate when a diff editor becomes the active editor.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.emptyEditorHint": {
      "description": "Provide information about relevant actions in an empty text editor.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.hover": {
      "description": "Provide information about how to open the hover in an Accessible View.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.inlineChat": {
      "description": "Provide information about how to access the inline editor chat accessibility help menu and alert with hints that describe how to use the feature when the input is focused.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.inlineCompletions": {
      "description": "Provide information about how to access the inline completions hover and Accessible View.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.keybindingsEditor": {
      "description": "Provide information about how to change a keybinding in the keybindings editor when a row is focused.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.notebook": {
      "description": "Provide information about how to focus the cell container or inner editor when a notebook cell is focused.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.notification": {
      "description": "Provide information about how to open the notification in an Accessible View.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.panelChat": {
      "description": "Provide information about how to access the chat help menu when the chat input is focused.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.replEditor": {
      "description": "Provide information about how to access the REPL editor accessibility help menu when the REPL editor is focused.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.sourceControl": {
      "description": "Provide information about how to access the source control accessibility help menu when the input is focused.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.terminal": {
      "description": "Provide information about how to access the terminal accessibility help menu when the terminal is focused.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.verbosity.walkthrough": {
      "description": "Provide information about how to open the walkthrough in an Accessible View.",
      "type": "boolean",
      "default": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "accessibility.windowTitleOptimized": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether the `#window.title#` should be optimized for screen readers when in screen reader mode. When enabled, the window title will have `activeEditorState` appended to the end.",
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "application.experimental.rendererProfiling": {
      "type": "boolean",
      "default": false,
      "tags": [
        "experimental",
        "onExP"
      ],
      "markdownDescription": "When enabled, slow renderers are automatically profiled.",
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "breadcrumbs.enabled": {
      "description": "Enable/disable navigation breadcrumbs.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "breadcrumbs.filePath": {
      "description": "Controls whether and how file paths are shown in the breadcrumbs view.",
      "type": "string",
      "default": "on",
      "enum": [
        "last",
        "off",
        "on"
      ],
      "enumDescriptions": [
        "Only show the last element of the file path in the breadcrumbs view.",
        "Do not show the file path in the breadcrumbs view.",
        "Show the file path in the breadcrumbs view."
      ],
      "defaultDefaultValue": "on",
      "scope": 4,
      "restricted": false
    },
    "breadcrumbs.icons": {
      "description": "Render breadcrumb items with icons.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "breadcrumbs.showArrays": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `array`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showBooleans": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `boolean`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showClasses": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `class`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showConstants": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `constant`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showConstructors": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `constructor`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showEnumMembers": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `enumMember`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showEnums": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `enum`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showEvents": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `event`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showFields": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `field`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showFiles": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `file`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showFunctions": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `function`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showInterfaces": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `interface`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showKeys": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `key`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showMethods": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `method`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showModules": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `module`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showNamespaces": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `namespace`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showNull": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `null`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showNumbers": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `number`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showObjects": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `object`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showOperators": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `operator`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showPackages": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `package`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showProperties": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `property`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showStrings": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `string`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showStructs": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `struct`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showTypeParameters": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `typeParameter`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.showVariables": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled breadcrumbs show `variable`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "breadcrumbs.symbolPath": {
      "description": "Controls whether and how symbols are shown in the breadcrumbs view.",
      "type": "string",
      "default": "on",
      "enum": [
        "last",
        "off",
        "on"
      ],
      "enumDescriptions": [
        "Only show the current symbol in the breadcrumbs view.",
        "Do not show symbols in the breadcrumbs view.",
        "Show all symbols in the breadcrumbs view."
      ],
      "defaultDefaultValue": "on",
      "scope": 4,
      "restricted": false
    },
    "breadcrumbs.symbolSortOrder": {
      "description": "Controls how symbols are sorted in the breadcrumbs outline view.",
      "type": "string",
      "default": "position",
      "scope": 6,
      "enum": [
        "name",
        "position",
        "type"
      ],
      "enumDescriptions": [
        "Show symbol outline in alphabetical order.",
        "Show symbol outline in file position order.",
        "Show symbol outline in symbol type order."
      ],
      "defaultDefaultValue": "position",
      "restricted": false
    },
    "chat.agent.enabled": {
      "type": "boolean",
      "description": "Enable agent mode for Copilot Chat. When this is enabled, agent mode can be activated via the dropdown in the view.",
      "default": true,
      "experiment": {
        "mode": "startup"
      },
      "policy": {
        "name": "ChatAgentMode",
        "minimumVersion": "1.99",
        "tags": [
          "ACCOUNT",
          "AGENT"
        ]
      },
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false,
      "tags": [
        "onExP"
      ]
    },
    "chat.agent.maxRequests": {
      "type": "number",
      "markdownDescription": "The maximum number of requests to allow Copilot to use per-turn in agent mode. When the limit is reached, Copilot will ask the user to confirm that it should continue.",
      "default": 25,
      "defaultDefaultValue": 25,
      "scope": 4,
      "restricted": false
    },
    "chat.agent.terminal.allowList": {
      "$ref": "#/$defs/_287"
    },
    "chat.agent.terminal.autoApprove": {
      "$ref": "#/$defs/_287"
    },
    "chat.agent.terminal.denyList": {
      "$ref": "#/$defs/_287"
    },
    "chat.agentSessionsViewLocation": {
      "type": "string",
      "enum": [
        "disabled",
        "showChatsMenu",
        "view"
      ],
      "description": "Controls where to show the agent sessions menu.",
      "default": "disabled",
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": "disabled",
      "scope": 4,
      "restricted": false
    },
    "chat.checkpoints.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enables checkpoints in chat. Checkpoints allow you to restore the chat to a previous state.",
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.checkpoints.showFileChanges": {
      "type": "boolean",
      "description": "Controls whether to show chat checkpoint file changes.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "chat.commandCenter.enabled": {
      "type": "boolean",
      "markdownDescription": "Controls whether the command center shows a menu for actions to control Copilot (requires `#window.commandCenter#`).",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.detectParticipant.enabled": {
      "type": "boolean",
      "description": "Enables chat participant autodetection for panel chat.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.editing.autoAcceptDelay": {
      "type": "number",
      "markdownDescription": "Delay after which changes made by chat are automatically accepted. Values are in seconds, `0` means disabled and `100` seconds is the maximum.",
      "default": 0,
      "minimum": 0,
      "maximum": 100,
      "defaultDefaultValue": 0,
      "scope": 4,
      "restricted": false
    },
    "chat.editor.fontFamily": {
      "type": "string",
      "description": "Controls the font family in chat codeblocks.",
      "default": "default",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "chat.editor.fontSize": {
      "type": "number",
      "description": "Controls the font size in pixels in chat codeblocks.",
      "default": 14,
      "defaultDefaultValue": 14,
      "scope": 4,
      "restricted": false
    },
    "chat.editor.fontWeight": {
      "type": "string",
      "description": "Controls the font weight in chat codeblocks.",
      "default": "default",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "chat.editor.lineHeight": {
      "type": "number",
      "description": "Controls the line height in pixels in chat codeblocks. Use 0 to compute the line height from the font size.",
      "default": 0,
      "defaultDefaultValue": 0,
      "scope": 4,
      "restricted": false
    },
    "chat.editor.wordWrap": {
      "type": "string",
      "description": "Controls whether lines should wrap in chat codeblocks.",
      "default": "off",
      "enum": [
        "off",
        "on"
      ],
      "defaultDefaultValue": "off",
      "scope": 4,
      "restricted": false
    },
    "chat.editRequests": {
      "markdownDescription": "Enables editing of requests in the chat. This allows you to change the request content and resubmit it to the model.",
      "type": "string",
      "enum": [
        "hover",
        "inline",
        "input",
        "none"
      ],
      "default": "inline",
      "defaultDefaultValue": "inline",
      "scope": 4,
      "restricted": false
    },
    "chat.edits2.enabled": {
      "type": "boolean",
      "description": "Enable the new Edits mode that is based on tool-calling. When this is enabled, models that don't support tool-calling are unavailable for Edits mode.",
      "default": true,
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false,
      "tags": [
        "onExP"
      ]
    },
    "chat.emptyChatState.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Shows a modified empty chat state with hints in the input placeholder text.",
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.experimental.detectParticipant.enabled": {
      "type": "boolean",
      "deprecationMessage": "This setting is deprecated. Please use `chat.detectParticipant.enabled` instead.",
      "description": "Enables chat participant autodetection for panel chat.",
      "default": null,
      "defaultDefaultValue": null,
      "scope": 4,
      "restricted": false
    },
    "chat.extensionTools.enabled": {
      "type": "boolean",
      "description": "Enable using tools contributed by third-party extensions.",
      "default": true,
      "policy": {
        "name": "ChatAgentExtensionTools",
        "minimumVersion": "1.99",
        "description": "Enable using tools contributed by third-party extensions."
      },
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.implicitContext.enabled": {
      "type": "object",
      "tags": [
        "experimental"
      ],
      "description": "Enables automatically using the active editor as chat context for specified chat locations.",
      "additionalProperties": {
        "type": "string",
        "enum": [
          "never",
          "first",
          "always"
        ],
        "description": "The value for the implicit context.",
        "enumDescriptions": [
          "Implicit context is never enabled.",
          "Implicit context is enabled for the first interaction.",
          "Implicit context is always enabled."
        ]
      },
      "default": {
        "panel": "always"
      },
      "defaultDefaultValue": {
        "panel": "always"
      },
      "scope": 4,
      "restricted": false
    },
    "chat.implicitContext.suggestedContext": {
      "type": "boolean",
      "tags": [
        "experimental"
      ],
      "markdownDescription": "Controls whether the new implicit context flow is shown. In Ask and Edit modes, the context will automatically be included. In Agent mode context will be suggested as an attachment. Selections are always included as context.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.instructionsFilesLocations": {
      "type": "object",
      "title": "Instructions File Locations",
      "markdownDescription": "Specify location(s) of instructions files (`*.instructions.md`) that can be attached in Chat sessions. [Learn More](https://aka.ms/vscode-ghcp-custom-instructions).\n\nRelative paths are resolved from the root folder(s) of your workspace.",
      "default": {
        ".github/instructions": true
      },
      "additionalProperties": {
        "type": "boolean"
      },
      "restricted": true,
      "tags": [
        "experimental",
        "prompts",
        "reusable prompts",
        "prompt snippets",
        "instructions"
      ],
      "examples": [
        {
          ".github/instructions": true
        },
        {
          ".github/instructions": true,
          "/Users/vscode/repos/instructions": true
        }
      ],
      "defaultDefaultValue": {
        ".github/instructions": true
      },
      "scope": 4
    },
    "chat.math.enabled": {
      "type": "boolean",
      "description": "Enable math rendering in chat responses using Katex.",
      "default": false,
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "chat.mcp.assisted.nuget.enabled": {
      "type": "boolean",
      "description": "Enables NuGet packages for AI-assisted MCP server installation. Used to install MCP servers by name from the central registry for .NET packages (NuGet.org).",
      "default": false,
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "chat.mcp.autostart": {
      "type": "string",
      "description": "Controls whether MCP servers should be automatically started when the chat messages are submitted.",
      "default": "never",
      "enum": [
        "never",
        "newAndOutdated",
        "onlyNew"
      ],
      "enumDescriptions": [
        "Never automatically start MCP servers.",
        "Automatically start new and outdated MCP servers that are not yet running.",
        "Only automatically start new MCP servers that have never been run."
      ],
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": "never",
      "scope": 4,
      "restricted": false
    },
    "chat.mcp.discovery.enabled": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "default": {
            "claude-desktop": true,
            "cursor-global": true,
            "cursor-workspace": true,
            "windsurf": true
          },
          "properties": {
            "claude-desktop": {
              "type": "boolean",
              "description": "Enables discovery of Claude Desktop servers"
            },
            "cursor-global": {
              "type": "boolean",
              "description": "Enables discovery of Cursor (Global) servers"
            },
            "cursor-workspace": {
              "type": "boolean",
              "description": "Enables discovery of Cursor (Workspace) servers"
            },
            "windsurf": {
              "type": "boolean",
              "description": "Enables discovery of Windsurf servers"
            }
          }
        }
      ],
      "default": true,
      "markdownDescription": "Configures discovery of Model Context Protocol servers on the machine. It may be set to `true` or `false` to disable or enable all sources, and an mapping sources you wish to enable.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.mcp.enabled": {
      "type": "boolean",
      "description": "Enables integration with Model Context Protocol servers to provide additional tools and functionality.",
      "default": true,
      "policy": {
        "name": "ChatMCP",
        "minimumVersion": "1.99",
        "tags": [
          "ACCOUNT",
          "MCP"
        ]
      },
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.mcp.serverSampling": {
      "type": "object",
      "description": "Configures which models are exposed to MCP servers for sampling (making model requests in the background). This setting can be edited in a graphical way under the `MCP: List Servers` command.",
      "scope": 5,
      "additionalProperties": {
        "type": "object",
        "properties": {
          "allowedDuringChat": {
            "type": "boolean",
            "description": "Whether this server is make sampling requests during its tool calls in a chat session.",
            "default": true
          },
          "allowedOutsideChat": {
            "type": "boolean",
            "description": "Whether this server is allowed to make sampling requests outside of a chat session.",
            "default": false
          },
          "allowedModels": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "A model the MCP server has access to."
            }
          }
        }
      },
      "default": {},
      "restricted": false
    },
    "chat.modeFilesLocations": {
      "type": "object",
      "title": "Mode File Locations",
      "markdownDescription": "Specify location(s) of custom chat mode files (`*.chatmode.md`). [Learn More](https://aka.ms/vscode-ghcp-custom-chat-modes).\n\nRelative paths are resolved from the root folder(s) of your workspace.",
      "default": {
        ".github/chatmodes": true
      },
      "additionalProperties": {
        "type": "boolean"
      },
      "unevaluatedProperties": {
        "type": "boolean"
      },
      "restricted": true,
      "tags": [
        "experimental",
        "prompts",
        "reusable prompts",
        "prompt snippets",
        "instructions"
      ],
      "examples": [
        {
          ".github/chatmodes": true
        },
        {
          ".github/chatmodes": true,
          "/Users/vscode/repos/chatmodes": true
        }
      ],
      "defaultDefaultValue": {
        ".github/chatmodes": true
      },
      "scope": 4
    },
    "chat.notifyWindowOnConfirmation": {
      "type": "boolean",
      "description": "Controls whether the Copilot window should notify the user when a confirmation is needed while the window is not in focus. This includes a window badge as well as notification toast.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.promptFiles": {
      "type": "boolean",
      "title": "Prompt Files",
      "markdownDescription": "Enable reusable prompt (`*.prompt.md`) and instruction files (`*.instructions.md`) in Chat sessions. [Learn More](https://aka.ms/vscode-ghcp-prompt-snippets).",
      "default": true,
      "restricted": true,
      "disallowConfigurationDefault": true,
      "tags": [
        "experimental",
        "prompts",
        "reusable prompts",
        "prompt snippets",
        "instructions"
      ],
      "policy": {
        "name": "ChatPromptFiles",
        "minimumVersion": "1.99",
        "description": "Enables reusable prompt and instruction files in Chat sessions."
      },
      "defaultDefaultValue": true,
      "scope": 4
    },
    "chat.promptFilesLocations": {
      "type": "object",
      "title": "Prompt File Locations",
      "markdownDescription": "Specify location(s) of reusable prompt files (`*.prompt.md`) that can be run in Chat sessions. [Learn More](https://aka.ms/vscode-ghcp-prompt-snippets).\n\nRelative paths are resolved from the root folder(s) of your workspace.",
      "default": {
        ".github/prompts": true
      },
      "additionalProperties": {
        "type": "boolean"
      },
      "unevaluatedProperties": {
        "type": "boolean"
      },
      "restricted": true,
      "tags": [
        "experimental",
        "prompts",
        "reusable prompts",
        "prompt snippets",
        "instructions"
      ],
      "examples": [
        {
          ".github/prompts": true
        },
        {
          ".github/prompts": true,
          "/Users/vscode/repos/prompts": true
        }
      ],
      "defaultDefaultValue": {
        ".github/prompts": true
      },
      "scope": 4
    },
    "chat.renderRelatedFiles": {
      "type": "boolean",
      "description": "Controls whether related files should be rendered in the chat input.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "chat.sendElementsToChat.attachCSS": {
      "default": true,
      "markdownDescription": "Controls whether CSS of the selected element will be added to the chat. `#chat.sendElementsToChat.enabled#` must be enabled.",
      "type": "boolean",
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.sendElementsToChat.attachImages": {
      "default": true,
      "markdownDescription": "Controls whether a screenshot of the selected element will be added to the chat. `#chat.sendElementsToChat.enabled#` must be enabled.",
      "type": "boolean",
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.sendElementsToChat.enabled": {
      "default": true,
      "description": "Controls whether elements can be sent to chat from the Simple Browser.",
      "type": "boolean",
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.setup.signInDialogVariant": {
      "type": "string",
      "enum": [
        "default",
        "google"
      ],
      "description": "Control variations of the sign-in dialog.",
      "default": "default",
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "auto"
      },
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "chat.todoListTool.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Enables todo lists in chat. This tool allows you to use todo lists in chat.",
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "chat.tools.terminal.autoApprove": {
      "markdownDescription": "A list of commands or regular expressions that control whether the run in terminal tool commands require explicit approval. These will be matched against the start of a command. A regular expression can be provided by wrapping the string in `/` characters followed by optional flags such as `i` for case-insensitivity.\n\nSet to `true` to automatically approve commands, `false` to always require explicit approval or `null` to unset the value.\n\nNote that these commands and regular expressions are evaluated for every _sub-command_ within the full _command line_, so `foo && bar` for example will need both `foo` and `bar` to match a `true` entry and must not match a `false` entry in order to auto approve. Inline commands are also detected so `echo $(rm file)` will need both `echo $(rm file)` and `rm file` to pass.\n\nAn object can be used to match against the full command line instead of matching sub-commands and inline commands, for example `{ approve: false, matchCommandLine: true }`. In order to be auto approved _both_ the sub-command and command line must not be explicitly denied, then _either_ all sub-commands or command line needs to be approved.\n\nExamples:\n|Value|Description|\n|---|---|\n| `\"mkdir\": true` | Allow all commands starting with `mkdir`\n| `\"npm run build\": true` | Allow all commands starting with `npm run build`\n| `\"/^git (status\\|show\\b.*)$/\": true` | Allow `git status` and all commands starting with `git show`\n| `\"/^Get-ChildItem\\b/i\": true` | will allow `Get-ChildItem` commands regardless of casing\n| `\"/.*/\": true` | Allow all commands (denied commands still require approval)\n| `\"rm\": false` | Require explicit approval for all commands starting with `rm`\n| `\"/.ps1/i\": { approve: false, matchCommandLine: true }` | Require explicit approval for any _command line_ that contains `\".ps1\"` regardless of casing\n| `\"rm\": null` | Unset the default `false` value for `rm`",
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/$defs/_286"
          },
          {
            "type": "object",
            "properties": {
              "approve": {
                "$ref": "#/$defs/_286"
              },
              "matchCommandLine": {
                "type": "boolean",
                "enum": [
                  true,
                  false
                ],
                "enumDescriptions": [
                  "Match against the full command line, eg. `foo && bar`.",
                  "Match against sub-commands and inline commands, eg. `foo && bar` will need both `foo` and `bar` to match."
                ],
                "description": "Whether to match against the full command line, as opposed to splitting by sub-commands and inline commands."
              }
            }
          },
          {
            "type": "null",
            "description": "Ignore the pattern, this is useful for unsetting the same pattern set at a higher scope."
          }
        ]
      },
      "default": {
        "/^Remove-Item\\b/i": false,
        "chmod": false,
        "chown": false,
        "curl": false,
        "del": false,
        "eval": false,
        "kill": false,
        "rm": false,
        "rmdir": false,
        "wget": false
      },
      "defaultDefaultValue": {
        "/^Remove-Item\\b/i": false,
        "chmod": false,
        "chown": false,
        "curl": false,
        "del": false,
        "eval": false,
        "kill": false,
        "rm": false,
        "rmdir": false,
        "wget": false
      },
      "scope": 4,
      "restricted": false
    },
    "chat.tools.useTreePicker": {
      "type": "boolean",
      "default": true,
      "description": "Use the new Quick Tree-based tools picker instead of the Quick Pick-based one. Provides better hierarchical organization of tools and tool sets with collapsible sections, improved visual hierarchy, and native tree interactions.",
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.undoRequests.restoreInput": {
      "default": true,
      "markdownDescription": "Controls whether the input of the chat should be restored when an undo request is made. The input will be filled with the text of the request that was restored.",
      "type": "boolean",
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "chat.useFileStorage": {
      "type": "boolean",
      "description": "Enables storing chat sessions on disk instead of in the storage service. Enabling this does a one-time per-workspace migration of existing sessions to the new format.",
      "default": true,
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "comments.collapseOnResolve": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the comment thread should collapse when the thread is resolved.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "comments.maxHeight": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the comments widget scrolls or expands.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "comments.openPanel": {
      "enum": [
        "neverOpen",
        "openOnSessionStart",
        "openOnSessionStartWithComments"
      ],
      "default": "openOnSessionStartWithComments",
      "description": "Controls when the comments panel should open.",
      "restricted": false,
      "markdownDeprecationMessage": "This setting is deprecated in favor of `comments.openView`.",
      "defaultDefaultValue": "openOnSessionStartWithComments",
      "scope": 4,
      "deprecationMessage": "This setting is deprecated in favor of `comments.openView`."
    },
    "comments.openView": {
      "enum": [
        "file",
        "firstFile",
        "firstFileUnresolved",
        "never"
      ],
      "enumDescriptions": [
        "The comments view will open when a file with comments is active.",
        "If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active.",
        "If the comments view has not been opened yet during this session and the comment is not resolved, it will open the first time during a session that a file with comments is active.",
        "The comments view will never be opened."
      ],
      "default": "firstFile",
      "description": "Controls when the comments view should open.",
      "restricted": false,
      "defaultDefaultValue": "firstFile",
      "scope": 4
    },
    "comments.thread.confirmOnCollapse": {
      "type": "string",
      "enum": [
        "never",
        "whenHasUnsubmittedComments"
      ],
      "enumDescriptions": [
        "Never show a confirmation dialog when collapsing a comment thread.",
        "Show a confirmation dialog when collapsing a comment thread with unsubmitted comments."
      ],
      "default": "whenHasUnsubmittedComments",
      "description": "Controls whether a confirmation dialog is shown when collapsing a comment thread.",
      "defaultDefaultValue": "whenHasUnsubmittedComments",
      "scope": 4,
      "restricted": false
    },
    "comments.useRelativeTime": {
      "type": "boolean",
      "default": true,
      "description": "Determines if relative time will be used in comment timestamps (ex. '1 day ago').",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "comments.visible": {
      "type": "boolean",
      "default": true,
      "description": "Controls the visibility of the comments bar and comment threads in editors that have commenting ranges and comments. Comments are still accessible via the Comments view and will cause commenting to be toggled on in the same way running the command \"Comments: Toggle Editor Commenting\" toggles comments.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "css.completion.completePropertyWithSemicolon": {
      "$ref": "#/$defs/_333"
    },
    "css.completion.triggerPropertyValueCompletion": {
      "$ref": "#/$defs/_332"
    },
    "css.customData": {
      "type": "array",
      "markdownDescription": "A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).\n\nVS Code loads custom data on startup to enhance its CSS support for CSS custom properties (variables), at-rules, pseudo-classes, and pseudo-elements you specify in the JSON files.\n\nThe file paths are relative to workspace and only workspace folder settings are considered.",
      "default": [],
      "items": {
        "type": "string"
      },
      "scope": 5,
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": [],
      "restricted": false
    },
    "css.format.braceStyle": {
      "$ref": "#/$defs/_358"
    },
    "css.format.enable": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Enable/disable default CSS formatter.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "css.format.maxPreserveNewLines": {
      "type": [
        "number",
        "null"
      ],
      "scope": 5,
      "default": null,
      "markdownDescription": "Maximum number of line breaks to be preserved in one chunk, when `#css.format.preserveNewLines#` is enabled.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": null,
      "restricted": false
    },
    "css.format.newlineBetweenRules": {
      "$ref": "#/$defs/_356"
    },
    "css.format.newlineBetweenSelectors": {
      "$ref": "#/$defs/_355"
    },
    "css.format.preserveNewLines": {
      "$ref": "#/$defs/_359"
    },
    "css.format.spaceAroundSelectorSeparator": {
      "$ref": "#/$defs/_357"
    },
    "css.hover.documentation": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Show property and value documentation in CSS hovers.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "css.hover.references": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Show references to MDN in CSS hovers.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "css.lint.argumentsInColorFunction": {
      "$ref": "#/$defs/_345"
    },
    "css.lint.boxModel": {
      "$ref": "#/$defs/_340"
    },
    "css.lint.compatibleVendorPrefixes": {
      "$ref": "#/$defs/_335"
    },
    "css.lint.duplicateProperties": {
      "$ref": "#/$defs/_337"
    },
    "css.lint.emptyRules": {
      "$ref": "#/$defs/_338"
    },
    "css.lint.float": {
      "$ref": "#/$defs/_352"
    },
    "css.lint.fontFaceProperties": {
      "$ref": "#/$defs/_343"
    },
    "css.lint.hexColorLength": {
      "$ref": "#/$defs/_344"
    },
    "css.lint.idSelector": {
      "$ref": "#/$defs/_353"
    },
    "css.lint.ieHack": {
      "$ref": "#/$defs/_348"
    },
    "css.lint.important": {
      "$ref": "#/$defs/_351"
    },
    "css.lint.importStatement": {
      "$ref": "#/$defs/_339"
    },
    "css.lint.propertyIgnoredDueToDisplay": {
      "$ref": "#/$defs/_350"
    },
    "css.lint.universalSelector": {
      "$ref": "#/$defs/_341"
    },
    "css.lint.unknownAtRules": {
      "$ref": "#/$defs/_354"
    },
    "css.lint.unknownProperties": {
      "$ref": "#/$defs/_346"
    },
    "css.lint.unknownVendorSpecificProperties": {
      "$ref": "#/$defs/_349"
    },
    "css.lint.validProperties": {
      "$ref": "#/$defs/_347"
    },
    "css.lint.vendorPrefix": {
      "$ref": "#/$defs/_336"
    },
    "css.lint.zeroUnits": {
      "$ref": "#/$defs/_342"
    },
    "css.trace.server": {
      "type": "string",
      "scope": 4,
      "enum": [
        "messages",
        "off",
        "verbose"
      ],
      "default": "off",
      "description": "Traces the communication between VS Code and the CSS language server.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "off",
      "restricted": false
    },
    "css.validate": {
      "$ref": "#/$defs/_334"
    },
    "debug.allowBreakpointsEverywhere": {
      "type": "boolean",
      "description": "Allow setting breakpoints in any file.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "debug.autoExpandLazyVariables": {
      "type": "string",
      "enum": [
        "auto",
        "off",
        "on"
      ],
      "default": "auto",
      "enumDescriptions": [
        "When in screen reader optimized mode, automatically expand lazy variables.",
        "Never automatically expand lazy variables.",
        "Always automatically expand lazy variables."
      ],
      "description": "Controls whether variables that are lazily resolved, such as getters, are automatically resolved and expanded by the debugger.",
      "defaultDefaultValue": "auto",
      "scope": 4,
      "restricted": false
    },
    "debug.closeReadonlyTabsOnEnd": {
      "type": "boolean",
      "description": "At the end of a debug session, all the read-only tabs associated with that session will be closed",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "debug.confirmOnExit": {
      "description": "Controls whether to confirm when the window closes if there are active debug sessions.",
      "type": "string",
      "enum": [
        "always",
        "never"
      ],
      "enumDescriptions": [
        "Always confirm if there are debug sessions.",
        "Never confirm."
      ],
      "default": "never",
      "defaultDefaultValue": "never",
      "scope": 4,
      "restricted": false
    },
    "debug.console.acceptSuggestionOnEnter": {
      "enum": [
        "off",
        "on"
      ],
      "description": "Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console.",
      "default": "off",
      "defaultDefaultValue": "off",
      "scope": 4,
      "restricted": false
    },
    "debug.console.closeOnEnd": {
      "type": "boolean",
      "description": "Controls if the Debug Console should be automatically closed when the debug session ends.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "debug.console.collapseIdenticalLines": {
      "type": "boolean",
      "description": "Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "debug.console.fontFamily": {
      "type": "string",
      "description": "Controls the font family in the Debug Console.",
      "default": "default",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "debug.console.fontSize": {
      "type": "number",
      "description": "Controls the font size in pixels in the Debug Console.",
      "default": 14,
      "defaultDefaultValue": 14,
      "scope": 4,
      "restricted": false
    },
    "debug.console.historySuggestions": {
      "type": "boolean",
      "description": "Controls if the Debug Console should suggest previously typed input.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "debug.console.lineHeight": {
      "type": "number",
      "description": "Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size.",
      "default": 0,
      "defaultDefaultValue": 0,
      "scope": 4,
      "restricted": false
    },
    "debug.console.maximumLines": {
      "type": "number",
      "description": "Controls the maximum number of lines in the Debug Console.",
      "default": 10000,
      "defaultDefaultValue": 10000,
      "scope": 4,
      "restricted": false
    },
    "debug.console.wordWrap": {
      "type": "boolean",
      "description": "Controls if the lines should wrap in the Debug Console.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "debug.disassemblyView.showSourceCode": {
      "type": "boolean",
      "default": true,
      "description": "Show Source Code in Disassembly View.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "debug.enableStatusBarColor": {
      "type": "boolean",
      "description": "Color of the Status bar when debugger is active.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "debug.focusEditorOnBreak": {
      "type": "boolean",
      "description": "Controls whether the editor should be focused when the debugger breaks.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "debug.focusWindowOnBreak": {
      "type": "boolean",
      "description": "Controls whether the workbench window should be focused when the debugger breaks.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "debug.gutterMiddleClickAction": {
      "type": "string",
      "enum": [
        "conditionalBreakpoint",
        "logpoint",
        "none",
        "triggeredBreakpoint"
      ],
      "description": "Controls the action to perform when clicking the editor gutter with the middle mouse button.",
      "enumDescriptions": [
        "Add Conditional Breakpoint.",
        "Add Logpoint.",
        "Don't perform any action.",
        "Add Triggered Breakpoint."
      ],
      "default": "logpoint",
      "defaultDefaultValue": "logpoint",
      "scope": 4,
      "restricted": false
    },
    "debug.hideLauncherWhileDebugging": {
      "type": "boolean",
      "markdownDescription": "Hide 'Start Debugging' control in title bar of 'Run and Debug' view while debugging is active. Only relevant when `#debug.toolBarLocation#` is not `docked`.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "debug.hideSlowPreLaunchWarning": {
      "type": "boolean",
      "markdownDescription": "Hide the warning shown when a `preLaunchTask` has been running for a while.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "debug.inlineValues": {
      "type": "string",
      "enum": [
        "auto",
        "off",
        "on"
      ],
      "description": "Show variable values inline in editor while debugging.",
      "enumDescriptions": [
        "Show variable values inline in editor while debugging when the language supports inline value locations.",
        "Never show variable values inline in editor while debugging.",
        "Always show variable values inline in editor while debugging."
      ],
      "default": "auto",
      "defaultDefaultValue": "auto",
      "scope": 4,
      "restricted": false
    },
    "debug.internalConsoleOptions": {
      "enum": [
        "neverOpen",
        "openOnFirstSessionStart",
        "openOnSessionStart"
      ],
      "default": "openOnFirstSessionStart",
      "description": "Controls when the internal Debug Console should open.",
      "defaultDefaultValue": "openOnFirstSessionStart",
      "scope": 4,
      "restricted": false
    },
    "debug.javascript.autoAttachFilter": {
      "type": "string",
      "default": "disabled",
      "enum": [
        "always",
        "disabled",
        "onlyWithFlag",
        "smart"
      ],
      "enumDescriptions": [
        "Auto attach to every Node.js process launched in the terminal.",
        "Auto attach is disabled and not shown in status bar.",
        "Only auto attach when the `--inspect` is given.",
        "Auto attach when running scripts that aren't in a node_modules folder."
      ],
      "markdownDescription": "Configures which processes to automatically attach and debug when `#debug.node.autoAttach#` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.",
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": "disabled",
      "restricted": false
    },
    "debug.javascript.autoAttachSmartPattern": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [
        "${workspaceFolder}/**",
        "!**/node_modules/**",
        "**/$KNOWN_TOOLS$/**"
      ],
      "markdownDescription": "Configures glob patterns for determining when to attach in \"smart\" `#debug.javascript.autoAttachFilter#` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).",
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": [
        "${workspaceFolder}/**",
        "!**/node_modules/**",
        "**/$KNOWN_TOOLS$/**"
      ],
      "restricted": false
    },
    "debug.javascript.automaticallyTunnelRemoteServer": {
      "type": "boolean",
      "description": "When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.",
      "default": true,
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "debug.javascript.breakOnConditionalError": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Whether to stop when conditional breakpoints throw an error.",
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "debug.javascript.codelens.npmScripts": {
      "enum": [
        "all",
        "never",
        "top"
      ],
      "default": "top",
      "description": "Where a \"Run\" and \"Debug\" code lens should be shown in your npm scripts. It may be on \"all\", scripts, on \"top\" of the script section, or \"never\".",
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": "top",
      "restricted": false
    },
    "debug.javascript.debugByLinkOptions": {
      "default": "on",
      "description": "Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to \"off\" to disable this behavior, or \"always\" to enable debugging in all terminals.",
      "oneOf": [
        {
          "$ref": "#/$defs/_320"
        },
        {
          "type": "object",
          "properties": {
            "browserLaunchLocation": {
              "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
              "default": null,
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "enum": [
                    "ui",
                    "workspace"
                  ]
                }
              ]
            },
            "cascadeTerminateToConfigurations": {
              "$ref": "#/$defs/_309"
            },
            "cleanUp": {
              "type": "string",
              "enum": [
                "onlyTab",
                "wholeBrowser"
              ],
              "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
              "default": "wholeBrowser"
            },
            "customDescriptionGenerator": {
              "$ref": "#/$defs/_307"
            },
            "customPropertiesGenerator": {
              "$ref": "#/$defs/_308"
            },
            "cwd": {
              "type": "string",
              "description": "Optional working directory for the runtime executable.",
              "default": null
            },
            "disableNetworkCache": {
              "type": "boolean",
              "description": "Controls whether to skip the network cache for each request",
              "default": true
            },
            "enableContentValidation": {
              "$ref": "#/$defs/_306"
            },
            "enabled": {
              "$ref": "#/$defs/_320"
            },
            "enableDWARF": {
              "$ref": "#/$defs/_310"
            },
            "env": {
              "type": "object",
              "description": "Optional dictionary of environment key/value pairs for the browser.",
              "default": {}
            },
            "file": {
              "type": "string",
              "description": "A local html file to open in the browser",
              "default": "${workspaceFolder}/index.html",
              "tags": [
                "setup"
              ]
            },
            "includeDefaultArgs": {
              "type": "boolean",
              "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
              "default": true
            },
            "includeLaunchArgs": {
              "type": "boolean",
              "description": "Advanced: whether any default launch/debugging arguments are set on the browser. The debugger will assume the browser will use pipe debugging such as that which is provided with `--remote-debugging-pipe`.",
              "default": true
            },
            "inspectUri": {
              "type": [
                "string",
                "null"
              ],
              "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
              "default": null
            },
            "killBehavior": {
              "type": "string",
              "enum": [
                "forceful",
                "none",
                "polite"
              ],
              "default": "forceful",
              "markdownDescription": "Configures how browser processes are killed when stopping the session with `cleanUp: wholeBrowser`. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen."
            },
            "outFiles": {
              "$ref": "#/$defs/_294"
            },
            "outputCapture": {
              "$ref": "#/$defs/_305"
            },
            "pathMapping": {
              "type": "object",
              "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
              "default": {}
            },
            "pauseForSourceMap": {
              "$ref": "#/$defs/_295"
            },
            "perScriptSourcemaps": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "no",
                "yes"
              ],
              "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate."
            },
            "port": {
              "type": "number",
              "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
              "default": 0
            },
            "profileStartup": {
              "type": "boolean",
              "description": "If true, will start profiling soon as the process launches",
              "default": true
            },
            "resolveSourceMapLocations": {
              "type": [
                "array",
                "null"
              ],
              "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
              "default": null,
              "items": {
                "type": "string"
              }
            },
            "runtimeArgs": {
              "type": "array",
              "description": "Optional arguments passed to the runtime executable.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "runtimeExecutable": {
              "type": [
                "string",
                "null"
              ],
              "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
              "default": "stable"
            },
            "server": {
              "oneOf": [
                {
                  "type": "object",
                  "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                  "additionalProperties": false,
                  "default": {
                    "program": "node my-server.js"
                  },
                  "properties": {
                    "args": {
                      "type": [
                        "array",
                        "string"
                      ],
                      "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                      "items": {
                        "type": "string"
                      },
                      "default": [],
                      "tags": [
                        "setup"
                      ]
                    },
                    "attachSimplePort": {
                      "oneOf": [
                        {
                          "$ref": "#/$defs/_322"
                        },
                        {
                          "type": "integer"
                        }
                      ],
                      "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                      "default": 9229
                    },
                    "autoAttachChildProcesses": {
                      "$ref": "#/$defs/_314"
                    },
                    "cascadeTerminateToConfigurations": {
                      "$ref": "#/$defs/_309"
                    },
                    "console": {
                      "type": "string",
                      "enum": [
                        "externalTerminal",
                        "integratedTerminal",
                        "internalConsole"
                      ],
                      "enumDescriptions": [
                        "External terminal that can be configured via user settings",
                        "VS Code's integrated terminal",
                        "VS Code Debug Console (which doesn't support to read input from a program)"
                      ],
                      "description": "Where to launch the debug target.",
                      "default": "internalConsole"
                    },
                    "customDescriptionGenerator": {
                      "$ref": "#/$defs/_307"
                    },
                    "customPropertiesGenerator": {
                      "$ref": "#/$defs/_308"
                    },
                    "cwd": {
                      "type": "string",
                      "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                      "default": "${workspaceFolder}",
                      "tags": [
                        "setup"
                      ]
                    },
                    "enableContentValidation": {
                      "$ref": "#/$defs/_306"
                    },
                    "enableDWARF": {
                      "$ref": "#/$defs/_310"
                    },
                    "env": {
                      "$ref": "#/$defs/_315"
                    },
                    "envFile": {
                      "$ref": "#/$defs/_316"
                    },
                    "experimentalNetworking": {
                      "type": "string",
                      "default": "auto",
                      "description": "Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.",
                      "enum": [
                        "auto",
                        "off",
                        "on"
                      ]
                    },
                    "killBehavior": {
                      "type": "string",
                      "enum": [
                        "forceful",
                        "none",
                        "polite"
                      ],
                      "default": "forceful",
                      "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen."
                    },
                    "localRoot": {
                      "$ref": "#/$defs/_312"
                    },
                    "nodeVersionHint": {
                      "$ref": "#/$defs/_318"
                    },
                    "outFiles": {
                      "$ref": "#/$defs/_294"
                    },
                    "outputCapture": {
                      "$ref": "#/$defs/_305"
                    },
                    "pauseForSourceMap": {
                      "$ref": "#/$defs/_295"
                    },
                    "profileStartup": {
                      "type": "boolean",
                      "description": "If true, will start profiling as soon as the process launches",
                      "default": true
                    },
                    "program": {
                      "type": "string",
                      "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                      "default": "",
                      "tags": [
                        "setup"
                      ]
                    },
                    "remoteRoot": {
                      "$ref": "#/$defs/_313"
                    },
                    "resolveSourceMapLocations": {
                      "$ref": "#/$defs/_293"
                    },
                    "restart": {
                      "$ref": "#/$defs/_321"
                    },
                    "runtimeArgs": {
                      "type": "array",
                      "description": "Optional arguments passed to the runtime executable.",
                      "items": {
                        "type": "string"
                      },
                      "default": [],
                      "tags": [
                        "setup"
                      ]
                    },
                    "runtimeExecutable": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                      "default": "node"
                    },
                    "runtimeSourcemapPausePatterns": {
                      "$ref": "#/$defs/_317"
                    },
                    "runtimeVersion": {
                      "type": "string",
                      "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                      "default": "default"
                    },
                    "showAsyncStacks": {
                      "$ref": "#/$defs/_296"
                    },
                    "skipFiles": {
                      "$ref": "#/$defs/_297"
                    },
                    "smartStep": {
                      "$ref": "#/$defs/_298"
                    },
                    "sourceMapPathOverrides": {
                      "$ref": "#/$defs/_301"
                    },
                    "sourceMapRenames": {
                      "$ref": "#/$defs/_300"
                    },
                    "sourceMaps": {
                      "$ref": "#/$defs/_299"
                    },
                    "stopOnEntry": {
                      "type": [
                        "boolean",
                        "string"
                      ],
                      "description": "Automatically stop program after launch.",
                      "default": true
                    },
                    "timeout": {
                      "$ref": "#/$defs/_302"
                    },
                    "timeouts": {
                      "$ref": "#/$defs/_303"
                    },
                    "trace": {
                      "$ref": "#/$defs/_304"
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "JavaScript Debug Terminal",
                  "additionalProperties": false,
                  "default": {
                    "program": "npm start"
                  },
                  "properties": {
                    "autoAttachChildProcesses": {
                      "$ref": "#/$defs/_314"
                    },
                    "cascadeTerminateToConfigurations": {
                      "$ref": "#/$defs/_309"
                    },
                    "command": {
                      "$ref": "#/$defs/_319"
                    },
                    "customDescriptionGenerator": {
                      "$ref": "#/$defs/_307"
                    },
                    "customPropertiesGenerator": {
                      "$ref": "#/$defs/_308"
                    },
                    "cwd": {
                      "$ref": "#/$defs/_311"
                    },
                    "enableContentValidation": {
                      "$ref": "#/$defs/_306"
                    },
                    "enableDWARF": {
                      "$ref": "#/$defs/_310"
                    },
                    "env": {
                      "$ref": "#/$defs/_315"
                    },
                    "envFile": {
                      "$ref": "#/$defs/_316"
                    },
                    "localRoot": {
                      "$ref": "#/$defs/_312"
                    },
                    "nodeVersionHint": {
                      "$ref": "#/$defs/_318"
                    },
                    "outFiles": {
                      "$ref": "#/$defs/_294"
                    },
                    "outputCapture": {
                      "$ref": "#/$defs/_305"
                    },
                    "pauseForSourceMap": {
                      "$ref": "#/$defs/_295"
                    },
                    "remoteRoot": {
                      "$ref": "#/$defs/_313"
                    },
                    "resolveSourceMapLocations": {
                      "$ref": "#/$defs/_293"
                    },
                    "runtimeSourcemapPausePatterns": {
                      "$ref": "#/$defs/_317"
                    },
                    "showAsyncStacks": {
                      "$ref": "#/$defs/_296"
                    },
                    "skipFiles": {
                      "$ref": "#/$defs/_297"
                    },
                    "smartStep": {
                      "$ref": "#/$defs/_298"
                    },
                    "sourceMapPathOverrides": {
                      "$ref": "#/$defs/_301"
                    },
                    "sourceMapRenames": {
                      "$ref": "#/$defs/_300"
                    },
                    "sourceMaps": {
                      "$ref": "#/$defs/_299"
                    },
                    "timeout": {
                      "$ref": "#/$defs/_302"
                    },
                    "timeouts": {
                      "$ref": "#/$defs/_303"
                    },
                    "trace": {
                      "$ref": "#/$defs/_304"
                    }
                  }
                }
              ]
            },
            "showAsyncStacks": {
              "$ref": "#/$defs/_296"
            },
            "skipFiles": {
              "$ref": "#/$defs/_297"
            },
            "smartStep": {
              "$ref": "#/$defs/_298"
            },
            "sourceMapPathOverrides": {
              "$ref": "#/$defs/_301"
            },
            "sourceMapRenames": {
              "$ref": "#/$defs/_300"
            },
            "sourceMaps": {
              "$ref": "#/$defs/_299"
            },
            "timeout": {
              "$ref": "#/$defs/_302"
            },
            "timeouts": {
              "$ref": "#/$defs/_303"
            },
            "trace": {
              "$ref": "#/$defs/_304"
            },
            "url": {
              "type": "string",
              "description": "Will search for a tab with this exact url and attach to it, if found",
              "default": "http://localhost:8080",
              "tags": [
                "setup"
              ]
            },
            "urlFilter": {
              "type": "string",
              "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
              "default": ""
            },
            "userDataDir": {
              "type": [
                "string",
                "boolean"
              ],
              "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
              "default": true
            },
            "vueComponentPaths": {
              "type": "array",
              "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
              "default": [
                "${workspaceFolder}/**/*.vue"
              ]
            },
            "webRoot": {
              "type": "string",
              "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
              "default": "${workspaceFolder}",
              "tags": [
                "setup"
              ]
            }
          }
        }
      ],
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": "on",
      "restricted": false
    },
    "debug.javascript.defaultRuntimeExecutable": {
      "type": "object",
      "default": {
        "pwa-node": "node"
      },
      "markdownDescription": "The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.",
      "properties": {
        "pwa-chrome": {
          "type": "string"
        },
        "pwa-msedge": {
          "type": "string"
        },
        "pwa-node": {
          "type": "string"
        }
      },
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": {
        "pwa-node": "node"
      },
      "restricted": false
    },
    "debug.javascript.enableNetworkView": {
      "type": "boolean",
      "default": true,
      "description": "Enables the experimental network view for targets that support it.",
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "debug.javascript.pickAndAttachOptions": {
      "type": "object",
      "default": {},
      "markdownDescription": "Default options used when debugging a process through the `Debug: Attach to Node.js Process` command",
      "properties": {
        "address": {
          "type": "string",
          "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
          "default": "localhost"
        },
        "attachExistingChildren": {
          "type": "boolean",
          "description": "Whether to attempt to attach to already-spawned child processes.",
          "default": false
        },
        "autoAttachChildProcesses": {
          "$ref": "#/$defs/_314"
        },
        "cascadeTerminateToConfigurations": {
          "$ref": "#/$defs/_309"
        },
        "continueOnAttach": {
          "type": "boolean",
          "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
          "default": true
        },
        "customDescriptionGenerator": {
          "$ref": "#/$defs/_307"
        },
        "customPropertiesGenerator": {
          "$ref": "#/$defs/_308"
        },
        "cwd": {
          "$ref": "#/$defs/_311"
        },
        "enableContentValidation": {
          "$ref": "#/$defs/_306"
        },
        "enableDWARF": {
          "$ref": "#/$defs/_310"
        },
        "env": {
          "$ref": "#/$defs/_315"
        },
        "envFile": {
          "$ref": "#/$defs/_316"
        },
        "localRoot": {
          "$ref": "#/$defs/_312"
        },
        "nodeVersionHint": {
          "$ref": "#/$defs/_318"
        },
        "outFiles": {
          "$ref": "#/$defs/_294"
        },
        "outputCapture": {
          "$ref": "#/$defs/_305"
        },
        "pauseForSourceMap": {
          "$ref": "#/$defs/_295"
        },
        "port": {
          "description": "Debug port to attach to. Default is 9229.",
          "default": 9229,
          "oneOf": [
            {
              "$ref": "#/$defs/_322"
            },
            {
              "type": "integer"
            }
          ],
          "tags": [
            "setup"
          ]
        },
        "processId": {
          "type": "string",
          "description": "ID of process to attach to.",
          "default": "${command:PickProcess}"
        },
        "remoteHostHeader": {
          "type": "string",
          "description": "Explicit Host header to use when connecting to the websocket of inspector. If unspecified, the host header will be set to 'localhost'. This is useful when the inspector is running behind a proxy that only accept particular Host header."
        },
        "remoteRoot": {
          "$ref": "#/$defs/_313"
        },
        "resolveSourceMapLocations": {
          "$ref": "#/$defs/_293"
        },
        "restart": {
          "$ref": "#/$defs/_321"
        },
        "runtimeSourcemapPausePatterns": {
          "$ref": "#/$defs/_317"
        },
        "showAsyncStacks": {
          "$ref": "#/$defs/_296"
        },
        "skipFiles": {
          "$ref": "#/$defs/_297"
        },
        "smartStep": {
          "$ref": "#/$defs/_298"
        },
        "sourceMapPathOverrides": {
          "$ref": "#/$defs/_301"
        },
        "sourceMapRenames": {
          "$ref": "#/$defs/_300"
        },
        "sourceMaps": {
          "$ref": "#/$defs/_299"
        },
        "timeout": {
          "$ref": "#/$defs/_302"
        },
        "timeouts": {
          "$ref": "#/$defs/_303"
        },
        "trace": {
          "$ref": "#/$defs/_304"
        },
        "websocketAddress": {
          "type": "string",
          "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port."
        }
      },
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": {},
      "restricted": false
    },
    "debug.javascript.resourceRequestOptions": {
      "type": "object",
      "default": {},
      "markdownDescription": "Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.\n\nA common case to disable certificate verification can be done by passing `{ \"https\": { \"rejectUnauthorized\": false } }`.",
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": {},
      "restricted": false
    },
    "debug.javascript.terminalOptions": {
      "type": "object",
      "description": "Default launch options for the JavaScript debug terminal and npm scripts.",
      "default": {},
      "properties": {
        "autoAttachChildProcesses": {
          "$ref": "#/$defs/_314"
        },
        "cascadeTerminateToConfigurations": {
          "$ref": "#/$defs/_309"
        },
        "command": {
          "$ref": "#/$defs/_319"
        },
        "customDescriptionGenerator": {
          "$ref": "#/$defs/_307"
        },
        "customPropertiesGenerator": {
          "$ref": "#/$defs/_308"
        },
        "cwd": {
          "$ref": "#/$defs/_311"
        },
        "enableContentValidation": {
          "$ref": "#/$defs/_306"
        },
        "enableDWARF": {
          "$ref": "#/$defs/_310"
        },
        "env": {
          "$ref": "#/$defs/_315"
        },
        "envFile": {
          "$ref": "#/$defs/_316"
        },
        "localRoot": {
          "$ref": "#/$defs/_312"
        },
        "nodeVersionHint": {
          "$ref": "#/$defs/_318"
        },
        "outFiles": {
          "$ref": "#/$defs/_294"
        },
        "outputCapture": {
          "$ref": "#/$defs/_305"
        },
        "pauseForSourceMap": {
          "$ref": "#/$defs/_295"
        },
        "remoteRoot": {
          "$ref": "#/$defs/_313"
        },
        "resolveSourceMapLocations": {
          "$ref": "#/$defs/_293"
        },
        "runtimeSourcemapPausePatterns": {
          "$ref": "#/$defs/_317"
        },
        "showAsyncStacks": {
          "$ref": "#/$defs/_296"
        },
        "skipFiles": {
          "$ref": "#/$defs/_297"
        },
        "smartStep": {
          "$ref": "#/$defs/_298"
        },
        "sourceMapPathOverrides": {
          "$ref": "#/$defs/_301"
        },
        "sourceMapRenames": {
          "$ref": "#/$defs/_300"
        },
        "sourceMaps": {
          "$ref": "#/$defs/_299"
        },
        "timeout": {
          "$ref": "#/$defs/_302"
        },
        "timeouts": {
          "$ref": "#/$defs/_303"
        },
        "trace": {
          "$ref": "#/$defs/_304"
        }
      },
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": {},
      "restricted": false
    },
    "debug.javascript.unmapMissingSources": {
      "type": "boolean",
      "default": false,
      "description": "Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.",
      "scope": 4,
      "source": {
        "id": "ms-vscode.js-debug",
        "displayName": "JavaScript Debugger"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "debug.onTaskErrors": {
      "enum": [
        "abort",
        "debugAnyway",
        "prompt",
        "showErrors"
      ],
      "enumDescriptions": [
        "Cancel debugging.",
        "Ignore task errors and start debugging.",
        "Prompt user.",
        "Show the Problems view and do not start debugging."
      ],
      "description": "Controls what to do when errors are encountered after running a preLaunchTask.",
      "default": "prompt",
      "defaultDefaultValue": "prompt",
      "scope": 4,
      "restricted": false
    },
    "debug.openDebug": {
      "enum": [
        "neverOpen",
        "openOnDebugBreak",
        "openOnFirstSessionStart",
        "openOnSessionStart"
      ],
      "default": "openOnDebugBreak",
      "description": "Controls when the debug view should open.",
      "defaultDefaultValue": "openOnDebugBreak",
      "scope": 4,
      "restricted": false
    },
    "debug.openExplorerOnEnd": {
      "type": "boolean",
      "description": "Automatically open the explorer view at the end of a debug session.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "debug.saveBeforeStart": {
      "description": "Controls what editors to save before starting a debug session.",
      "enum": [
        "allEditorsInActiveGroup",
        "none",
        "nonUntitledEditorsInActiveGroup"
      ],
      "enumDescriptions": [
        "Save all editors in the active group before starting a debug session.",
        "Don't save any editors before starting a debug session.",
        "Save all editors in the active group except untitled ones before starting a debug session."
      ],
      "default": "allEditorsInActiveGroup",
      "scope": 6,
      "defaultDefaultValue": "allEditorsInActiveGroup",
      "restricted": false
    },
    "debug.showBreakpointsInOverviewRuler": {
      "type": "boolean",
      "description": "Controls whether breakpoints should be shown in the overview ruler.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "debug.showInlineBreakpointCandidates": {
      "type": "boolean",
      "description": "Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "debug.showInStatusBar": {
      "enum": [
        "always",
        "never",
        "onFirstSessionStart"
      ],
      "enumDescriptions": [
        "Always show debug in Status bar",
        "Never show debug in Status bar",
        "Show debug in Status bar only after debug was started for the first time"
      ],
      "description": "Controls when the debug Status bar should be visible.",
      "default": "onFirstSessionStart",
      "defaultDefaultValue": "onFirstSessionStart",
      "scope": 4,
      "restricted": false
    },
    "debug.showSubSessionsInToolBar": {
      "type": "boolean",
      "description": "Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "debug.showVariableTypes": {
      "type": "boolean",
      "description": "Show variable type in variable pane during debug session",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "debug.terminal.clearBeforeReusing": {
      "type": "boolean",
      "description": "Before starting a new debug session in an integrated or external terminal, clear the terminal.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "debug.toolBarLocation": {
      "enum": [
        "commandCenter",
        "docked",
        "floating",
        "hidden"
      ],
      "markdownDescription": "Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, `commandCenter` (requires `#window.commandCenter#`), or `hidden`.",
      "default": "floating",
      "markdownEnumDescriptions": [
        "`(Experimental)` Show debug toolbar in the command center.",
        "Show debug toolbar only in debug views.",
        "Show debug toolbar in all views.",
        "Do not show debug toolbar."
      ],
      "defaultDefaultValue": "floating",
      "scope": 4,
      "restricted": false
    },
    "diffEditor.codeLens": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether the editor shows CodeLens.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.diffAlgorithm": {
      "type": "string",
      "enum": [
        "advanced",
        "legacy"
      ],
      "default": "advanced",
      "markdownEnumDescriptions": [
        "Uses the advanced diffing algorithm.",
        "Uses the legacy diffing algorithm."
      ],
      "defaultDefaultValue": "advanced",
      "scope": 6,
      "restricted": false
    },
    "diffEditor.experimental.showEmptyDecorations": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.experimental.showMoves": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls whether the diff editor should show detected code moves.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.experimental.useTrueInlineView": {
      "type": "boolean",
      "default": false,
      "description": "If enabled and the editor uses the inline view, word changes are rendered inline.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.hideUnchangedRegions.contextLineCount": {
      "type": "integer",
      "default": 3,
      "markdownDescription": "Controls how many lines are used as context when comparing unchanged regions.",
      "minimum": 1,
      "defaultDefaultValue": 3,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.hideUnchangedRegions.enabled": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls whether the diff editor shows unchanged regions.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.hideUnchangedRegions.minimumLineCount": {
      "type": "integer",
      "default": 3,
      "markdownDescription": "Controls how many lines are used as a minimum for unchanged regions.",
      "minimum": 1,
      "defaultDefaultValue": 3,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.hideUnchangedRegions.revealLineCount": {
      "type": "integer",
      "default": 20,
      "markdownDescription": "Controls how many lines are used for unchanged regions.",
      "minimum": 1,
      "defaultDefaultValue": 20,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.ignoreTrimWhitespace": {
      "type": "boolean",
      "default": true,
      "description": "When enabled, the diff editor ignores changes in leading or trailing whitespace.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.maxComputationTime": {
      "type": "number",
      "default": 5000,
      "description": "Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.",
      "defaultDefaultValue": 5000,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.maxFileSize": {
      "type": "number",
      "default": 50,
      "description": "Maximum file size in MB for which to compute diffs. Use 0 for no limit.",
      "defaultDefaultValue": 50,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.renderGutterMenu": {
      "type": "boolean",
      "default": true,
      "description": "When enabled, the diff editor shows a special gutter for revert and stage actions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.renderIndicators": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the diff editor shows +/- indicators for added/removed changes.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.renderMarginRevertIcon": {
      "type": "boolean",
      "default": true,
      "description": "When enabled, the diff editor shows arrows in its glyph margin to revert changes.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.renderSideBySide": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the diff editor shows the diff side by side or inline.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.renderSideBySideInlineBreakpoint": {
      "type": "number",
      "default": 900,
      "description": "If the diff editor width is smaller than this value, the inline view is used.",
      "defaultDefaultValue": 900,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.useInlineViewWhenSpaceIsLimited": {
      "type": "boolean",
      "default": true,
      "description": "If enabled and the editor width is too small, the inline view is used.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "diffEditor.wordWrap": {
      "type": "string",
      "enum": [
        "inherit",
        "off",
        "on"
      ],
      "default": "inherit",
      "markdownEnumDescriptions": [
        "Lines will wrap according to the `#editor.wordWrap#` setting.",
        "Lines will never wrap.",
        "Lines will wrap at the viewport width."
      ],
      "defaultDefaultValue": "inherit",
      "scope": 6,
      "restricted": false
    },
    "editor.acceptSuggestionOnCommitCharacter": {
      "$ref": "#/$defs/_23"
    },
    "editor.acceptSuggestionOnEnter": {
      "$ref": "#/$defs/_24"
    },
    "editor.accessibilityPageSize": {
      "$ref": "#/$defs/_26"
    },
    "editor.accessibilitySupport": {
      "$ref": "#/$defs/_25"
    },
    "editor.aiStats.enabled": {
      "markdownDescription": "Controls whether to enable AI statistics in the editor. The gauge represents the average amount of code inserted by AI vs manual typing over a 24 hour period.",
      "type": "boolean",
      "default": false,
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "editor.allowVariableFonts": {
      "$ref": "#/$defs/_28"
    },
    "editor.allowVariableFontsInAccessibilityMode": {
      "$ref": "#/$defs/_29"
    },
    "editor.allowVariableLineHeights": {
      "$ref": "#/$defs/_27"
    },
    "editor.autoClosingBrackets": {
      "$ref": "#/$defs/_30"
    },
    "editor.autoClosingComments": {
      "$ref": "#/$defs/_31"
    },
    "editor.autoClosingDelete": {
      "$ref": "#/$defs/_33"
    },
    "editor.autoClosingOvertype": {
      "$ref": "#/$defs/_34"
    },
    "editor.autoClosingQuotes": {
      "$ref": "#/$defs/_35"
    },
    "editor.autoIndent": {
      "$ref": "#/$defs/_36"
    },
    "editor.autoIndentOnPaste": {
      "$ref": "#/$defs/_37"
    },
    "editor.autoIndentOnPasteWithinString": {
      "$ref": "#/$defs/_38"
    },
    "editor.autoSurround": {
      "$ref": "#/$defs/_39"
    },
    "editor.bracketPairColorization.enabled": {
      "$ref": "#/$defs/_40"
    },
    "editor.bracketPairColorization.independentColorPoolPerBracketType": {
      "$ref": "#/$defs/_41"
    },
    "editor.codeActions.triggerOnFocusChange": {
      "type": "boolean",
      "scope": 6,
      "markdownDescription": "Enable triggering `#editor.codeActionsOnSave#` when `#files.autoSave#` is set to `afterDelay`. Code Actions must be set to `always` to be triggered for window and focus changes.",
      "default": false,
      "defaultDefaultValue": false,
      "restricted": false
    },
    "editor.codeActionsOnSave": {
      "oneOf": [
        {
          "$ref": "#/$defs/_328"
        },
        {
          "$ref": "#/$defs/_329"
        }
      ],
      "markdownDescription": "Run Code Actions for the editor on save. Code Actions must be specified and the editor must not be shutting down. When `#files.autoSave#` is set to `afterDelay`, Code Actions will only be run when the file is saved explicitly. Example: `\"source.organizeImports\": \"explicit\" `",
      "type": [
        "object",
        "array"
      ],
      "additionalProperties": {
        "type": "string",
        "enum": [
          "always",
          "explicit",
          "never",
          true,
          false
        ]
      },
      "default": {},
      "scope": 6,
      "defaultDefaultValue": {},
      "restricted": false,
      "properties": {}
    },
    "editor.codeActionWidget.includeNearbyQuickFixes": {
      "type": "boolean",
      "scope": 6,
      "description": "Enable/disable showing nearest Quick Fix within a line when not currently on a diagnostic.",
      "default": true,
      "defaultDefaultValue": true,
      "restricted": false
    },
    "editor.codeActionWidget.showHeaders": {
      "type": "boolean",
      "scope": 6,
      "description": "Enable/disable showing group headers in the Code Action menu.",
      "default": true,
      "defaultDefaultValue": true,
      "restricted": false
    },
    "editor.codeLens": {
      "$ref": "#/$defs/_47"
    },
    "editor.codeLensFontFamily": {
      "$ref": "#/$defs/_48"
    },
    "editor.codeLensFontSize": {
      "$ref": "#/$defs/_49"
    },
    "editor.colorDecorators": {
      "$ref": "#/$defs/_50"
    },
    "editor.colorDecoratorsActivatedOn": {
      "$ref": "#/$defs/_268"
    },
    "editor.colorDecoratorsLimit": {
      "$ref": "#/$defs/_51"
    },
    "editor.columnSelection": {
      "$ref": "#/$defs/_52"
    },
    "editor.comments.ignoreEmptyLines": {
      "$ref": "#/$defs/_54"
    },
    "editor.comments.insertSpace": {
      "$ref": "#/$defs/_53"
    },
    "editor.copyWithSyntaxHighlighting": {
      "$ref": "#/$defs/_55"
    },
    "editor.cursorBlinking": {
      "$ref": "#/$defs/_56"
    },
    "editor.cursorHeight": {
      "$ref": "#/$defs/_62"
    },
    "editor.cursorSmoothCaretAnimation": {
      "$ref": "#/$defs/_57"
    },
    "editor.cursorStyle": {
      "$ref": "#/$defs/_58"
    },
    "editor.cursorSurroundingLines": {
      "$ref": "#/$defs/_59"
    },
    "editor.cursorSurroundingLinesStyle": {
      "$ref": "#/$defs/_60"
    },
    "editor.cursorWidth": {
      "$ref": "#/$defs/_61"
    },
    "editor.defaultColorDecorators": {
      "$ref": "#/$defs/_267"
    },
    "editor.defaultFoldingRangeProvider": {
      "description": "Defines a default folding range provider that takes precedence over all other folding range providers. Must be the identifier of an extension contributing a folding range provider.",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "enum": [
        null,
        "ms-vscode.js-debug",
        "ms-vscode.js-debug-companion",
        "ms-vscode.vscode-js-profile-table",
        "vscode.configuration-editing",
        "vscode.css-language-features",
        "vscode.debug-auto-launch",
        "vscode.debug-server-ready",
        "vscode.emmet",
        "vscode.extension-editing",
        "vscode.git",
        "vscode.git-base",
        "vscode.github",
        "vscode.github-authentication",
        "vscode.grunt",
        "vscode.gulp",
        "vscode.html-language-features",
        "vscode.ipynb",
        "vscode.jake",
        "vscode.json-language-features",
        "vscode.markdown-language-features",
        "vscode.markdown-math",
        "vscode.media-preview",
        "vscode.merge-conflict",
        "vscode.microsoft-authentication",
        "vscode.npm",
        "vscode.php-language-features",
        "vscode.references-view",
        "vscode.search-result",
        "vscode.simple-browser",
        "vscode.terminal-suggest",
        "vscode.tunnel-forwarding",
        "vscode.typescript-language-features"
      ],
      "enumItemLabels": [
        "All",
        "CSS Language Features",
        "HTML Language Features",
        "JSON Language Features",
        "Markdown Language Features",
        "Markdown Math",
        "PHP Language Features",
        "TypeScript and JavaScript Language Features",
        "Configuration Editing",
        "Node Debug Auto-attach",
        "Server Ready Action",
        "Emmet",
        "Extension Authoring",
        "Git",
        "Git Base",
        "GitHub",
        "GitHub Authentication",
        "Grunt support for VS Code",
        "Gulp support for VSCode",
        ".ipynb Support",
        "Jake support for VS Code",
        "JavaScript Debugger",
        "JavaScript Debugger Companion Extension",
        "Media Preview",
        "Merge Conflict",
        "Microsoft Account",
        "NPM support for VS Code",
        "Reference Search View",
        "Search Result",
        "Simple Browser",
        "Terminal Suggest for VS Code",
        "Local Tunnel Port Forwarding",
        "Table Visualizer for JavaScript Profiles"
      ],
      "markdownEnumDescriptions": [
        "All active folding range providers",
        "An extension for debugging Node.js programs and Chrome.",
        "Companion extension to js-debug that provides capability for remote debugging",
        "Text visualizer for profiles taken from the JavaScript debugger",
        "Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.",
        "Provides rich language support for CSS, LESS and SCSS files.",
        "Helper for auto-attach feature when node-debug extensions are not active.",
        "Open URI in browser if server under debugging is ready.",
        "Emmet support for VS Code",
        "Provides linting capabilities for authoring extensions.",
        "Git SCM Integration",
        "Git static contributions and pickers.",
        "GitHub features for VS Code",
        "GitHub Authentication Provider",
        "Extension to add Grunt capabilities to VS Code.",
        "Extension to add Gulp capabilities to VSCode.",
        "Provides rich language support for HTML and Handlebar files",
        "Provides basic support for opening and reading Jupyter's .ipynb notebook files",
        "Extension to add Jake capabilities to VS Code.",
        "Provides rich language support for JSON files.",
        "Provides rich language support for Markdown.",
        "Adds math support to Markdown in notebooks.",
        "Provides VS Code's built-in previews for images, audio, and video",
        "Highlighting and commands for inline merge conflicts.",
        "Microsoft authentication provider",
        "Extension to add task support for npm scripts.",
        "Provides rich language support for PHP files.",
        "Reference Search results as separate, stable view in the sidebar",
        "Provides syntax highlighting and language features for tabbed search results.",
        "A very basic built-in webview for displaying web content.",
        "Extension to add terminal completions for zsh, bash, and fish terminals.",
        "Allows forwarding local ports to be accessible over the internet.",
        "Provides rich language support for JavaScript and TypeScript."
      ],
      "defaultDefaultValue": null,
      "scope": 6,
      "restricted": false
    },
    "editor.defaultFormatter": {
      "description": "Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "enum": [
        null,
        "ms-vscode.js-debug",
        "ms-vscode.js-debug-companion",
        "ms-vscode.vscode-js-profile-table",
        "vscode.configuration-editing",
        "vscode.css-language-features",
        "vscode.debug-auto-launch",
        "vscode.debug-server-ready",
        "vscode.emmet",
        "vscode.extension-editing",
        "vscode.git",
        "vscode.git-base",
        "vscode.github",
        "vscode.github-authentication",
        "vscode.grunt",
        "vscode.gulp",
        "vscode.html-language-features",
        "vscode.ipynb",
        "vscode.jake",
        "vscode.json-language-features",
        "vscode.markdown-language-features",
        "vscode.markdown-math",
        "vscode.media-preview",
        "vscode.merge-conflict",
        "vscode.microsoft-authentication",
        "vscode.npm",
        "vscode.php-language-features",
        "vscode.references-view",
        "vscode.search-result",
        "vscode.simple-browser",
        "vscode.terminal-suggest",
        "vscode.tunnel-forwarding",
        "vscode.typescript-language-features"
      ],
      "enumItemLabels": [
        "None",
        "CSS Language Features",
        "HTML Language Features",
        "JSON Language Features",
        "Markdown Language Features",
        "Markdown Math",
        "PHP Language Features",
        "TypeScript and JavaScript Language Features",
        "Configuration Editing",
        "Node Debug Auto-attach",
        "Server Ready Action",
        "Emmet",
        "Extension Authoring",
        "Git",
        "Git Base",
        "GitHub",
        "GitHub Authentication",
        "Grunt support for VS Code",
        "Gulp support for VSCode",
        ".ipynb Support",
        "Jake support for VS Code",
        "JavaScript Debugger",
        "JavaScript Debugger Companion Extension",
        "Media Preview",
        "Merge Conflict",
        "Microsoft Account",
        "NPM support for VS Code",
        "Reference Search View",
        "Search Result",
        "Simple Browser",
        "Terminal Suggest for VS Code",
        "Local Tunnel Port Forwarding",
        "Table Visualizer for JavaScript Profiles"
      ],
      "markdownEnumDescriptions": [
        "None",
        "An extension for debugging Node.js programs and Chrome.",
        "Companion extension to js-debug that provides capability for remote debugging",
        "Text visualizer for profiles taken from the JavaScript debugger",
        "Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.",
        "Provides rich language support for CSS, LESS and SCSS files.",
        "Helper for auto-attach feature when node-debug extensions are not active.",
        "Open URI in browser if server under debugging is ready.",
        "Emmet support for VS Code",
        "Provides linting capabilities for authoring extensions.",
        "Git SCM Integration",
        "Git static contributions and pickers.",
        "GitHub features for VS Code",
        "GitHub Authentication Provider",
        "Extension to add Grunt capabilities to VS Code.",
        "Extension to add Gulp capabilities to VSCode.",
        "Provides rich language support for HTML and Handlebar files",
        "Provides basic support for opening and reading Jupyter's .ipynb notebook files",
        "Extension to add Jake capabilities to VS Code.",
        "Provides rich language support for JSON files.",
        "Provides rich language support for Markdown.",
        "Adds math support to Markdown in notebooks.",
        "Provides VS Code's built-in previews for images, audio, and video",
        "Highlighting and commands for inline merge conflicts.",
        "Microsoft authentication provider",
        "Extension to add task support for npm scripts.",
        "Provides rich language support for PHP files.",
        "Reference Search results as separate, stable view in the sidebar",
        "Provides syntax highlighting and language features for tabbed search results.",
        "A very basic built-in webview for displaying web content.",
        "Extension to add terminal completions for zsh, bash, and fish terminals.",
        "Allows forwarding local ports to be accessible over the internet.",
        "Provides rich language support for JavaScript and TypeScript."
      ],
      "defaultDefaultValue": null,
      "scope": 6,
      "restricted": false
    },
    "editor.definitionLinkOpensInPeek": {
      "$ref": "#/$defs/_158"
    },
    "editor.detectIndentation": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "editor.dragAndDrop": {
      "$ref": "#/$defs/_63"
    },
    "editor.dropIntoEditor.enabled": {
      "$ref": "#/$defs/_64"
    },
    "editor.dropIntoEditor.preferences": {
      "type": "array",
      "scope": 6,
      "description": "Configures the preferred type of edit to use when dropping content.\n\nThis is an ordered list of edit kinds. The first available edit of a preferred kind will be used.",
      "default": [],
      "items": {
        "description": "The kind identifier of the drop edit.",
        "anyOf": [
          {
            "enum": [
              null
            ]
          },
          {
            "type": "string"
          }
        ]
      },
      "defaultDefaultValue": [],
      "restricted": false
    },
    "editor.dropIntoEditor.showDropSelector": {
      "$ref": "#/$defs/_65"
    },
    "editor.editContext": {
      "$ref": "#/$defs/_66"
    },
    "editor.emptySelectionClipboard": {
      "$ref": "#/$defs/_67"
    },
    "editor.experimental.asyncTokenization": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the tokenization should happen asynchronously on a web worker.",
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "editor.experimental.asyncTokenizationLogging": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether async tokenization should be logged. For debugging only.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "editor.experimental.asyncTokenizationVerification": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only.",
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "editor.experimental.preferTreeSitter.css": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls whether tree sitter parsing should be turned on for css. This will take precedence over `editor.experimental.treeSitterTelemetry` for css.",
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "editor.experimental.preferTreeSitter.ini": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls whether tree sitter parsing should be turned on for ini. This will take precedence over `editor.experimental.treeSitterTelemetry` for ini.",
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "editor.experimental.preferTreeSitter.regex": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls whether tree sitter parsing should be turned on for regex. This will take precedence over `editor.experimental.treeSitterTelemetry` for regex.",
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "editor.experimental.preferTreeSitter.typescript": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls whether tree sitter parsing should be turned on for typescript. This will take precedence over `editor.experimental.treeSitterTelemetry` for typescript.",
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "editor.experimental.treeSitterTelemetry": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls whether tree sitter parsing should be turned on and telemetry collected. Setting `editor.experimental.preferTreeSitter` for specific languages will take precedence.",
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "editor.experimentalGpuAcceleration": {
      "$ref": "#/$defs/_68"
    },
    "editor.experimentalWhitespaceRendering": {
      "$ref": "#/$defs/_69"
    },
    "editor.fastScrollSensitivity": {
      "$ref": "#/$defs/_70"
    },
    "editor.find.addExtraSpaceOnTop": {
      "$ref": "#/$defs/_74"
    },
    "editor.find.autoFindInSelection": {
      "$ref": "#/$defs/_73"
    },
    "editor.find.cursorMoveOnType": {
      "$ref": "#/$defs/_71"
    },
    "editor.find.findOnType": {
      "$ref": "#/$defs/_78"
    },
    "editor.find.history": {
      "$ref": "#/$defs/_76"
    },
    "editor.find.loop": {
      "$ref": "#/$defs/_75"
    },
    "editor.find.replaceHistory": {
      "$ref": "#/$defs/_77"
    },
    "editor.find.seedSearchStringFromSelection": {
      "$ref": "#/$defs/_72"
    },
    "editor.folding": {
      "$ref": "#/$defs/_79"
    },
    "editor.foldingHighlight": {
      "$ref": "#/$defs/_81"
    },
    "editor.foldingImportsByDefault": {
      "$ref": "#/$defs/_82"
    },
    "editor.foldingMaximumRegions": {
      "$ref": "#/$defs/_83"
    },
    "editor.foldingStrategy": {
      "$ref": "#/$defs/_80"
    },
    "editor.fontFamily": {
      "$ref": "#/$defs/_85"
    },
    "editor.fontLigatures": {
      "$ref": "#/$defs/_86"
    },
    "editor.fontSize": {
      "$ref": "#/$defs/_87"
    },
    "editor.fontVariations": {
      "$ref": "#/$defs/_89"
    },
    "editor.fontWeight": {
      "$ref": "#/$defs/_88"
    },
    "editor.formatOnPaste": {
      "$ref": "#/$defs/_90"
    },
    "editor.formatOnSave": {
      "type": "boolean",
      "markdownDescription": "Format a file on save. A formatter must be available and the editor must not be shutting down. When `#files.autoSave#` is set to `afterDelay`, the file will only be formatted when saved explicitly.",
      "scope": 6,
      "default": false,
      "restricted": false
    },
    "editor.formatOnSaveMode": {
      "type": "string",
      "default": "file",
      "enum": [
        "file",
        "modifications",
        "modificationsIfAvailable"
      ],
      "enumDescriptions": [
        "Format the whole file.",
        "Format modifications (requires source control).",
        "Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted."
      ],
      "markdownDescription": "Controls if format on save formats the whole file or only modifications. Only applies when `#editor.formatOnSave#` is enabled.",
      "scope": 6,
      "defaultDefaultValue": "file",
      "restricted": false
    },
    "editor.formatOnType": {
      "$ref": "#/$defs/_91"
    },
    "editor.glyphMargin": {
      "$ref": "#/$defs/_92"
    },
    "editor.gotoLocation.alternativeDeclarationCommand": {
      "$ref": "#/$defs/_101"
    },
    "editor.gotoLocation.alternativeDefinitionCommand": {
      "$ref": "#/$defs/_99"
    },
    "editor.gotoLocation.alternativeImplementationCommand": {
      "$ref": "#/$defs/_102"
    },
    "editor.gotoLocation.alternativeReferenceCommand": {
      "$ref": "#/$defs/_103"
    },
    "editor.gotoLocation.alternativeTypeDefinitionCommand": {
      "$ref": "#/$defs/_100"
    },
    "editor.gotoLocation.multiple": {
      "$ref": "#/$defs/_93"
    },
    "editor.gotoLocation.multipleDeclarations": {
      "$ref": "#/$defs/_96"
    },
    "editor.gotoLocation.multipleDefinitions": {
      "$ref": "#/$defs/_94"
    },
    "editor.gotoLocation.multipleImplementations": {
      "$ref": "#/$defs/_97"
    },
    "editor.gotoLocation.multipleReferences": {
      "$ref": "#/$defs/_98"
    },
    "editor.gotoLocation.multipleTypeDefinitions": {
      "$ref": "#/$defs/_95"
    },
    "editor.guides.bracketPairs": {
      "$ref": "#/$defs/_42"
    },
    "editor.guides.bracketPairsHorizontal": {
      "$ref": "#/$defs/_43"
    },
    "editor.guides.highlightActiveBracketPair": {
      "$ref": "#/$defs/_44"
    },
    "editor.guides.highlightActiveIndentation": {
      "$ref": "#/$defs/_46"
    },
    "editor.guides.indentation": {
      "$ref": "#/$defs/_45"
    },
    "editor.hideCursorInOverviewRuler": {
      "$ref": "#/$defs/_104"
    },
    "editor.hover.above": {
      "$ref": "#/$defs/_109"
    },
    "editor.hover.delay": {
      "$ref": "#/$defs/_106"
    },
    "editor.hover.enabled": {
      "$ref": "#/$defs/_105"
    },
    "editor.hover.hidingDelay": {
      "$ref": "#/$defs/_108"
    },
    "editor.hover.sticky": {
      "$ref": "#/$defs/_107"
    },
    "editor.indentSize": {
      "anyOf": [
        {
          "type": "number",
          "minimum": 1
        },
        {
          "type": "string",
          "enum": [
            "tabSize"
          ]
        }
      ],
      "default": "tabSize",
      "markdownDescription": "The number of spaces used for indentation or `\"tabSize\"` to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.",
      "defaultDefaultValue": "tabSize",
      "scope": 6,
      "restricted": false
    },
    "editor.inertialScroll": {
      "$ref": "#/$defs/_259"
    },
    "editor.inlayHints.enabled": {
      "$ref": "#/$defs/_260"
    },
    "editor.inlayHints.fontFamily": {
      "$ref": "#/$defs/_262"
    },
    "editor.inlayHints.fontSize": {
      "$ref": "#/$defs/_261"
    },
    "editor.inlayHints.maximumLength": {
      "$ref": "#/$defs/_264"
    },
    "editor.inlayHints.padding": {
      "$ref": "#/$defs/_263"
    },
    "editor.inlineCompletionsAccessibilityVerbose": {
      "$ref": "#/$defs/_269"
    },
    "editor.inlineSuggest.edits.allowCodeShifting": {
      "$ref": "#/$defs/_117"
    },
    "editor.inlineSuggest.edits.renderSideBySide": {
      "$ref": "#/$defs/_118"
    },
    "editor.inlineSuggest.edits.showCollapsed": {
      "$ref": "#/$defs/_119"
    },
    "editor.inlineSuggest.enabled": {
      "$ref": "#/$defs/_110"
    },
    "editor.inlineSuggest.experimental.suppressInlineSuggestions": {
      "$ref": "#/$defs/_114"
    },
    "editor.inlineSuggest.experimental.triggerCommandOnProviderChange": {
      "$ref": "#/$defs/_115"
    },
    "editor.inlineSuggest.fontFamily": {
      "$ref": "#/$defs/_116"
    },
    "editor.inlineSuggest.showToolbar": {
      "$ref": "#/$defs/_111"
    },
    "editor.inlineSuggest.suppressSuggestions": {
      "$ref": "#/$defs/_113"
    },
    "editor.inlineSuggest.syntaxHighlightingEnabled": {
      "$ref": "#/$defs/_112"
    },
    "editor.insertSpaces": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "editor.language.brackets": {
      "type": [
        "array",
        "null"
      ],
      "default": null,
      "description": "Defines the bracket symbols that increase or decrease the indentation.",
      "items": {
        "$ref": "#/$defs/_326"
      },
      "defaultDefaultValue": null,
      "scope": 6,
      "restricted": false
    },
    "editor.language.colorizedBracketPairs": {
      "type": [
        "array",
        "null"
      ],
      "default": null,
      "description": "Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.",
      "items": {
        "$ref": "#/$defs/_326"
      },
      "defaultDefaultValue": null,
      "scope": 6,
      "restricted": false
    },
    "editor.largeFileOptimizations": {
      "type": "boolean",
      "default": true,
      "description": "Special handling for large files to disable certain memory intensive features.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "editor.letterSpacing": {
      "$ref": "#/$defs/_120"
    },
    "editor.lightbulb.enabled": {
      "$ref": "#/$defs/_121"
    },
    "editor.lineHeight": {
      "$ref": "#/$defs/_122"
    },
    "editor.lineNumbers": {
      "$ref": "#/$defs/_123"
    },
    "editor.linkedEditing": {
      "$ref": "#/$defs/_124"
    },
    "editor.links": {
      "$ref": "#/$defs/_125"
    },
    "editor.matchBrackets": {
      "$ref": "#/$defs/_126"
    },
    "editor.maxTokenizationLineLength": {
      "type": "integer",
      "default": 20000,
      "description": "Lines above this length will not be tokenized for performance reasons",
      "defaultDefaultValue": 20000,
      "scope": 6,
      "restricted": false
    },
    "editor.minimap.autohide": {
      "$ref": "#/$defs/_128"
    },
    "editor.minimap.enabled": {
      "$ref": "#/$defs/_127"
    },
    "editor.minimap.markSectionHeaderRegex": {
      "$ref": "#/$defs/_137"
    },
    "editor.minimap.maxColumn": {
      "$ref": "#/$defs/_134"
    },
    "editor.minimap.renderCharacters": {
      "$ref": "#/$defs/_133"
    },
    "editor.minimap.scale": {
      "$ref": "#/$defs/_132"
    },
    "editor.minimap.sectionHeaderFontSize": {
      "$ref": "#/$defs/_138"
    },
    "editor.minimap.sectionHeaderLetterSpacing": {
      "$ref": "#/$defs/_139"
    },
    "editor.minimap.showMarkSectionHeaders": {
      "$ref": "#/$defs/_136"
    },
    "editor.minimap.showRegionSectionHeaders": {
      "$ref": "#/$defs/_135"
    },
    "editor.minimap.showSlider": {
      "$ref": "#/$defs/_131"
    },
    "editor.minimap.side": {
      "$ref": "#/$defs/_130"
    },
    "editor.minimap.size": {
      "$ref": "#/$defs/_129"
    },
    "editor.mouseWheelScrollSensitivity": {
      "$ref": "#/$defs/_140"
    },
    "editor.mouseWheelZoom": {
      "$ref": "#/$defs/_141"
    },
    "editor.multiCursorLimit": {
      "$ref": "#/$defs/_145"
    },
    "editor.multiCursorMergeOverlapping": {
      "$ref": "#/$defs/_142"
    },
    "editor.multiCursorModifier": {
      "$ref": "#/$defs/_143"
    },
    "editor.multiCursorPaste": {
      "$ref": "#/$defs/_144"
    },
    "editor.occurrencesHighlight": {
      "$ref": "#/$defs/_146"
    },
    "editor.occurrencesHighlightDelay": {
      "$ref": "#/$defs/_147"
    },
    "editor.overtypeCursorStyle": {
      "$ref": "#/$defs/_148"
    },
    "editor.overtypeOnPaste": {
      "$ref": "#/$defs/_149"
    },
    "editor.overviewRulerBorder": {
      "$ref": "#/$defs/_150"
    },
    "editor.padding.bottom": {
      "$ref": "#/$defs/_152"
    },
    "editor.padding.top": {
      "$ref": "#/$defs/_151"
    },
    "editor.parameterHints.cycle": {
      "$ref": "#/$defs/_156"
    },
    "editor.parameterHints.enabled": {
      "$ref": "#/$defs/_155"
    },
    "editor.pasteAs.enabled": {
      "$ref": "#/$defs/_153"
    },
    "editor.pasteAs.preferences": {
      "type": "array",
      "scope": 6,
      "description": "Configures the preferred type of edit to use when pasting content.\n\nThis is an ordered list of edit kinds. The first available edit of a preferred kind will be used.",
      "default": [],
      "items": {
        "description": "The kind identifier of the paste edit.",
        "anyOf": [
          {
            "enum": [
              null
            ]
          },
          {
            "type": "string"
          }
        ]
      },
      "defaultDefaultValue": [],
      "restricted": false
    },
    "editor.pasteAs.showPasteSelector": {
      "$ref": "#/$defs/_154"
    },
    "editor.peekWidgetDefaultFocus": {
      "$ref": "#/$defs/_157"
    },
    "editor.quickSuggestions": {
      "$ref": "#/$defs/_159"
    },
    "editor.quickSuggestionsDelay": {
      "$ref": "#/$defs/_160"
    },
    "editor.rename.enablePreview": {
      "scope": 6,
      "description": "Enable/disable the ability to preview changes before renaming",
      "default": true,
      "type": "boolean",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "editor.renameOnType": {
      "$ref": "#/$defs/_161"
    },
    "editor.renderControlCharacters": {
      "$ref": "#/$defs/_163"
    },
    "editor.renderFinalNewline": {
      "$ref": "#/$defs/_164"
    },
    "editor.renderLineHighlight": {
      "$ref": "#/$defs/_165"
    },
    "editor.renderLineHighlightOnlyWhenFocus": {
      "$ref": "#/$defs/_166"
    },
    "editor.renderRichScreenReaderContent": {
      "$ref": "#/$defs/_162"
    },
    "editor.renderWhitespace": {
      "$ref": "#/$defs/_167"
    },
    "editor.roundedSelection": {
      "$ref": "#/$defs/_168"
    },
    "editor.rulers": {
      "$ref": "#/$defs/_169"
    },
    "editor.screenReaderAnnounceInlineSuggestion": {
      "$ref": "#/$defs/_32"
    },
    "editor.scrollbar.horizontal": {
      "$ref": "#/$defs/_171"
    },
    "editor.scrollbar.horizontalScrollbarSize": {
      "$ref": "#/$defs/_173"
    },
    "editor.scrollbar.ignoreHorizontalScrollbarInContentHeight": {
      "$ref": "#/$defs/_175"
    },
    "editor.scrollbar.scrollByPage": {
      "$ref": "#/$defs/_174"
    },
    "editor.scrollbar.vertical": {
      "$ref": "#/$defs/_170"
    },
    "editor.scrollbar.verticalScrollbarSize": {
      "$ref": "#/$defs/_172"
    },
    "editor.scrollBeyondLastColumn": {
      "$ref": "#/$defs/_176"
    },
    "editor.scrollBeyondLastLine": {
      "$ref": "#/$defs/_177"
    },
    "editor.scrollOnMiddleClick": {
      "$ref": "#/$defs/_270"
    },
    "editor.scrollPredominantAxis": {
      "$ref": "#/$defs/_178"
    },
    "editor.selectionClipboard": {
      "$ref": "#/$defs/_179"
    },
    "editor.selectionHighlight": {
      "$ref": "#/$defs/_180"
    },
    "editor.selectionHighlightMaxLength": {
      "$ref": "#/$defs/_181"
    },
    "editor.selectionHighlightMultiline": {
      "$ref": "#/$defs/_182"
    },
    "editor.semanticHighlighting.enabled": {
      "enum": [
        "configuredByTheme",
        false,
        true
      ],
      "enumDescriptions": [
        "Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.",
        "Semantic highlighting disabled for all color themes.",
        "Semantic highlighting enabled for all color themes."
      ],
      "default": "configuredByTheme",
      "description": "Controls whether the semanticHighlighting is shown for the languages that support it.",
      "defaultDefaultValue": "configuredByTheme",
      "scope": 6,
      "restricted": false
    },
    "editor.semanticTokenColorCustomizations": {
      "description": "Overrides editor semantic token color and styles from the currently selected color theme.",
      "default": {},
      "allOf": [
        {
          "properties": {
            "[Abyss]": {
              "$ref": "#/$defs/_22"
            },
            "[Default Dark Modern]": {
              "$ref": "#/$defs/_22"
            },
            "[Default Dark+]": {
              "$ref": "#/$defs/_22"
            },
            "[Default High Contrast Light]": {
              "$ref": "#/$defs/_22"
            },
            "[Default High Contrast]": {
              "$ref": "#/$defs/_22"
            },
            "[Default Light Modern]": {
              "$ref": "#/$defs/_22"
            },
            "[Default Light+]": {
              "$ref": "#/$defs/_22"
            },
            "[Kimbie Dark]": {
              "$ref": "#/$defs/_22"
            },
            "[Monokai Dimmed]": {
              "$ref": "#/$defs/_22"
            },
            "[Monokai]": {
              "$ref": "#/$defs/_22"
            },
            "[Quiet Light]": {
              "$ref": "#/$defs/_22"
            },
            "[Red]": {
              "$ref": "#/$defs/_22"
            },
            "[Solarized Dark]": {
              "$ref": "#/$defs/_22"
            },
            "[Solarized Light]": {
              "$ref": "#/$defs/_22"
            },
            "[Tomorrow Night Blue]": {
              "$ref": "#/$defs/_22"
            },
            "[Visual Studio Dark]": {
              "$ref": "#/$defs/_22"
            },
            "[Visual Studio Light]": {
              "$ref": "#/$defs/_22"
            }
          },
          "patternProperties": {
            "^\\[[^\\]]*(\\]\\s*\\[[^\\]]*)*\\]$": {
              "$ref": "#/$defs/_22"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "enabled": {
              "$ref": "#/$defs/_20"
            },
            "rules": {
              "$ref": "#/$defs/_21"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^\\[": {}
          }
        }
      ],
      "defaultDefaultValue": {},
      "scope": 4,
      "restricted": false
    },
    "editor.showDeprecated": {
      "$ref": "#/$defs/_258"
    },
    "editor.showFoldingControls": {
      "$ref": "#/$defs/_183"
    },
    "editor.showUnused": {
      "$ref": "#/$defs/_184"
    },
    "editor.smartSelect.selectLeadingAndTrailingWhitespace": {
      "$ref": "#/$defs/_186"
    },
    "editor.smartSelect.selectSubwords": {
      "$ref": "#/$defs/_187"
    },
    "editor.smoothScrolling": {
      "$ref": "#/$defs/_188"
    },
    "editor.snippets.codeActions.enabled": {
      "description": "Controls if surround-with-snippets or file template snippets show as Code Actions.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "editor.snippetSuggestions": {
      "$ref": "#/$defs/_185"
    },
    "editor.stablePeek": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Keep peek editors open even when double-clicking their content or when hitting `Escape`.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "editor.stickyScroll.defaultModel": {
      "$ref": "#/$defs/_191"
    },
    "editor.stickyScroll.enabled": {
      "$ref": "#/$defs/_189"
    },
    "editor.stickyScroll.maxLineCount": {
      "$ref": "#/$defs/_190"
    },
    "editor.stickyScroll.scrollWithEditor": {
      "$ref": "#/$defs/_192"
    },
    "editor.stickyTabStops": {
      "$ref": "#/$defs/_193"
    },
    "editor.suggest.filteredTypes": {
      "$ref": "#/$defs/_205"
    },
    "editor.suggest.filterGraceful": {
      "$ref": "#/$defs/_195"
    },
    "editor.suggest.insertMode": {
      "$ref": "#/$defs/_194"
    },
    "editor.suggest.localityBonus": {
      "$ref": "#/$defs/_196"
    },
    "editor.suggest.matchOnWordStartOnly": {
      "$ref": "#/$defs/_210"
    },
    "editor.suggest.maxVisibleSuggestions": {
      "$ref": "#/$defs/_204"
    },
    "editor.suggest.preview": {
      "$ref": "#/$defs/_202"
    },
    "editor.suggest.selectionMode": {
      "$ref": "#/$defs/_198"
    },
    "editor.suggest.shareSuggestSelections": {
      "$ref": "#/$defs/_197"
    },
    "editor.suggest.showClasses": {
      "$ref": "#/$defs/_213"
    },
    "editor.suggest.showColors": {
      "$ref": "#/$defs/_227"
    },
    "editor.suggest.showConstants": {
      "$ref": "#/$defs/_222"
    },
    "editor.suggest.showConstructors": {
      "$ref": "#/$defs/_208"
    },
    "editor.suggest.showCustomcolors": {
      "$ref": "#/$defs/_230"
    },
    "editor.suggest.showDeprecated": {
      "$ref": "#/$defs/_209"
    },
    "editor.suggest.showEnumMembers": {
      "$ref": "#/$defs/_224"
    },
    "editor.suggest.showEnums": {
      "$ref": "#/$defs/_223"
    },
    "editor.suggest.showEvents": {
      "$ref": "#/$defs/_218"
    },
    "editor.suggest.showFields": {
      "$ref": "#/$defs/_211"
    },
    "editor.suggest.showFiles": {
      "$ref": "#/$defs/_228"
    },
    "editor.suggest.showFolders": {
      "$ref": "#/$defs/_231"
    },
    "editor.suggest.showFunctions": {
      "$ref": "#/$defs/_207"
    },
    "editor.suggest.showIcons": {
      "$ref": "#/$defs/_200"
    },
    "editor.suggest.showInlineDetails": {
      "$ref": "#/$defs/_203"
    },
    "editor.suggest.showInterfaces": {
      "$ref": "#/$defs/_215"
    },
    "editor.suggest.showIssues": {
      "$ref": "#/$defs/_235"
    },
    "editor.suggest.showKeywords": {
      "$ref": "#/$defs/_225"
    },
    "editor.suggest.showMethods": {
      "$ref": "#/$defs/_206"
    },
    "editor.suggest.showModules": {
      "$ref": "#/$defs/_216"
    },
    "editor.suggest.showOperators": {
      "$ref": "#/$defs/_219"
    },
    "editor.suggest.showProperties": {
      "$ref": "#/$defs/_217"
    },
    "editor.suggest.showReferences": {
      "$ref": "#/$defs/_229"
    },
    "editor.suggest.showSnippets": {
      "$ref": "#/$defs/_233"
    },
    "editor.suggest.showStatusBar": {
      "$ref": "#/$defs/_201"
    },
    "editor.suggest.showStructs": {
      "$ref": "#/$defs/_214"
    },
    "editor.suggest.showTypeParameters": {
      "$ref": "#/$defs/_232"
    },
    "editor.suggest.showUnits": {
      "$ref": "#/$defs/_220"
    },
    "editor.suggest.showUsers": {
      "$ref": "#/$defs/_234"
    },
    "editor.suggest.showValues": {
      "$ref": "#/$defs/_221"
    },
    "editor.suggest.showVariables": {
      "$ref": "#/$defs/_212"
    },
    "editor.suggest.showWords": {
      "$ref": "#/$defs/_226"
    },
    "editor.suggest.snippetsPreventQuickSuggestions": {
      "$ref": "#/$defs/_199"
    },
    "editor.suggestFontSize": {
      "$ref": "#/$defs/_236"
    },
    "editor.suggestLineHeight": {
      "$ref": "#/$defs/_237"
    },
    "editor.suggestOnTriggerCharacters": {
      "$ref": "#/$defs/_238"
    },
    "editor.suggestSelection": {
      "$ref": "#/$defs/_239"
    },
    "editor.tabCompletion": {
      "$ref": "#/$defs/_240"
    },
    "editor.tabFocusMode": {
      "$ref": "#/$defs/_266"
    },
    "editor.tabSize": {
      "type": "number",
      "default": 4,
      "minimum": 1,
      "maximum": 100,
      "markdownDescription": "The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.",
      "defaultDefaultValue": 4,
      "scope": 6,
      "restricted": false
    },
    "editor.tokenColorCustomizations": {
      "description": "Overrides editor syntax colors and font style from the currently selected color theme.",
      "default": {},
      "allOf": [
        {
          "properties": {
            "[Abyss]": {
              "$ref": "#/$defs/_19"
            },
            "[Default Dark Modern]": {
              "$ref": "#/$defs/_19"
            },
            "[Default Dark+]": {
              "$ref": "#/$defs/_19"
            },
            "[Default High Contrast Light]": {
              "$ref": "#/$defs/_19"
            },
            "[Default High Contrast]": {
              "$ref": "#/$defs/_19"
            },
            "[Default Light Modern]": {
              "$ref": "#/$defs/_19"
            },
            "[Default Light+]": {
              "$ref": "#/$defs/_19"
            },
            "[Kimbie Dark]": {
              "$ref": "#/$defs/_19"
            },
            "[Monokai Dimmed]": {
              "$ref": "#/$defs/_19"
            },
            "[Monokai]": {
              "$ref": "#/$defs/_19"
            },
            "[Quiet Light]": {
              "$ref": "#/$defs/_19"
            },
            "[Red]": {
              "$ref": "#/$defs/_19"
            },
            "[Solarized Dark]": {
              "$ref": "#/$defs/_19"
            },
            "[Solarized Light]": {
              "$ref": "#/$defs/_19"
            },
            "[Tomorrow Night Blue]": {
              "$ref": "#/$defs/_19"
            },
            "[Visual Studio Dark]": {
              "$ref": "#/$defs/_19"
            },
            "[Visual Studio Light]": {
              "$ref": "#/$defs/_19"
            }
          },
          "patternProperties": {
            "^\\[[^\\]]*(\\]\\s*\\[[^\\]]*)*\\]$": {
              "$ref": "#/$defs/_19"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "comments": {
              "$ref": "#/$defs/_10"
            },
            "functions": {
              "$ref": "#/$defs/_15"
            },
            "keywords": {
              "$ref": "#/$defs/_12"
            },
            "numbers": {
              "$ref": "#/$defs/_13"
            },
            "semanticHighlighting": {
              "$ref": "#/$defs/_18"
            },
            "strings": {
              "$ref": "#/$defs/_11"
            },
            "textMateRules": {
              "$ref": "#/$defs/_17"
            },
            "types": {
              "$ref": "#/$defs/_14"
            },
            "variables": {
              "$ref": "#/$defs/_16"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^\\[": {}
          }
        }
      ],
      "defaultDefaultValue": {},
      "scope": 4,
      "restricted": false
    },
    "editor.trimAutoWhitespace": {
      "type": "boolean",
      "default": true,
      "description": "Remove trailing auto inserted whitespace.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "editor.trimWhitespaceOnDelete": {
      "$ref": "#/$defs/_241"
    },
    "editor.unfoldOnClickAfterEndOfLine": {
      "$ref": "#/$defs/_84"
    },
    "editor.unicodeHighlight.allowedCharacters": {
      "$ref": "#/$defs/_247"
    },
    "editor.unicodeHighlight.allowedLocales": {
      "$ref": "#/$defs/_248"
    },
    "editor.unicodeHighlight.ambiguousCharacters": {
      "$ref": "#/$defs/_244"
    },
    "editor.unicodeHighlight.includeComments": {
      "$ref": "#/$defs/_245"
    },
    "editor.unicodeHighlight.includeStrings": {
      "$ref": "#/$defs/_246"
    },
    "editor.unicodeHighlight.invisibleCharacters": {
      "$ref": "#/$defs/_243"
    },
    "editor.unicodeHighlight.nonBasicASCII": {
      "$ref": "#/$defs/_242"
    },
    "editor.unusualLineTerminators": {
      "$ref": "#/$defs/_249"
    },
    "editor.useTabStops": {
      "$ref": "#/$defs/_250"
    },
    "editor.wordBasedSuggestions": {
      "enum": [
        "allDocuments",
        "currentDocument",
        "matchingDocuments",
        "off"
      ],
      "default": "matchingDocuments",
      "enumDescriptions": [
        "Suggest words from all open documents.",
        "Only suggest words from the active document.",
        "Suggest words from all open documents of the same language.",
        "Turn off Word Based Suggestions."
      ],
      "description": "Controls whether completions should be computed based on words in the document and from which documents they are computed.",
      "defaultDefaultValue": "matchingDocuments",
      "scope": 6,
      "restricted": false
    },
    "editor.wordBreak": {
      "$ref": "#/$defs/_251"
    },
    "editor.wordSegmenterLocales": {
      "$ref": "#/$defs/_252"
    },
    "editor.wordSeparators": {
      "$ref": "#/$defs/_253"
    },
    "editor.wordWrap": {
      "$ref": "#/$defs/_254"
    },
    "editor.wordWrapColumn": {
      "$ref": "#/$defs/_255"
    },
    "editor.wrapOnEscapedLineFeeds": {
      "$ref": "#/$defs/_265"
    },
    "editor.wrappingIndent": {
      "$ref": "#/$defs/_256"
    },
    "editor.wrappingStrategy": {
      "$ref": "#/$defs/_257"
    },
    "emmet.excludeLanguages": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [
        "markdown"
      ],
      "markdownDescription": "An array of languages where Emmet abbreviations should not be expanded.",
      "scope": 4,
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": [
        "markdown"
      ],
      "restricted": false
    },
    "emmet.extensionsPath": {
      "type": "array",
      "items": {
        "type": "string",
        "markdownDescription": "A path containing Emmet syntaxProfiles and/or snippets."
      },
      "default": [],
      "scope": 7,
      "markdownDescription": "An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.\nIn case of conflicts, the profiles/snippets of later paths will override those of earlier paths.\nSee https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.",
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": [],
      "restricted": false
    },
    "emmet.includeLanguages": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "default": {},
      "markdownDescription": "Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.\n For example: `{\"vue-html\": \"html\", \"javascript\": \"javascriptreact\"}`",
      "scope": 4,
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": {},
      "restricted": false
    },
    "emmet.optimizeStylesheetParsing": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.",
      "scope": 4,
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "emmet.preferences": {
      "type": "object",
      "default": {},
      "markdownDescription": "Preferences used to modify behavior of some actions and resolvers of Emmet.",
      "properties": {
        "bem.elementSeparator": {
          "type": "string",
          "default": "__",
          "markdownDescription": "Element separator used for classes when using the BEM filter."
        },
        "bem.modifierSeparator": {
          "type": "string",
          "default": "_",
          "markdownDescription": "Modifier separator used for classes when using the BEM filter."
        },
        "css.color.short": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "If `true`, color values like `#f` will be expanded to `#fff` instead of `#ffffff`."
        },
        "css.floatUnit": {
          "type": "string",
          "default": "em",
          "markdownDescription": "Default unit for float values."
        },
        "css.fuzzySearchMinScore": {
          "type": "number",
          "default": 0.3,
          "markdownDescription": "The minimum score (from 0 to 1) that fuzzy-matched abbreviation should achieve. Lower values may produce many false-positive matches, higher values may reduce possible matches."
        },
        "css.intUnit": {
          "type": "string",
          "default": "px",
          "markdownDescription": "Default unit for integer values."
        },
        "css.mozProperties": {
          "type": "string",
          "default": null,
          "markdownDescription": "Comma separated CSS properties that get the 'moz' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'moz' prefix."
        },
        "css.msProperties": {
          "type": "string",
          "default": null,
          "markdownDescription": "Comma separated CSS properties that get the 'ms' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'ms' prefix."
        },
        "css.oProperties": {
          "type": "string",
          "default": null,
          "markdownDescription": "Comma separated CSS properties that get the 'o' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'o' prefix."
        },
        "css.propertyEnd": {
          "type": "string",
          "default": ";",
          "markdownDescription": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations."
        },
        "css.valueSeparator": {
          "type": "string",
          "default": ": ",
          "markdownDescription": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations."
        },
        "css.webkitProperties": {
          "type": "string",
          "default": null,
          "markdownDescription": "Comma separated CSS properties that get the 'webkit' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'webkit' prefix."
        },
        "filter.commentAfter": {
          "type": "string",
          "default": "\n<!-- /[#ID][.CLASS] -->",
          "markdownDescription": "A definition of comment that should be placed after matched element when comment filter is applied."
        },
        "filter.commentBefore": {
          "type": "string",
          "default": "",
          "markdownDescription": "A definition of comment that should be placed before matched element when comment filter is applied."
        },
        "filter.commentTrigger": {
          "type": "array",
          "default": [
            "id",
            "class"
          ],
          "markdownDescription": "A comma-separated list of attribute names that should exist in the abbreviation for the comment filter to be applied."
        },
        "format.forceIndentationForTags": {
          "type": "array",
          "default": [
            "body"
          ],
          "markdownDescription": "An array of tag names that should always get inner indentation."
        },
        "format.noIndentTags": {
          "type": "array",
          "default": [
            "html"
          ],
          "markdownDescription": "An array of tag names that should never get inner indentation."
        },
        "output.inlineBreak": {
          "type": "number",
          "default": 0,
          "markdownDescription": "The number of sibling inline elements needed for line breaks to be placed between those elements. If `0`, inline elements are always expanded onto a single line."
        },
        "output.reverseAttributes": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "If `true`, reverses attribute merging directions when resolving snippets."
        },
        "output.selfClosingStyle": {
          "type": "string",
          "enum": [
            "html",
            "xhtml",
            "xml"
          ],
          "default": "html",
          "markdownDescription": "Style of self-closing tags: html (`<br>`), xml (`<br/>`) or xhtml (`<br />`)."
        },
        "profile.allowCompactBoolean": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "If `true`, compact notation of boolean attributes are produced."
        },
        "sass.propertyEnd": {
          "type": "string",
          "default": "",
          "markdownDescription": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Sass files."
        },
        "sass.valueSeparator": {
          "type": "string",
          "default": ": ",
          "markdownDescription": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Sass files."
        },
        "stylus.propertyEnd": {
          "type": "string",
          "default": "",
          "markdownDescription": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Stylus files."
        },
        "stylus.valueSeparator": {
          "type": "string",
          "default": " ",
          "markdownDescription": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Stylus files."
        }
      },
      "scope": 4,
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": {},
      "restricted": false
    },
    "emmet.showAbbreviationSuggestions": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `\"never\"`.",
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "emmet.showExpandedAbbreviation": {
      "type": [
        "string"
      ],
      "enum": [
        "always",
        "inMarkupAndStylesheetFilesOnly",
        "never"
      ],
      "default": "always",
      "markdownDescription": "Shows expanded Emmet abbreviations as suggestions.\nThe option `\"inMarkupAndStylesheetFilesOnly\"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.\nThe option `\"always\"` applies to all parts of the file regardless of markup/css.",
      "scope": 4,
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": "always",
      "restricted": false
    },
    "emmet.showSuggestionsAsSnippets": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `#editor.snippetSuggestions#` setting.",
      "scope": 4,
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "emmet.syntaxProfiles": {
      "type": "object",
      "default": {},
      "markdownDescription": "Define profile for specified syntax or use your own profile with specific rules.",
      "scope": 4,
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": {},
      "restricted": false
    },
    "emmet.triggerExpansionOnTab": {
      "type": "boolean",
      "default": false,
      "scope": 6,
      "markdownDescription": "When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB.",
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "emmet.useInlineCompletions": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `#editor.quickSuggestions#` to `inline` or `off` for the `other` item.",
      "scope": 4,
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "emmet.variables": {
      "type": "object",
      "properties": {
        "charset": {
          "type": "string",
          "default": "UTF-8"
        },
        "lang": {
          "type": "string",
          "default": "en"
        }
      },
      "additionalProperties": {
        "type": "string"
      },
      "default": {},
      "markdownDescription": "Variables to be used in Emmet snippets.",
      "scope": 4,
      "source": {
        "id": "vscode.emmet",
        "displayName": "Emmet"
      },
      "defaultDefaultValue": {},
      "restricted": false
    },
    "explorer.autoOpenDroppedFile": {
      "type": "boolean",
      "description": "Controls whether the Explorer should automatically open a file when it is dropped into the explorer",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.autoReveal": {
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        false,
        "focusNoScroll",
        true
      ],
      "default": true,
      "enumDescriptions": [
        "Files will not be revealed and selected.",
        "Files will not be scrolled into view, but will still be focused.",
        "Files will be revealed and selected."
      ],
      "description": "Controls whether the Explorer should automatically reveal and select files when opening them.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.autoRevealExclude": {
      "type": "object",
      "markdownDescription": "Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders from being revealed and selected in the Explorer when they are opened. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths.",
      "default": {
        "**/bower_components": true,
        "**/node_modules": true
      },
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/$defs/_272"
          },
          {
            "type": "object",
            "properties": {
              "when": {
                "type": "string",
                "pattern": "\\w*\\$\\(basename\\)\\w*",
                "default": "$(basename).ext",
                "description": "Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name."
              }
            }
          }
        ]
      },
      "defaultDefaultValue": {
        "**/bower_components": true,
        "**/node_modules": true
      },
      "scope": 4,
      "restricted": false
    },
    "explorer.compactFolders": {
      "type": "boolean",
      "description": "Controls whether the Explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.confirmDelete": {
      "type": "boolean",
      "description": "Controls whether the Explorer should ask for confirmation when deleting a file via the trash.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.confirmDragAndDrop": {
      "type": "boolean",
      "description": "Controls whether the Explorer should ask for confirmation to move files and folders via drag and drop.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.confirmPasteNative": {
      "type": "boolean",
      "description": "Controls whether the Explorer should ask for confirmation when pasting native files and folders.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.confirmUndo": {
      "type": "string",
      "enum": [
        "default",
        "light",
        "verbose"
      ],
      "description": "Controls whether the Explorer should ask for confirmation when undoing.",
      "default": "default",
      "enumDescriptions": [
        "Explorer will prompt before destructive undo operations.",
        "Explorer will not prompt before undo operations when focused.",
        "Explorer will prompt before all undo operations."
      ],
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "explorer.copyPathSeparator": {
      "type": "string",
      "enum": [
        "/",
        "\\",
        "auto"
      ],
      "enumDescriptions": [
        "Use slash as path separation character.",
        "Use backslash as path separation character.",
        "Uses operating system specific path separation character."
      ],
      "description": "The path separation character used when copying file paths.",
      "default": "auto",
      "defaultDefaultValue": "auto",
      "scope": 4,
      "restricted": false
    },
    "explorer.copyRelativePathSeparator": {
      "type": "string",
      "enum": [
        "/",
        "\\",
        "auto"
      ],
      "enumDescriptions": [
        "Use slash as path separation character.",
        "Use backslash as path separation character.",
        "Uses operating system specific path separation character."
      ],
      "description": "The path separation character used when copying relative file paths.",
      "default": "auto",
      "defaultDefaultValue": "auto",
      "scope": 4,
      "restricted": false
    },
    "explorer.decorations.badges": {
      "type": "boolean",
      "description": "Controls whether file decorations should use badges.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.decorations.colors": {
      "type": "boolean",
      "description": "Controls whether file decorations should use colors.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.enableDragAndDrop": {
      "type": "boolean",
      "description": "Controls whether the Explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the Explorer.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.enableUndo": {
      "type": "boolean",
      "description": "Controls whether the Explorer should support undoing file and folder operations.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.excludeGitIgnore": {
      "type": "boolean",
      "markdownDescription": "Controls whether entries in .gitignore should be parsed and excluded from the Explorer. Similar to `#files.exclude#`.",
      "default": false,
      "scope": 5,
      "defaultDefaultValue": false,
      "restricted": false
    },
    "explorer.expandSingleFolderWorkspaces": {
      "type": "boolean",
      "description": "Controls whether the Explorer should expand multi-root workspaces containing only one folder during initialization",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.fileNesting.enabled": {
      "type": "boolean",
      "scope": 5,
      "markdownDescription": "Controls whether file nesting is enabled in the Explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file.",
      "default": false,
      "defaultDefaultValue": false,
      "restricted": false
    },
    "explorer.fileNesting.expand": {
      "type": "boolean",
      "markdownDescription": "Controls whether file nests are automatically expanded. `#explorer.fileNesting.enabled#` must be set for this to take effect.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "explorer.fileNesting.patterns": {
      "type": "object",
      "scope": 5,
      "markdownDescription": "Controls nesting of files in the Explorer. `#explorer.fileNesting.enabled#` must be set for this to take effect. Each __Item__ represents a parent pattern and may contain a single `*` character that matches any string. Each __Value__ represents a comma separated list of the child patterns that should be shown nested under a given parent. Child patterns may contain several special tokens:\n- `${capture}`: Matches the resolved value of the `*` from the parent pattern\n- `${basename}`: Matches the parent file's basename, the `file` in `file.ts`\n- `${extname}`: Matches the parent file's extension, the `ts` in `file.ts`\n- `${dirname}`: Matches the parent file's directory name, the `src` in `src/file.ts`\n- `*`:  Matches any string, may only be used once per child pattern",
      "patternProperties": {
        "^[^*]*\\*?[^*]*$": {
          "markdownDescription": "Each key pattern may contain a single `*` character which will match any string.",
          "type": "string",
          "pattern": "^([^,*]*\\*?[^,*]*)(, ?[^,*]*\\*?[^,*]*)*$"
        }
      },
      "additionalProperties": false,
      "default": {
        "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
        "*.jsx": "${capture}.js",
        "*.ts": "${capture}.js",
        "*.tsx": "${capture}.ts",
        "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb, bun.lock",
        "tsconfig.json": "tsconfig.*.json"
      },
      "defaultDefaultValue": {
        "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
        "*.jsx": "${capture}.js",
        "*.ts": "${capture}.js",
        "*.tsx": "${capture}.ts",
        "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb, bun.lock",
        "tsconfig.json": "tsconfig.*.json"
      },
      "restricted": false
    },
    "explorer.incrementalNaming": {
      "type": "string",
      "enum": [
        "disabled",
        "simple",
        "smart"
      ],
      "enumDescriptions": [
        "Disables incremental naming. If two files with the same name exist you will be prompted to overwrite the existing file.",
        "Appends the word \"copy\" at the end of the duplicated name potentially followed by a number.",
        "Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number."
      ],
      "description": "Controls which naming strategy to use when giving a new name to a duplicated Explorer item on paste.",
      "default": "simple",
      "defaultDefaultValue": "simple",
      "scope": 4,
      "restricted": false
    },
    "explorer.openEditors.minVisible": {
      "type": "number",
      "description": "The minimum number of editor slots pre-allocated in the Open Editors pane. If set to 0 the Open Editors pane will dynamically resize based on the number of editors.",
      "default": 0,
      "minimum": 0,
      "defaultDefaultValue": 0,
      "scope": 4,
      "restricted": false
    },
    "explorer.openEditors.sortOrder": {
      "type": "string",
      "enum": [
        "alphabetical",
        "editorOrder",
        "fullPath"
      ],
      "description": "Controls the sorting order of editors in the Open Editors pane.",
      "enumDescriptions": [
        "Editors are ordered alphabetically by tab name inside each editor group.",
        "Editors are ordered in the same order editor tabs are shown.",
        "Editors are ordered alphabetically by full path inside each editor group."
      ],
      "default": "editorOrder",
      "defaultDefaultValue": "editorOrder",
      "scope": 4,
      "restricted": false
    },
    "explorer.openEditors.visible": {
      "type": "number",
      "description": "The initial maximum number of editors shown in the Open Editors pane. Exceeding this limit will show a scroll bar and allow resizing the pane to display more items.",
      "default": 9,
      "minimum": 1,
      "defaultDefaultValue": 9,
      "scope": 4,
      "restricted": false
    },
    "explorer.sortOrder": {
      "type": "string",
      "enum": [
        "default",
        "filesFirst",
        "foldersNestsFiles",
        "mixed",
        "modified",
        "type"
      ],
      "default": "default",
      "enumDescriptions": [
        "Files and folders are sorted by their names. Folders are displayed before files.",
        "Files and folders are sorted by their names. Files are displayed before folders.",
        "Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.",
        "Files and folders are sorted by their names. Files are interwoven with folders.",
        "Files and folders are sorted by last modified date in descending order. Folders are displayed before files.",
        "Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files."
      ],
      "markdownDescription": "Controls the property-based sorting of files and folders in the Explorer. When `#explorer.fileNesting.enabled#` is enabled, also controls sorting of nested files.",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "explorer.sortOrderLexicographicOptions": {
      "type": "string",
      "enum": [
        "default",
        "lower",
        "unicode",
        "upper"
      ],
      "default": "default",
      "enumDescriptions": [
        "Uppercase and lowercase names are mixed together.",
        "Lowercase names are grouped together before uppercase names.",
        "Names are sorted in Unicode order.",
        "Uppercase names are grouped together before lowercase names."
      ],
      "description": "Controls the lexicographic sorting of file and folder names in the Explorer.",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "explorer.sortOrderReverse": {
      "type": "boolean",
      "description": "Controls whether the file and folder sort order, should be reversed.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "extensions.closeExtensionDetailsOnViewChange": {
      "type": "boolean",
      "description": "When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "extensions.experimental.affinity": {
      "type": "object",
      "markdownDescription": "Configure an extension to execute in a different extension host process.",
      "patternProperties": {
        "([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$": {
          "type": "integer",
          "default": 1
        }
      },
      "additionalProperties": false,
      "default": {},
      "defaultSnippets": [
        {
          "body": {
            "pub.name": 1
          }
        }
      ],
      "defaultDefaultValue": {},
      "scope": 4,
      "restricted": false
    },
    "extensions.experimental.deferredStartupFinishedActivation": {
      "type": "boolean",
      "description": "When enabled, extensions which declare the `onStartupFinished` activation event will be activated after a timeout.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "extensions.experimental.issueQuickAccess": {
      "type": "boolean",
      "description": "When enabled, extensions can be searched for via Quick Access and report issues from there.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "extensions.ignoreRecommendations": {
      "type": "boolean",
      "description": "When enabled, the notifications for extension recommendations will not be shown.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "extensions.showRecommendationsOnlyOnDemand": {
      "type": "boolean",
      "deprecationMessage": "This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.",
      "default": false,
      "tags": [
        "usesOnlineServices"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "extensions.supportNodeGlobalNavigator": {
      "type": "boolean",
      "description": "When enabled, Node.js navigator object is exposed on the global scope.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "extensions.supportVirtualWorkspaces": {
      "type": "object",
      "markdownDescription": "Override the virtual workspaces support of an extension.",
      "patternProperties": {
        "([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$": {
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false,
      "default": {},
      "defaultSnippets": [
        {
          "body": {
            "pub.name": false
          }
        }
      ],
      "defaultDefaultValue": {},
      "scope": 4,
      "restricted": false
    },
    "extensions.webWorker": {
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        "auto",
        false,
        true
      ],
      "enumDescriptions": [
        "The Web Worker Extension Host will be launched when a web extension needs it.",
        "The Web Worker Extension Host will never be launched.",
        "The Web Worker Extension Host will always be launched."
      ],
      "description": "Enable web worker extension host.",
      "default": "auto",
      "defaultDefaultValue": "auto",
      "scope": 4,
      "restricted": false
    },
    "files.associations": {
      "type": "object",
      "markdownDescription": "Configure [glob patterns](https://aka.ms/vscode-glob-patterns) of file associations to languages (for example `\"*.extension\": \"html\"`). Patterns will match on the absolute path of a file if they contain a path separator and will match on the name of the file otherwise. These have precedence over the default associations of the languages installed.",
      "additionalProperties": {
        "type": "string"
      },
      "default": {},
      "scope": 4,
      "restricted": false
    },
    "files.autoGuessEncoding": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `#files.encoding#` is respected.",
      "scope": 6,
      "defaultDefaultValue": false,
      "restricted": false
    },
    "files.autoSave": {
      "type": "string",
      "enum": [
        "afterDelay",
        "off",
        "onFocusChange",
        "onWindowChange"
      ],
      "markdownEnumDescriptions": [
        "An editor with changes is automatically saved after the configured `#files.autoSaveDelay#`.",
        "An editor with changes is never automatically saved.",
        "An editor with changes is automatically saved when the editor loses focus.",
        "An editor with changes is automatically saved when the window loses focus."
      ],
      "default": "off",
      "markdownDescription": "Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.",
      "scope": 6,
      "defaultDefaultValue": "off",
      "restricted": false
    },
    "files.autoSaveDelay": {
      "type": "number",
      "default": 1000,
      "minimum": 0,
      "markdownDescription": "Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `#files.autoSave#` is set to `afterDelay`.",
      "scope": 6,
      "defaultDefaultValue": 1000,
      "restricted": false
    },
    "files.autoSaveWhenNoErrors": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "When enabled, will limit [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors to files that have no errors reported in them at the time the auto save is triggered. Only applies when `#files.autoSave#` is enabled.",
      "scope": 6,
      "defaultDefaultValue": false,
      "restricted": false
    },
    "files.autoSaveWorkspaceFilesOnly": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "When enabled, will limit [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors to files that are inside the opened workspace. Only applies when `#files.autoSave#` is enabled.",
      "scope": 6,
      "defaultDefaultValue": false,
      "restricted": false
    },
    "files.candidateGuessEncodings": {
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "cp1125",
          "cp866",
          "cp950",
          "eucjp",
          "euckr",
          "gb2312",
          "iso88592",
          "iso88595",
          "iso88597",
          "iso88598",
          "koi8r",
          "shiftjis",
          "utf16be",
          "utf16le",
          "utf8",
          "windows1250",
          "windows1251",
          "windows1252",
          "windows1253",
          "windows1255"
        ],
        "enumDescriptions": [
          "Cyrillic (CP 1125)",
          "Cyrillic (CP 866)",
          "Traditional Chinese (Big5)",
          "Japanese (EUC-JP)",
          "Korean (EUC-KR)",
          "Simplified Chinese (GB 2312)",
          "Central European (ISO 8859-2)",
          "Cyrillic (ISO 8859-5)",
          "Greek (ISO 8859-7)",
          "Hebrew (ISO 8859-8)",
          "Cyrillic (KOI8-R)",
          "Japanese (Shift JIS)",
          "UTF-16 BE",
          "UTF-16 LE",
          "UTF-8",
          "Central European (Windows 1250)",
          "Cyrillic (Windows 1251)",
          "Western (Windows 1252)",
          "Greek (Windows 1253)",
          "Hebrew (Windows 1255)"
        ]
      },
      "default": [],
      "markdownDescription": "List of character set encodings that the editor should attempt to guess in the order they are listed. In case it cannot be determined, `#files.encoding#` is respected",
      "scope": 6,
      "defaultDefaultValue": [],
      "restricted": false
    },
    "files.defaultLanguage": {
      "type": "string",
      "markdownDescription": "The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any.",
      "default": "",
      "scope": 4,
      "restricted": false
    },
    "files.dialog.defaultPath": {
      "type": "string",
      "pattern": "^((\\/|\\\\\\\\|[a-zA-Z]:\\\\).*)?$",
      "patternErrorMessage": "Default path for file dialogs must be an absolute path (e.g. C:\\\\myFolder or /myFolder).",
      "description": "Default path for file dialogs, overriding user's home path. Only used in the absence of a context-specific path, such as most recently opened file or folder.",
      "scope": 2,
      "default": "",
      "restricted": false
    },
    "files.enableTrash": {
      "type": "boolean",
      "default": true,
      "description": "Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "files.encoding": {
      "type": "string",
      "enum": [
        "big5hkscs",
        "cp1125",
        "cp437",
        "cp850",
        "cp852",
        "cp865",
        "cp866",
        "cp950",
        "eucjp",
        "euckr",
        "gb18030",
        "gb2312",
        "gbk",
        "iso88591",
        "iso885910",
        "iso885911",
        "iso885913",
        "iso885914",
        "iso885915",
        "iso885916",
        "iso88592",
        "iso88593",
        "iso88594",
        "iso88595",
        "iso88596",
        "iso88597",
        "iso88598",
        "iso88599",
        "koi8r",
        "koi8ru",
        "koi8t",
        "koi8u",
        "macroman",
        "shiftjis",
        "utf16be",
        "utf16le",
        "utf8",
        "utf8bom",
        "windows1250",
        "windows1251",
        "windows1252",
        "windows1253",
        "windows1254",
        "windows1255",
        "windows1256",
        "windows1257",
        "windows1258",
        "windows874"
      ],
      "default": "utf8",
      "description": "The default character set encoding to use when reading and writing files. This setting can also be configured per language.",
      "scope": 6,
      "enumDescriptions": [
        "Traditional Chinese (Big5-HKSCS)",
        "Cyrillic (CP 1125)",
        "DOS (CP 437)",
        "Western European DOS (CP 850)",
        "Central European (CP 852)",
        "Nordic DOS (CP 865)",
        "Cyrillic (CP 866)",
        "Traditional Chinese (Big5)",
        "Japanese (EUC-JP)",
        "Korean (EUC-KR)",
        "Simplified Chinese (GB18030)",
        "Simplified Chinese (GB 2312)",
        "Simplified Chinese (GBK)",
        "Western (ISO 8859-1)",
        "Nordic (ISO 8859-10)",
        "Latin/Thai (ISO 8859-11)",
        "Estonian (ISO 8859-13)",
        "Celtic (ISO 8859-14)",
        "Western (ISO 8859-15)",
        "Romanian (ISO 8859-16)",
        "Central European (ISO 8859-2)",
        "Western (ISO 8859-3)",
        "Baltic (ISO 8859-4)",
        "Cyrillic (ISO 8859-5)",
        "Arabic (ISO 8859-6)",
        "Greek (ISO 8859-7)",
        "Hebrew (ISO 8859-8)",
        "Turkish (ISO 8859-9)",
        "Cyrillic (KOI8-R)",
        "Cyrillic (KOI8-RU)",
        "Tajik (KOI8-T)",
        "Cyrillic (KOI8-U)",
        "Western (Mac Roman)",
        "Japanese (Shift JIS)",
        "UTF-16 BE",
        "UTF-16 LE",
        "UTF-8",
        "UTF-8 with BOM",
        "Central European (Windows 1250)",
        "Cyrillic (Windows 1251)",
        "Western (Windows 1252)",
        "Greek (Windows 1253)",
        "Turkish (Windows 1254)",
        "Hebrew (Windows 1255)",
        "Arabic (Windows 1256)",
        "Baltic (Windows 1257)",
        "Vietnamese (Windows 1258)",
        "Thai (Windows 874)"
      ],
      "enumItemLabels": [
        "UTF-8",
        "UTF-8 with BOM",
        "UTF-16 LE",
        "UTF-16 BE",
        "Western (Windows 1252)",
        "Western (ISO 8859-1)",
        "Western (ISO 8859-3)",
        "Western (ISO 8859-15)",
        "Western (Mac Roman)",
        "DOS (CP 437)",
        "Arabic (Windows 1256)",
        "Arabic (ISO 8859-6)",
        "Baltic (Windows 1257)",
        "Baltic (ISO 8859-4)",
        "Celtic (ISO 8859-14)",
        "Central European (Windows 1250)",
        "Central European (ISO 8859-2)",
        "Central European (CP 852)",
        "Cyrillic (Windows 1251)",
        "Cyrillic (CP 866)",
        "Cyrillic (CP 1125)",
        "Cyrillic (ISO 8859-5)",
        "Cyrillic (KOI8-R)",
        "Cyrillic (KOI8-U)",
        "Estonian (ISO 8859-13)",
        "Greek (Windows 1253)",
        "Greek (ISO 8859-7)",
        "Hebrew (Windows 1255)",
        "Hebrew (ISO 8859-8)",
        "Nordic (ISO 8859-10)",
        "Romanian (ISO 8859-16)",
        "Turkish (Windows 1254)",
        "Turkish (ISO 8859-9)",
        "Vietnamese (Windows 1258)",
        "Simplified Chinese (GBK)",
        "Simplified Chinese (GB18030)",
        "Traditional Chinese (Big5)",
        "Traditional Chinese (Big5-HKSCS)",
        "Japanese (Shift JIS)",
        "Japanese (EUC-JP)",
        "Korean (EUC-KR)",
        "Thai (Windows 874)",
        "Latin/Thai (ISO 8859-11)",
        "Cyrillic (KOI8-RU)",
        "Tajik (KOI8-T)",
        "Simplified Chinese (GB 2312)",
        "Nordic DOS (CP 865)",
        "Western European DOS (CP 850)"
      ],
      "defaultDefaultValue": "utf8",
      "restricted": false
    },
    "files.eol": {
      "type": "string",
      "enum": [
        "\n",
        "\r\n",
        "auto"
      ],
      "enumDescriptions": [
        "LF",
        "CRLF",
        "Uses operating system specific end of line character."
      ],
      "default": "auto",
      "description": "The default end of line character.",
      "scope": 6,
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "files.exclude": {
      "type": "object",
      "markdownDescription": "Configure [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders. For example, the File Explorer decides which files and folders to show or hide based on this setting. Refer to the `#search.exclude#` setting to define search-specific excludes. Refer to the `#explorer.excludeGitIgnore#` setting for ignoring files based on your `.gitignore`.",
      "default": {
        "**/.DS_Store": true,
        "**/.git": true,
        "**/.hg": true,
        "**/.svn": true,
        "**/Thumbs.db": true
      },
      "scope": 5,
      "additionalProperties": {
        "anyOf": [
          {
            "type": "boolean",
            "enum": [
              true,
              false
            ],
            "enumDescriptions": [
              "Enable the pattern.",
              "Disable the pattern."
            ],
            "description": "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern."
          },
          {
            "$ref": "#/$defs/_327"
          }
        ]
      },
      "defaultDefaultValue": {
        "**/.DS_Store": true,
        "**/.git": true,
        "**/.hg": true,
        "**/.svn": true,
        "**/Thumbs.db": true
      },
      "restricted": false
    },
    "files.insertFinalNewline": {
      "type": "boolean",
      "default": false,
      "description": "When enabled, insert a final new line at the end of the file when saving it.",
      "scope": 6,
      "defaultDefaultValue": false,
      "restricted": false
    },
    "files.participants.timeout": {
      "type": "number",
      "default": 60000,
      "markdownDescription": "Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.",
      "defaultDefaultValue": 60000,
      "scope": 4,
      "restricted": false
    },
    "files.readonlyExclude": {
      "type": "object",
      "patternProperties": {
        ".*": {
          "type": "boolean"
        }
      },
      "default": {},
      "markdownDescription": "Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from being marked as read-only if they match as a result of the `#files.readonlyInclude#` setting. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Files from readonly file system providers will always be read-only independent of this setting.",
      "scope": 5,
      "defaultDefaultValue": {},
      "restricted": false
    },
    "files.readonlyFromPermissions": {
      "type": "boolean",
      "markdownDescription": "Marks files as read-only when their file permissions indicate as such. This can be overridden via `#files.readonlyInclude#` and `#files.readonlyExclude#` settings.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "files.readonlyInclude": {
      "type": "object",
      "patternProperties": {
        ".*": {
          "type": "boolean"
        }
      },
      "default": {},
      "markdownDescription": "Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to mark as read-only. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. You can exclude matching paths via the `#files.readonlyExclude#` setting. Files from readonly file system providers will always be read-only independent of this setting.",
      "scope": 5,
      "defaultDefaultValue": {},
      "restricted": false
    },
    "files.refactoring.autoSave": {
      "description": "Controls if files that were part of a refactoring are saved automatically",
      "default": true,
      "type": "boolean",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "files.restoreUndoStack": {
      "type": "boolean",
      "description": "Restore the undo stack when a file is reopened.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "files.saveConflictResolution": {
      "type": "string",
      "enum": [
        "askUser",
        "overwriteFileOnDisk"
      ],
      "enumDescriptions": [
        "Will refuse to save and ask for resolving the save conflict manually.",
        "Will resolve the save conflict by overwriting the file on disk with the changes in the editor."
      ],
      "description": "A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.",
      "default": "askUser",
      "scope": 6,
      "defaultDefaultValue": "askUser",
      "restricted": false
    },
    "files.simpleDialog.enable": {
      "type": "boolean",
      "description": "Enables the simple file dialog for opening and saving files and folders. The simple file dialog replaces the system file dialog when enabled.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "files.trimFinalNewlines": {
      "type": "boolean",
      "default": false,
      "description": "When enabled, will trim all new lines after the final new line at the end of the file when saving it.",
      "scope": 6,
      "defaultDefaultValue": false,
      "restricted": false
    },
    "files.trimTrailingWhitespace": {
      "type": "boolean",
      "default": false,
      "description": "When enabled, will trim trailing whitespace when saving a file.",
      "scope": 6,
      "defaultDefaultValue": false,
      "restricted": false
    },
    "files.trimTrailingWhitespaceInRegexAndStrings": {
      "type": "boolean",
      "default": true,
      "description": "When enabled, trailing whitespace will be removed from multiline strings and regexes will be removed on save or when executing 'editor.action.trimTrailingWhitespace'. This can cause whitespace to not be trimmed from lines when there isn't up-to-date token information.",
      "scope": 6,
      "defaultDefaultValue": true,
      "restricted": false
    },
    "files.watcherExclude": {
      "type": "object",
      "patternProperties": {
        ".*": {
          "type": "boolean"
        }
      },
      "default": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/.hg/store/**": true
      },
      "markdownDescription": "Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from file watching. Paths can either be relative to the watched folder or absolute. Glob patterns are matched relative from the watched folder. When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).",
      "scope": 5,
      "defaultDefaultValue": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/.hg/store/**": true
      },
      "restricted": false
    },
    "files.watcherInclude": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "description": "Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.",
      "scope": 5,
      "defaultDefaultValue": [],
      "restricted": false
    },
    "git.allowForcePush": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether force push (with or without lease) is enabled.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.allowNoVerifyCommit": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether commits without running pre-commit and commit-msg hooks are allowed.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.alwaysShowStagedChangesResourceGroup": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Always show the Staged Changes resource group.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.alwaysSignOff": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Controls the signoff flag for all commits.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.autofetch": {
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        "all",
        false,
        true
      ],
      "scope": 5,
      "markdownDescription": "When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.",
      "default": false,
      "tags": [
        "usesOnlineServices"
      ],
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.autofetchPeriod": {
      "type": "number",
      "scope": 5,
      "markdownDescription": "Duration in seconds between each automatic git fetch, when `#git.autofetch#` is enabled.",
      "default": 180,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": 180,
      "restricted": false
    },
    "git.autorefresh": {
      "type": "boolean",
      "description": "Whether auto refreshing is enabled.",
      "default": true,
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.autoRepositoryDetection": {
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        false,
        "openEditors",
        "subFolders",
        true
      ],
      "enumDescriptions": [
        "Disable automatic repository scanning.",
        "Scan for parent folders of open files.",
        "Scan for subfolders of the currently opened folder.",
        "Scan for both subfolders of the current opened folder and parent folders of open files."
      ],
      "description": "Configures when repositories should be automatically detected.",
      "default": true,
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.autoStash": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Stash any changes before pulling and restore them after successful pull.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.blame.editorDecoration.enabled": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls whether to show blame information in the editor using editor decorations.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.blame.editorDecoration.template": {
      "type": "string",
      "default": "${subject}, ${authorName} (${authorDateAgo})",
      "markdownDescription": "Template for the blame information editor decoration. Supported variables:\n\n* `hash`: Commit hash\n\n* `hashShort`: First N characters of the commit hash according to `#git.commitShortHashLength#`\n\n* `subject`: First line of the commit message\n\n* `authorName`: Author name\n\n* `authorEmail`: Author email\n\n* `authorDate`: Author date\n\n* `authorDateAgo`: Time difference between now and the author date\n\n",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "${subject}, ${authorName} (${authorDateAgo})",
      "restricted": false
    },
    "git.blame.statusBarItem.enabled": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether to show blame information in the status bar.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.blame.statusBarItem.template": {
      "type": "string",
      "default": "${authorName} (${authorDateAgo})",
      "markdownDescription": "Template for the blame information status bar item. Supported variables:\n\n* `hash`: Commit hash\n\n* `hashShort`: First N characters of the commit hash according to `#git.commitShortHashLength#`\n\n* `subject`: First line of the commit message\n\n* `authorName`: Author name\n\n* `authorEmail`: Author email\n\n* `authorDate`: Author date\n\n* `authorDateAgo`: Time difference between now and the author date\n\n",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "${authorName} (${authorDateAgo})",
      "restricted": false
    },
    "git.branchPrefix": {
      "type": "string",
      "description": "Prefix used when creating a new branch.",
      "default": "",
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "",
      "restricted": false
    },
    "git.branchProtection": {
      "type": "array",
      "markdownDescription": "List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `#git.branchProtectionPrompt#`  setting.",
      "items": {
        "type": "string"
      },
      "default": [],
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": [],
      "restricted": false
    },
    "git.branchProtectionPrompt": {
      "type": "string",
      "description": "Controls whether a prompt is being shown before changes are committed to a protected branch.",
      "enum": [
        "alwaysCommit",
        "alwaysCommitToNewBranch",
        "alwaysPrompt"
      ],
      "enumDescriptions": [
        "Always commit changes to the protected branch.",
        "Always commit changes to a new branch.",
        "Always prompt before changes are committed to a protected branch."
      ],
      "default": "alwaysPrompt",
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "alwaysPrompt",
      "restricted": false
    },
    "git.branchRandomName.dictionary": {
      "type": "array",
      "markdownDescription": "List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.",
      "items": {
        "type": "string",
        "enum": [
          "adjectives",
          "animals",
          "colors",
          "numbers"
        ],
        "enumDescriptions": [
          "A random adjective",
          "A random animal name",
          "A random color name",
          "A random number between 100 and 999"
        ]
      },
      "minItems": 1,
      "maxItems": 5,
      "default": [
        "adjectives",
        "animals"
      ],
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": [
        "adjectives",
        "animals"
      ],
      "restricted": false
    },
    "git.branchRandomName.enable": {
      "type": "boolean",
      "description": "Controls whether a random name is generated when creating a new branch.",
      "default": false,
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.branchSortOrder": {
      "type": "string",
      "enum": [
        "alphabetically",
        "committerdate"
      ],
      "default": "committerdate",
      "description": "Controls the sort order for branches.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "committerdate",
      "restricted": false
    },
    "git.branchValidationRegex": {
      "type": "string",
      "description": "A regular expression to validate new branch names.",
      "default": "",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "",
      "restricted": false
    },
    "git.branchWhitespaceChar": {
      "type": "string",
      "description": "The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.",
      "default": "-",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "-",
      "restricted": false
    },
    "git.checkoutType": {
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "local",
          "remote",
          "tags"
        ],
        "enumDescriptions": [
          "Local branches",
          "Remote branches",
          "Tags"
        ]
      },
      "uniqueItems": true,
      "markdownDescription": "Controls what type of Git refs are listed when running `Checkout to...`.",
      "default": [
        "local",
        "remote",
        "tags"
      ],
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": [
        "local",
        "remote",
        "tags"
      ],
      "restricted": false
    },
    "git.closeDiffOnOperation": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.commandsToLog": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "markdownDescription": "List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": [],
      "restricted": false
    },
    "git.commitShortHashLength": {
      "type": "number",
      "default": 7,
      "minimum": 7,
      "maximum": 40,
      "markdownDescription": "Controls the length of the commit short hash.",
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": 7,
      "restricted": false
    },
    "git.confirmEmptyCommits": {
      "type": "boolean",
      "scope": 5,
      "description": "Always confirm the creation of empty commits for the 'Git: Commit Empty' command.",
      "default": true,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.confirmForcePush": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to ask for confirmation before force-pushing.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.confirmNoVerifyCommit": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to ask for confirmation before committing without verification.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.confirmSync": {
      "type": "boolean",
      "description": "Confirm before synchronizing Git repositories.",
      "default": true,
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.countBadge": {
      "type": "string",
      "enum": [
        "all",
        "off",
        "tracked"
      ],
      "enumDescriptions": [
        "Count all changes.",
        "Turn off counter.",
        "Count only tracked changes."
      ],
      "description": "Controls the Git count badge.",
      "default": "all",
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "all",
      "restricted": false
    },
    "git.decorations.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.defaultBranchName": {
      "type": "string",
      "markdownDescription": "The name of the default branch (example: main, trunk, development) when initializing a new Git repository. When set to empty, the default branch name configured in Git will be used. **Note:** Requires Git version `2.28.0` or later.",
      "default": "main",
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "main",
      "restricted": false
    },
    "git.defaultCloneDirectory": {
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "scope": 2,
      "description": "The default location to clone a Git repository.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": null,
      "restricted": false
    },
    "git.detectSubmodules": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Controls whether to automatically detect Git submodules.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.detectSubmodulesLimit": {
      "type": "number",
      "scope": 5,
      "default": 10,
      "description": "Controls the limit of Git submodules detected.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": 10,
      "restricted": false
    },
    "git.detectWorktrees": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Controls whether to automatically detect Git worktrees.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.detectWorktreesLimit": {
      "type": "number",
      "scope": 5,
      "default": 10,
      "description": "Controls the limit of Git worktrees detected.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": 10,
      "restricted": false
    },
    "git.diagnosticsCommitHook.enabled": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls whether to check for unresolved diagnostics before committing.",
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.diagnosticsCommitHook.sources": {
      "type": "object",
      "additionalProperties": {
        "type": "string",
        "enum": [
          "error",
          "warning",
          "information",
          "hint",
          "none"
        ]
      },
      "default": {
        "*": "error"
      },
      "markdownDescription": "Controls the list of sources (**Item**) and the minimum severity (**Value**) to be considered before committing. **Note:** To ignore diagnostics from a particular source, add the source to the list and set the minimum severity to `none`.",
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": {
        "*": "error"
      },
      "restricted": false
    },
    "git.discardUntrackedChangesToTrash": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether discarding untracked changes moves the file(s) to the Recycle Bin (Windows), Trash (macOS, Linux) instead of deleting them permanently. **Note:** This setting has no effect when connected to a remote or when running in Linux as a snap package.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.enableCommitSigning": {
      "type": "boolean",
      "scope": 5,
      "description": "Enables commit signing with GPG, X.509, or SSH.",
      "default": false,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.enabled": {
      "type": "boolean",
      "scope": 5,
      "description": "Whether Git is enabled.",
      "default": true,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.enableSmartCommit": {
      "type": "boolean",
      "scope": 5,
      "description": "Commit all changes when there are no staged changes.",
      "default": false,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.enableStatusBarSync": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the Git Sync command appears in the status bar.",
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.fetchOnPull": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.followTagsWhenSync": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Push all annotated tags when running the sync command.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.githubAuthentication": {
      "markdownDeprecationMessage": "This setting is now deprecated, please use `#github.gitAuthentication#` instead.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "default": null,
      "restricted": false,
      "deprecationMessage": "This setting is now deprecated, please use `#github.gitAuthentication#` instead."
    },
    "git.ignoredRepositories": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "scope": 4,
      "description": "List of Git repositories to ignore.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": [],
      "restricted": false
    },
    "git.ignoreLegacyWarning": {
      "type": "boolean",
      "description": "Ignores the legacy Git warning.",
      "default": false,
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.ignoreLimitWarning": {
      "type": "boolean",
      "description": "Ignores the warning when there are too many changes in a repository.",
      "default": false,
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.ignoreMissingGitWarning": {
      "type": "boolean",
      "description": "Ignores the warning when Git is missing.",
      "default": false,
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.ignoreRebaseWarning": {
      "type": "boolean",
      "description": "Ignores the warning when it looks like the branch might have been rebased when pulling.",
      "default": false,
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.ignoreSubmodules": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Ignore modifications to submodules in the file tree.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.ignoreWindowsGit27Warning": {
      "type": "boolean",
      "description": "Ignores the warning when Git 2.25 - 2.26 is installed on Windows.",
      "default": false,
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.inputValidation": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether to show commit message input validation diagnostics.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.inputValidationLength": {
      "type": "number",
      "default": 72,
      "description": "Controls the commit message length threshold for showing a warning.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": 72,
      "restricted": false
    },
    "git.inputValidationSubjectLength": {
      "type": [
        "number",
        "null"
      ],
      "default": 50,
      "markdownDescription": "Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `#git.inputValidationLength#`.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": 50,
      "restricted": false
    },
    "git.mergeEditor": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Open the merge editor for files that are currently under conflict.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.openAfterClone": {
      "type": "string",
      "enum": [
        "always",
        "alwaysNewWindow",
        "prompt",
        "whenNoFolderOpen"
      ],
      "enumDescriptions": [
        "Always open in current window.",
        "Always open in a new window.",
        "Always prompt for action.",
        "Only open in current window when no folder is opened."
      ],
      "default": "prompt",
      "description": "Controls whether to open a repository automatically after cloning.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "prompt",
      "restricted": false
    },
    "git.openDiffOnClick": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.openRepositoryInParentFolders": {
      "type": "string",
      "enum": [
        "always",
        "never",
        "prompt"
      ],
      "enumDescriptions": [
        "Always open a repository in parent folders of workspaces or open files.",
        "Never open a repository in parent folders of workspaces or open files.",
        "Prompt before opening a repository the parent folders of workspaces or open files."
      ],
      "default": "prompt",
      "markdownDescription": "Control whether a repository in parent folders of workspaces or open files should be opened.",
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "prompt",
      "restricted": false
    },
    "git.optimisticUpdate": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether to optimistically update the state of the Source Control view after running git commands.",
      "scope": 5,
      "tags": [
        "experimental"
      ],
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.path": {
      "type": [
        "string",
        "null",
        "array"
      ],
      "markdownDescription": "Path and filename of the git executable, e.g. `C:\\Program Files\\Git\\bin\\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.",
      "default": null,
      "scope": 2,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": null,
      "restricted": false
    },
    "git.postCommitCommand": {
      "type": "string",
      "enum": [
        "none",
        "push",
        "sync"
      ],
      "enumDescriptions": [
        "Don't run any command after a commit.",
        "Run 'git push' after a successful commit.",
        "Run 'git pull' and 'git push' after a successful commit."
      ],
      "markdownDescription": "Run a git command after a successful commit.",
      "scope": 5,
      "default": "none",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "none",
      "restricted": false
    },
    "git.promptToSaveFilesBeforeCommit": {
      "type": "string",
      "enum": [
        "always",
        "never",
        "staged"
      ],
      "enumDescriptions": [
        "Check for any unsaved files.",
        "Disable this check.",
        "Check only for unsaved staged files."
      ],
      "scope": 5,
      "default": "always",
      "description": "Controls whether Git should check for unsaved files before committing.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "always",
      "restricted": false
    },
    "git.promptToSaveFilesBeforeStash": {
      "type": "string",
      "enum": [
        "always",
        "never",
        "staged"
      ],
      "enumDescriptions": [
        "Check for any unsaved files.",
        "Disable this check.",
        "Check only for unsaved staged files."
      ],
      "scope": 5,
      "default": "always",
      "description": "Controls whether Git should check for unsaved files before stashing changes.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "always",
      "restricted": false
    },
    "git.pruneOnFetch": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Prune when fetching.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.pullBeforeCheckout": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.pullTags": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Fetch all tags when pulling.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.rebaseWhenSync": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Force Git to use rebase when running the sync command.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.rememberPostCommitCommand": {
      "type": "boolean",
      "description": "Remember the last git command that ran after a commit.",
      "scope": 5,
      "default": false,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.replaceTagsWhenPull": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Automatically replace the local tags with the remote tags in case of a conflict when running the pull command.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.repositoryScanIgnoredFolders": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [
        "node_modules"
      ],
      "scope": 5,
      "markdownDescription": "List of folders that are ignored while scanning for Git repositories when `#git.autoRepositoryDetection#` is set to `true` or `subFolders`.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": [
        "node_modules"
      ],
      "restricted": false
    },
    "git.repositoryScanMaxDepth": {
      "type": "number",
      "scope": 5,
      "default": 1,
      "markdownDescription": "Controls the depth used when scanning workspace folders for Git repositories when `#git.autoRepositoryDetection#` is set to `true` or `subFolders`. Can be set to `-1` for no limit.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": 1,
      "restricted": false
    },
    "git.requireGitUserConfig": {
      "type": "boolean",
      "description": "Controls whether to require explicit Git user configuration or allow Git to guess if missing.",
      "default": true,
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.scanRepositories": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "scope": 5,
      "description": "List of paths to search for Git repositories in.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": [],
      "restricted": false
    },
    "git.showActionButton": {
      "type": "object",
      "additionalProperties": false,
      "description": "Controls whether an action button is shown in the Source Control view.",
      "properties": {
        "commit": {
          "type": "boolean",
          "description": "Show an action button to commit changes when the local branch has modified files ready to be committed."
        },
        "publish": {
          "type": "boolean",
          "description": "Show an action button to publish the local branch when it does not have a tracking remote branch."
        },
        "sync": {
          "type": "boolean",
          "description": "Show an action button to synchronize changes when the local branch is either ahead or behind the remote branch."
        }
      },
      "default": {
        "commit": true,
        "publish": true,
        "sync": true
      },
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": {
        "commit": true,
        "publish": true,
        "sync": true
      },
      "restricted": false
    },
    "git.showCommitInput": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Controls whether to show the commit input in the Git source control panel.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.showInlineOpenFileAction": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to show an inline Open File action in the Git changes view.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.showProgress": {
      "type": "boolean",
      "description": "Controls whether Git actions should show progress.",
      "default": true,
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.showPushSuccessNotification": {
      "type": "boolean",
      "description": "Controls whether to show a notification when a push is successful.",
      "default": false,
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.showReferenceDetails": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether to show the details of the last commit for Git refs in the checkout, branch, and tag pickers.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.similarityThreshold": {
      "type": "number",
      "default": 50,
      "minimum": 0,
      "maximum": 100,
      "markdownDescription": "Controls the threshold of the similarity index (the amount of additions/deletions compared to the file's size) for changes in a pair of added/deleted files to be considered a rename. **Note:** Requires Git version `2.18.0` or later.",
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": 50,
      "restricted": false
    },
    "git.smartCommitChanges": {
      "type": "string",
      "enum": [
        "all",
        "tracked"
      ],
      "enumDescriptions": [
        "Automatically stage all changes.",
        "Automatically stage tracked changes only."
      ],
      "scope": 5,
      "description": "Control which changes are automatically staged by Smart Commit.",
      "default": "all",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "all",
      "restricted": false
    },
    "git.statusLimit": {
      "type": "number",
      "scope": 5,
      "default": 10000,
      "description": "Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": 10000,
      "restricted": false
    },
    "git.suggestSmartCommit": {
      "type": "boolean",
      "scope": 5,
      "description": "Suggests to enable smart commit (commit all changes when there are no staged changes).",
      "default": true,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.supportCancellation": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.terminalAuthentication": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.terminalGitEditor": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.timeline.date": {
      "type": "string",
      "enum": [
        "authored",
        "committed"
      ],
      "enumDescriptions": [
        "Use the authored date",
        "Use the committed date"
      ],
      "default": "committed",
      "description": "Controls which date to use for items in the Timeline view.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "committed",
      "restricted": false
    },
    "git.timeline.showAuthor": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to show the commit author in the Timeline view.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.timeline.showUncommitted": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether to show uncommitted changes in the Timeline view.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.untrackedChanges": {
      "type": "string",
      "enum": [
        "hidden",
        "mixed",
        "separate"
      ],
      "enumDescriptions": [
        "Untracked changes are hidden and excluded from several actions.",
        "All changes, tracked and untracked, appear together and behave equally.",
        "Untracked changes appear separately in the Source Control view. They are also excluded from several actions."
      ],
      "default": "mixed",
      "description": "Controls how untracked changes behave.",
      "scope": 5,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": "mixed",
      "restricted": false
    },
    "git.useCommitInputAsStashMessage": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Controls whether to use the message from the commit input box as the default stash message.",
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "git.useEditorAsCommitInput": {
      "type": "boolean",
      "description": "Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.",
      "default": true,
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.useForcePushIfIncludes": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether force pushing uses the safer force-if-includes variant. Note: This setting requires the `#git.useForcePushWithLease#` setting to be enabled, and Git version `2.30.0` or later.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.useForcePushWithLease": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether force pushing uses the safer force-with-lease variant.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.useIntegratedAskPass": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether GIT_ASKPASS should be overwritten to use the integrated version.",
      "scope": 4,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "git.verboseCommit": {
      "type": "boolean",
      "scope": 5,
      "markdownDescription": "Enable verbose output when `#git.useEditorAsCommitInput#` is enabled.",
      "default": false,
      "source": {
        "id": "vscode.git",
        "displayName": "Git"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "github-enterprise.uri": {
      "type": "string",
      "markdownDescription": "The URI for your GHE.com or GitHub Enterprise Server instance.\n\nExamples:\n* GHE.com: `https://octocat.ghe.com`\n* GitHub Enterprise Server: `https://github.octocat.com`\n\n> **Note:** This should _not_ be set to a GitHub.com URI. If your account exists on GitHub.com or is a GitHub Enterprise Managed User, you do not need any additional configuration and can simply log in to GitHub.",
      "pattern": "^(?:$|(https?)://(?!github\\.com).*)",
      "scope": 4,
      "source": {
        "id": "vscode.github-authentication",
        "displayName": "GitHub Authentication"
      },
      "default": "",
      "restricted": true
    },
    "github.branchProtection": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Controls whether to query repository rules for GitHub repositories",
      "source": {
        "id": "vscode.github",
        "displayName": "GitHub"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "github.copilot.chat.agent.terminal.allowList": {
      "$ref": "#/$defs/_287"
    },
    "github.copilot.chat.agent.terminal.denyList": {
      "$ref": "#/$defs/_287"
    },
    "github.gitAuthentication": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Controls whether to enable automatic GitHub authentication for git commands within VS Code.",
      "source": {
        "id": "vscode.github",
        "displayName": "GitHub"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "github.gitProtocol": {
      "type": "string",
      "enum": [
        "https",
        "ssh"
      ],
      "default": "https",
      "description": "Controls which protocol is used to clone a GitHub repository",
      "scope": 4,
      "source": {
        "id": "vscode.github",
        "displayName": "GitHub"
      },
      "defaultDefaultValue": "https",
      "restricted": false
    },
    "github.showAvatar": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Controls whether to show the GitHub avatar of the commit author in various hovers (ex: Git blame, Timeline, Source Control Graph, etc.)",
      "source": {
        "id": "vscode.github",
        "displayName": "GitHub"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "html.autoClosingTags": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Enable/disable autoclosing of HTML tags.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "html.autoCreateQuotes": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "markdownDescription": "Enable/disable auto creation of quotes for HTML attribute assignment. The type of quotes can be configured by `#html.completion.attributeDefaultValue#`.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "html.completion.attributeDefaultValue": {
      "type": "string",
      "scope": 5,
      "enum": [
        "doublequotes",
        "empty",
        "singlequotes"
      ],
      "enumDescriptions": [
        "Attribute value is set to \"\".",
        "Attribute value is not set.",
        "Attribute value is set to ''."
      ],
      "default": "doublequotes",
      "markdownDescription": "Controls the default value for attributes when completion is accepted.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": "doublequotes",
      "restricted": false
    },
    "html.customData": {
      "type": "array",
      "markdownDescription": "A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).\n\nVS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.\n\nThe file paths are relative to workspace and only workspace folder settings are considered.",
      "default": [],
      "items": {
        "type": "string"
      },
      "scope": 5,
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": [],
      "restricted": false
    },
    "html.format.contentUnformatted": {
      "type": [
        "string",
        "null"
      ],
      "scope": 5,
      "default": "pre,code,textarea",
      "markdownDescription": "List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": "pre,code,textarea",
      "restricted": false
    },
    "html.format.enable": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Enable/disable default HTML formatter.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "html.format.extraLiners": {
      "type": [
        "string",
        "null"
      ],
      "scope": 5,
      "default": "head, body, /html",
      "markdownDescription": "List of tags, comma separated, that should have an extra newline before them. `null` defaults to `\"head, body, /html\"`.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": "head, body, /html",
      "restricted": false
    },
    "html.format.indentHandlebars": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "markdownDescription": "Format and indent `{{#foo}}` and `{{/foo}}`.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "html.format.indentInnerHtml": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "markdownDescription": "Indent `<head>` and `<body>` sections.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "html.format.maxPreserveNewLines": {
      "type": [
        "number",
        "null"
      ],
      "scope": 5,
      "default": null,
      "markdownDescription": "Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": null,
      "restricted": false
    },
    "html.format.preserveNewLines": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "html.format.templating": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Honor django, erb, handlebars and php templating language tags.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "html.format.unformatted": {
      "type": [
        "string",
        "null"
      ],
      "scope": 5,
      "default": "wbr",
      "markdownDescription": "List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": "wbr",
      "restricted": false
    },
    "html.format.unformattedContentDelimiter": {
      "type": "string",
      "scope": 5,
      "default": "",
      "markdownDescription": "Keep text content together between this string.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": "",
      "restricted": false
    },
    "html.format.wrapAttributes": {
      "type": "string",
      "scope": 5,
      "default": "auto",
      "enum": [
        "aligned-multiple",
        "auto",
        "force",
        "force-aligned",
        "force-expand-multiline",
        "preserve",
        "preserve-aligned"
      ],
      "enumDescriptions": [
        "Wrap when line length is exceeded, align attributes vertically.",
        "Wrap attributes only when line length is exceeded.",
        "Wrap each attribute except first.",
        "Wrap each attribute except first and keep aligned.",
        "Wrap each attribute.",
        "Preserve wrapping of attributes.",
        "Preserve wrapping of attributes but align."
      ],
      "description": "Wrap attributes.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "html.format.wrapAttributesIndentSize": {
      "type": [
        "number",
        "null"
      ],
      "scope": 5,
      "default": null,
      "markdownDescription": "Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `#html.format.wrapAttributes#` is set to `aligned`.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": null,
      "restricted": false
    },
    "html.format.wrapLineLength": {
      "type": "integer",
      "scope": 5,
      "default": 120,
      "description": "Maximum amount of characters per line (0 = disable).",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": 120,
      "restricted": false
    },
    "html.hover.documentation": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Show tag and attribute documentation in hover.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "html.hover.references": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Show references to MDN in hover.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "html.mirrorCursorOnMatchingTag": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "description": "Enable/disable mirroring cursor on matching HTML tag.",
      "deprecationMessage": "Deprecated in favor of `editor.linkedEditing`",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "html.suggest.html5": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "html.trace.server": {
      "type": "string",
      "scope": 4,
      "enum": [
        "messages",
        "off",
        "verbose"
      ],
      "default": "off",
      "description": "Traces the communication between VS Code and the HTML language server.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": "off",
      "restricted": false
    },
    "html.validate.scripts": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Controls whether the built-in HTML language support validates embedded scripts.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "html.validate.styles": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Controls whether the built-in HTML language support validates embedded styles.",
      "source": {
        "id": "vscode.html-language-features",
        "displayName": "HTML Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "http.useLocalProxyConfiguration": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether in the remote extension host the local proxy configuration should be used. This setting only applies as a remote setting during [remote development](https://aka.ms/vscode-remote).",
      "restricted": true,
      "defaultDefaultValue": true,
      "scope": 2
    },
    "inlineChat.accessibleDiffView": {
      "description": "Whether the inline chat also renders an accessible diff viewer for its changes.",
      "default": "auto",
      "type": "string",
      "enum": [
        "auto",
        "off",
        "on"
      ],
      "markdownEnumDescriptions": [
        "The accessible diff viewer is based on screen reader mode being enabled.",
        "The accessible diff viewer is never enabled.",
        "The accessible diff viewer is always enabled."
      ],
      "defaultDefaultValue": "auto",
      "scope": 4,
      "restricted": false
    },
    "inlineChat.enableV2": {
      "description": "Whether to use the next version of inline chat.",
      "default": false,
      "type": "boolean",
      "tags": [
        "preview",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "inlineChat.finishOnType": {
      "description": "Whether to finish an inline chat session when typing outside of changed regions.",
      "default": false,
      "type": "boolean",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "inlineChat.hideOnRequest": {
      "markdownDescription": "Whether to hide the inline chat widget after making a request. When enabled, the widget hides after a request has been made and instead the chat overlay shows. When hidden, the widget can always be shown again with the inline chat keybinding or from the chat overlay widget. *Note* that this setting requires `#inlineChat.enableV2#` to be enabled.",
      "default": false,
      "type": "boolean",
      "tags": [
        "preview",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "inlineChat.holdToSpeech": {
      "description": "Whether holding the inline chat keybinding will automatically enable speech recognition.",
      "default": true,
      "type": "boolean",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "inlineChat.lineEmptyHint": {
      "description": "Whether empty lines show a hint to generate code with inline chat.",
      "default": false,
      "type": "boolean",
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "inlineChat.lineNaturalLanguageHint": {
      "markdownDescription": "Whether lines that are dominated by natural language or pseudo code show a hint to continue with inline chat. For instance, `class Person with name and hobbies` would show a hint to continue with chat.",
      "default": true,
      "type": "boolean",
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "inlineChat.notebookAgent": {
      "markdownDescription": "Enable agent-like behavior for inline chat widget in notebooks. Depends on the `#inlineChat.enableV2#` setting being enabled.",
      "default": false,
      "type": "boolean",
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "interactiveWindow.alwaysScrollOnNewCell": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "interactiveWindow.collapseCellInputCode": {
      "markdownDescription": "Controls whether code cells in the interactive window are collapsed by default.",
      "type": "string",
      "enum": [
        "always",
        "fromEditor",
        "never"
      ],
      "default": "fromEditor",
      "defaultDefaultValue": "fromEditor",
      "scope": 4,
      "restricted": false
    },
    "interactiveWindow.executeWithShiftEnter": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Execute the Interactive Window (REPL) input box with shift+enter, so that enter can be used to create a newline.",
      "tags": [
        "replExecute"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "interactiveWindow.promptToSaveOnClose": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Prompt to save the interactive window when it is closed. Only new interactive windows will be affected by this setting change.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "interactiveWindow.showExecutionHint": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Display a hint in the Interactive Window (REPL) input box to indicate how to execute code.",
      "tags": [
        "replExecute"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "ipynb.experimental.serialization": {
      "type": "boolean",
      "scope": 5,
      "markdownDescription": "Experimental feature to serialize the Jupyter notebook in a worker thread.",
      "default": true,
      "tags": [
        "experimental"
      ],
      "source": {
        "id": "vscode.ipynb",
        "displayName": ".ipynb Support"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "ipynb.pasteImagesAsAttachments.enabled": {
      "type": "boolean",
      "scope": 5,
      "markdownDescription": "Enable/disable pasting of images into Markdown cells in ipynb notebook files. Pasted images are inserted as attachments to the cell.",
      "default": true,
      "source": {
        "id": "vscode.ipynb",
        "displayName": ".ipynb Support"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "javascript.autoClosingTags": {
      "$ref": "#/$defs/_361"
    },
    "javascript.format.enable": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable default JavaScript formatter.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "javascript.format.indentSwitchCase": {
      "$ref": "#/$defs/_394"
    },
    "javascript.format.insertSpaceAfterCommaDelimiter": {
      "$ref": "#/$defs/_378"
    },
    "javascript.format.insertSpaceAfterConstructor": {
      "$ref": "#/$defs/_379"
    },
    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
      "$ref": "#/$defs/_383"
    },
    "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
      "$ref": "#/$defs/_382"
    },
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": {
      "$ref": "#/$defs/_388"
    },
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
      "$ref": "#/$defs/_390"
    },
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
      "$ref": "#/$defs/_387"
    },
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
      "$ref": "#/$defs/_386"
    },
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
      "$ref": "#/$defs/_385"
    },
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
      "$ref": "#/$defs/_389"
    },
    "javascript.format.insertSpaceAfterSemicolonInForStatements": {
      "$ref": "#/$defs/_380"
    },
    "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": {
      "$ref": "#/$defs/_381"
    },
    "javascript.format.insertSpaceBeforeFunctionParenthesis": {
      "$ref": "#/$defs/_384"
    },
    "javascript.format.placeOpenBraceOnNewLineForControlBlocks": {
      "$ref": "#/$defs/_392"
    },
    "javascript.format.placeOpenBraceOnNewLineForFunctions": {
      "$ref": "#/$defs/_391"
    },
    "javascript.format.semicolons": {
      "$ref": "#/$defs/_393"
    },
    "javascript.inlayHints.functionLikeReturnTypes.enabled": {
      "$ref": "#/$defs/_401"
    },
    "javascript.inlayHints.parameterNames.enabled": {
      "$ref": "#/$defs/_395"
    },
    "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
      "$ref": "#/$defs/_396"
    },
    "javascript.inlayHints.parameterTypes.enabled": {
      "$ref": "#/$defs/_397"
    },
    "javascript.inlayHints.propertyDeclarationTypes.enabled": {
      "$ref": "#/$defs/_400"
    },
    "javascript.inlayHints.variableTypes.enabled": {
      "$ref": "#/$defs/_398"
    },
    "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": {
      "$ref": "#/$defs/_399"
    },
    "javascript.preferences.autoImportFileExcludePatterns": {
      "$ref": "#/$defs/_374"
    },
    "javascript.preferences.autoImportSpecifierExcludeRegexes": {
      "$ref": "#/$defs/_375"
    },
    "javascript.preferences.importModuleSpecifier": {
      "$ref": "#/$defs/_372"
    },
    "javascript.preferences.importModuleSpecifierEnding": {
      "$ref": "#/$defs/_373"
    },
    "javascript.preferences.jsxAttributeCompletionStyle": {
      "type": "string",
      "enum": [
        "auto",
        "braces",
        "none"
      ],
      "markdownEnumDescriptions": [
        "Insert `={}` or `=\"\"` after attribute names based on the prop type. See `#javascript.preferences.quoteStyle#` to control the type of quotes used for string attributes.",
        "Insert `={}` after attribute names.",
        "Only insert attribute names."
      ],
      "default": "auto",
      "description": "Preferred style for JSX attribute completions.",
      "scope": 6,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "javascript.preferences.organizeImports": {
      "$ref": "#/$defs/_325"
    },
    "javascript.preferences.quoteStyle": {
      "$ref": "#/$defs/_371"
    },
    "javascript.preferences.renameMatchingJsxTags": {
      "$ref": "#/$defs/_377"
    },
    "javascript.preferences.useAliasesForRenames": {
      "$ref": "#/$defs/_376"
    },
    "javascript.preferGoToSourceDefinition": {
      "$ref": "#/$defs/_323"
    },
    "javascript.referencesCodeLens.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable references CodeLens in JavaScript files.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "javascript.referencesCodeLens.showOnAllFunctions": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable references CodeLens on all functions in JavaScript files.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "javascript.suggest.autoImports": {
      "$ref": "#/$defs/_363"
    },
    "javascript.suggest.classMemberSnippets.enabled": {
      "$ref": "#/$defs/_370"
    },
    "javascript.suggest.completeFunctionCalls": {
      "$ref": "#/$defs/_364"
    },
    "javascript.suggest.completeJSDocs": {
      "$ref": "#/$defs/_366"
    },
    "javascript.suggest.enabled": {
      "$ref": "#/$defs/_362"
    },
    "javascript.suggest.includeAutomaticOptionalChainCompletions": {
      "$ref": "#/$defs/_368"
    },
    "javascript.suggest.includeCompletionsForImportStatements": {
      "$ref": "#/$defs/_369"
    },
    "javascript.suggest.jsdoc.generateReturns": {
      "$ref": "#/$defs/_367"
    },
    "javascript.suggest.names": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "javascript.suggest.paths": {
      "$ref": "#/$defs/_365"
    },
    "javascript.suggestionActions.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable suggestion diagnostics for JavaScript files in the editor.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "javascript.updateImportsOnFileMove.enabled": {
      "$ref": "#/$defs/_360"
    },
    "javascript.updateImportsOnPaste.enabled": {
      "$ref": "#/$defs/_324"
    },
    "javascript.validate.enable": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable JavaScript validation.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "js/ts.hover.maximumLength": {
      "type": "number",
      "default": 500,
      "description": "The maximum number of characters in a hover. If the hover is longer than this, it will be truncated. Requires TypeScript 5.9+.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": 500,
      "restricted": false
    },
    "js/ts.implicitProjectConfig.checkJs": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "js/ts.implicitProjectConfig.experimentalDecorators": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "js/ts.implicitProjectConfig.module": {
      "type": "string",
      "markdownDescription": "Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.",
      "default": "ESNext",
      "enum": [
        "AMD",
        "CommonJS",
        "ES2015",
        "ES2020",
        "ES2022",
        "ES6",
        "ESNext",
        "Node12",
        "NodeNext",
        "None",
        "System",
        "UMD"
      ],
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "ESNext",
      "restricted": false
    },
    "js/ts.implicitProjectConfig.strictFunctionTypes": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "js/ts.implicitProjectConfig.strictNullChecks": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "js/ts.implicitProjectConfig.target": {
      "type": "string",
      "default": "ES2022",
      "markdownDescription": "Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.",
      "enum": [
        "ES2015",
        "ES2016",
        "ES2017",
        "ES2018",
        "ES2019",
        "ES2020",
        "ES2021",
        "ES2022",
        "ES2023",
        "ES2024",
        "ES3",
        "ES5",
        "ES6",
        "ESNext"
      ],
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "ES2022",
      "restricted": false
    },
    "json.colorDecorators.enable": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Enables or disables color decorators",
      "deprecationMessage": "The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.",
      "source": {
        "id": "vscode.json-language-features",
        "displayName": "JSON Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "json.format.enable": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Enable/disable default JSON formatter",
      "source": {
        "id": "vscode.json-language-features",
        "displayName": "JSON Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "json.format.keepLines": {
      "type": "boolean",
      "scope": 4,
      "default": false,
      "description": "Keep all existing new lines when formatting.",
      "source": {
        "id": "vscode.json-language-features",
        "displayName": "JSON Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "json.maxItemsComputed": {
      "type": "number",
      "default": 5000,
      "description": "The maximum number of outline symbols and folding regions computed (limited for performance reasons).",
      "scope": 4,
      "source": {
        "id": "vscode.json-language-features",
        "displayName": "JSON Language Features"
      },
      "defaultDefaultValue": 5000,
      "restricted": false
    },
    "json.schemaDownload.enable": {
      "type": "boolean",
      "default": true,
      "description": "When enabled, JSON schemas can be fetched from http and https locations.",
      "tags": [
        "usesOnlineServices"
      ],
      "scope": 4,
      "source": {
        "id": "vscode.json-language-features",
        "displayName": "JSON Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "json.schemas": {
      "type": "array",
      "scope": 5,
      "description": "Associate schemas to JSON files in the current project.",
      "items": {
        "type": "object",
        "default": {
          "fileMatch": [
            "/myfile"
          ],
          "url": "schemaURL"
        },
        "properties": {
          "fileMatch": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "MyFile.json",
              "description": "A file pattern that can contain '*' and '**' to match against when resolving JSON files to schemas. When beginning with '!', it defines an exclusion pattern."
            },
            "minItems": 1,
            "description": "An array of file patterns to match against when resolving JSON files to schemas. `*` and '**' can be used as a wildcard. Exclusion patterns can also be defined and start with '!'. A file matches when there is at least one matching pattern and the last matching pattern is not an exclusion pattern."
          },
          "schema": {
            "$ref": "http://json-schema.org/draft-07/schema#",
            "description": "The schema definition for the given URL. The schema only needs to be provided to avoid accesses to the schema URL."
          },
          "url": {
            "type": "string",
            "default": "/user.schema.json",
            "description": "A URL or absolute file path to a schema. Can be a relative path (starting with './') in workspace and workspace folder settings."
          }
        }
      },
      "source": {
        "id": "vscode.json-language-features",
        "displayName": "JSON Language Features"
      },
      "default": [],
      "restricted": false
    },
    "json.trace.server": {
      "type": "string",
      "scope": 4,
      "enum": [
        "messages",
        "off",
        "verbose"
      ],
      "default": "off",
      "description": "Traces the communication between VS Code and the JSON language server.",
      "source": {
        "id": "vscode.json-language-features",
        "displayName": "JSON Language Features"
      },
      "defaultDefaultValue": "off",
      "restricted": false
    },
    "json.validate.enable": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Enable/disable JSON validation.",
      "source": {
        "id": "vscode.json-language-features",
        "displayName": "JSON Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "launch": {
      "type": "object",
      "description": "Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.",
      "default": {
        "compounds": [],
        "configurations": []
      },
      "$ref": "vscode://schemas/launch",
      "disallowConfigurationDefault": true,
      "defaultDefaultValue": {
        "compounds": [],
        "configurations": []
      },
      "scope": 4,
      "restricted": false
    },
    "less.completion.completePropertyWithSemicolon": {
      "$ref": "#/$defs/_333"
    },
    "less.completion.triggerPropertyValueCompletion": {
      "$ref": "#/$defs/_332"
    },
    "less.format.braceStyle": {
      "$ref": "#/$defs/_358"
    },
    "less.format.enable": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Enable/disable default LESS formatter.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "less.format.maxPreserveNewLines": {
      "type": [
        "number",
        "null"
      ],
      "scope": 5,
      "default": null,
      "markdownDescription": "Maximum number of line breaks to be preserved in one chunk, when `#less.format.preserveNewLines#` is enabled.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": null,
      "restricted": false
    },
    "less.format.newlineBetweenRules": {
      "$ref": "#/$defs/_356"
    },
    "less.format.newlineBetweenSelectors": {
      "$ref": "#/$defs/_355"
    },
    "less.format.preserveNewLines": {
      "$ref": "#/$defs/_359"
    },
    "less.format.spaceAroundSelectorSeparator": {
      "$ref": "#/$defs/_357"
    },
    "less.hover.documentation": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Show property and value documentation in LESS hovers.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "less.hover.references": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Show references to MDN in LESS hovers.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "less.lint.argumentsInColorFunction": {
      "$ref": "#/$defs/_345"
    },
    "less.lint.boxModel": {
      "$ref": "#/$defs/_340"
    },
    "less.lint.compatibleVendorPrefixes": {
      "$ref": "#/$defs/_335"
    },
    "less.lint.duplicateProperties": {
      "$ref": "#/$defs/_337"
    },
    "less.lint.emptyRules": {
      "$ref": "#/$defs/_338"
    },
    "less.lint.float": {
      "$ref": "#/$defs/_352"
    },
    "less.lint.fontFaceProperties": {
      "$ref": "#/$defs/_343"
    },
    "less.lint.hexColorLength": {
      "$ref": "#/$defs/_344"
    },
    "less.lint.idSelector": {
      "$ref": "#/$defs/_353"
    },
    "less.lint.ieHack": {
      "$ref": "#/$defs/_348"
    },
    "less.lint.important": {
      "$ref": "#/$defs/_351"
    },
    "less.lint.importStatement": {
      "$ref": "#/$defs/_339"
    },
    "less.lint.propertyIgnoredDueToDisplay": {
      "$ref": "#/$defs/_350"
    },
    "less.lint.universalSelector": {
      "$ref": "#/$defs/_341"
    },
    "less.lint.unknownAtRules": {
      "$ref": "#/$defs/_354"
    },
    "less.lint.unknownProperties": {
      "$ref": "#/$defs/_346"
    },
    "less.lint.unknownVendorSpecificProperties": {
      "$ref": "#/$defs/_349"
    },
    "less.lint.validProperties": {
      "$ref": "#/$defs/_347"
    },
    "less.lint.vendorPrefix": {
      "$ref": "#/$defs/_336"
    },
    "less.lint.zeroUnits": {
      "$ref": "#/$defs/_342"
    },
    "less.validate": {
      "$ref": "#/$defs/_334"
    },
    "markdown.copyFiles.destination": {
      "type": "object",
      "markdownDescription": "Configures the path and file name of files created by copy/paste or drag and drop. This is a map of globs that match against a Markdown document path to the destination path where the new file should be created.\n\nThe destination path may use the following variables:\n\n- `${documentDirName}` — Absolute parent directory path of the Markdown document, e.g. `/Users/me/myProject/docs`.\n- `${documentRelativeDirName}` — Relative parent directory path of the Markdown document, e.g. `docs`. This is the same as `${documentDirName}` if the file is not part of a workspace.\n- `${documentFileName}` — The full filename of the Markdown document, e.g. `README.md`.\n- `${documentBaseName}` — The basename of the Markdown document, e.g. `README`.\n- `${documentExtName}` — The extension of the Markdown document, e.g. `md`.\n- `${documentFilePath}` — Absolute path of the Markdown document, e.g. `/Users/me/myProject/docs/README.md`.\n- `${documentRelativeFilePath}` — Relative path of the Markdown document, e.g. `docs/README.md`. This is the same as `${documentFilePath}` if the file is not part of a workspace.\n- `${documentWorkspaceFolder}` — The workspace folder for the Markdown document, e.g. `/Users/me/myProject`. This is the same as `${documentDirName}` if the file is not part of a workspace.\n- `${fileName}` — The file name of the dropped file, e.g. `image.png`.\n- `${fileExtName}` — The extension of the dropped file, e.g. `png`.\n- `${unixTime}` — The current Unix timestamp in milliseconds.\n- `${isoTime}` — The current time in ISO 8601 format, e.g. '2025-06-06T08:40:32.123Z'.",
      "additionalProperties": {
        "type": "string"
      },
      "scope": 4,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "default": {},
      "restricted": false
    },
    "markdown.copyFiles.overwriteBehavior": {
      "type": "string",
      "markdownDescription": "Controls if files created by drop or paste should overwrite existing files.",
      "default": "nameIncrementally",
      "enum": [
        "nameIncrementally",
        "overwrite"
      ],
      "markdownEnumDescriptions": [
        "If a file with the same name already exists, append a number to the file name, for example: `image.png` becomes `image-1.png`.",
        "If a file with the same name already exists, overwrite it."
      ],
      "scope": 4,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "nameIncrementally",
      "restricted": false
    },
    "markdown.editor.drop.copyIntoWorkspace": {
      "type": "string",
      "markdownDescription": "Controls if files outside of the workspace that are dropped into a Markdown editor should be copied into the workspace.\n\nUse `#markdown.copyFiles.destination#` to configure where copied dropped files should be created",
      "default": "mediaFiles",
      "enum": [
        "mediaFiles",
        "never"
      ],
      "markdownEnumDescriptions": [
        "Try to copy external image and video files into the workspace.",
        "Do not copy external files into the workspace."
      ],
      "scope": 4,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "mediaFiles",
      "restricted": false
    },
    "markdown.editor.drop.enabled": {
      "type": "string",
      "scope": 5,
      "markdownDescription": "Enable dropping files into a Markdown editor while holding Shift. Requires enabling `#editor.dropIntoEditor.enabled#`.",
      "default": "smart",
      "enum": [
        "always",
        "never",
        "smart"
      ],
      "markdownEnumDescriptions": [
        "Always insert Markdown links.",
        "Never create Markdown links.",
        "Smartly create Markdown links by default when not dropping into a code block or other special element. Use the drop widget to switch between pasting as plain text or as Markdown links."
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "smart",
      "restricted": false
    },
    "markdown.editor.filePaste.audioSnippet": {
      "type": "string",
      "markdownDescription": "Snippet used when adding audio to Markdown. This snippet can use the following variables:\n- `${src}` — The resolved path of the audio  file.\n- `${title}` — The title used for the audio. A snippet placeholder will automatically be created for this variable.",
      "default": "<audio controls src=\"${src}\" title=\"${title}\"></audio>",
      "scope": 4,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "<audio controls src=\"${src}\" title=\"${title}\"></audio>",
      "restricted": false
    },
    "markdown.editor.filePaste.copyIntoWorkspace": {
      "type": "string",
      "markdownDescription": "Controls if files outside of the workspace that are pasted into a Markdown editor should be copied into the workspace.\n\nUse `#markdown.copyFiles.destination#` to configure where copied files should be created.",
      "default": "mediaFiles",
      "enum": [
        "mediaFiles",
        "never"
      ],
      "markdownEnumDescriptions": [
        "Try to copy external image and video files into the workspace.",
        "Do not copy external files into the workspace."
      ],
      "scope": 4,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "mediaFiles",
      "restricted": false
    },
    "markdown.editor.filePaste.enabled": {
      "type": "string",
      "scope": 5,
      "markdownDescription": "Enable pasting files into a Markdown editor to create Markdown links. Requires enabling `#editor.pasteAs.enabled#`.",
      "default": "smart",
      "enum": [
        "always",
        "never",
        "smart"
      ],
      "markdownEnumDescriptions": [
        "Always insert Markdown links.",
        "Never create Markdown links.",
        "Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links."
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "smart",
      "restricted": false
    },
    "markdown.editor.filePaste.videoSnippet": {
      "type": "string",
      "markdownDescription": "Snippet used when adding videos to Markdown. This snippet can use the following variables:\n- `${src}` — The resolved path of the video file.\n- `${title}` — The title used for the video. A snippet placeholder will automatically be created for this variable.",
      "default": "<video controls src=\"${src}\" title=\"${title}\"></video>",
      "scope": 4,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "<video controls src=\"${src}\" title=\"${title}\"></video>",
      "restricted": false
    },
    "markdown.editor.pasteUrlAsFormattedLink.enabled": {
      "type": "string",
      "scope": 5,
      "markdownDescription": "Controls if Markdown links are created when URLs are pasted into a Markdown editor. Requires enabling `#editor.pasteAs.enabled#`.",
      "default": "smartWithSelection",
      "enum": [
        "always",
        "never",
        "smart",
        "smartWithSelection"
      ],
      "markdownEnumDescriptions": [
        "Always insert Markdown links.",
        "Never create Markdown links.",
        "Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.",
        "Smartly create Markdown links by default when you have selected text and are not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links."
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "smartWithSelection",
      "restricted": false
    },
    "markdown.editor.updateLinksOnPaste.enabled": {
      "type": "boolean",
      "markdownDescription": "Enable/disable a paste option that updates links and reference in text that is copied and pasted between Markdown editors.\n\nTo use this feature, after pasting text that contains updatable links, just click on the Paste Widget and select `Paste and update pasted links`.",
      "scope": 5,
      "default": true,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "markdown.links.openLocation": {
      "type": "string",
      "default": "currentGroup",
      "description": "Controls where links in Markdown files should be opened.",
      "scope": 5,
      "enum": [
        "beside",
        "currentGroup"
      ],
      "enumDescriptions": [
        "Open links beside the active editor.",
        "Open links in the active editor group."
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "currentGroup",
      "restricted": false
    },
    "markdown.math.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable rendering math in the built-in Markdown preview.",
      "scope": 4,
      "source": {
        "id": "vscode.markdown-math",
        "displayName": "Markdown Math"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "markdown.math.macros": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "default": {},
      "description": "A collection of custom macros. Each macro is a key-value pair where the key is a new command name and the value is the expansion of the macro.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-math",
        "displayName": "Markdown Math"
      },
      "defaultDefaultValue": {},
      "restricted": false
    },
    "markdown.occurrencesHighlight.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Enable highlighting link occurrences in the current document.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "markdown.preferredMdPathExtensionStyle": {
      "type": "string",
      "default": "auto",
      "markdownDescription": "Controls if file extensions (for example `.md`) are added or not for links to Markdown files. This setting is used when file paths are added by tooling such as path completions or file renames.",
      "enum": [
        "auto",
        "includeExtension",
        "removeExtension"
      ],
      "markdownEnumDescriptions": [
        "For existing paths, try to maintain the file extension style. For new paths, add file extensions.",
        "Prefer including the file extension. For example, path completions to a file named `file.md` will insert `file.md`.",
        "Prefer removing the file extension. For example, path completions to a file named `file.md` will insert `file` without the `.md`."
      ],
      "scope": 4,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "markdown.preview.breaks": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Sets how line-breaks are rendered in the Markdown preview. Setting it to `true` creates a `<br>` for newlines inside paragraphs.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "markdown.preview.doubleClickToSwitchToEditor": {
      "type": "boolean",
      "default": true,
      "description": "Double-click in the Markdown preview to switch to the editor.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "markdown.preview.fontFamily": {
      "type": "string",
      "default": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",
      "description": "Controls the font family used in the Markdown preview.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",
      "restricted": false
    },
    "markdown.preview.fontSize": {
      "type": "number",
      "default": 14,
      "description": "Controls the font size in pixels used in the Markdown preview.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": 14,
      "restricted": false
    },
    "markdown.preview.lineHeight": {
      "type": "number",
      "default": 1.6,
      "description": "Controls the line height used in the Markdown preview. This number is relative to the font size.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": 1.6,
      "restricted": false
    },
    "markdown.preview.linkify": {
      "type": "boolean",
      "default": true,
      "description": "Convert URL-like text to links in the Markdown preview.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "markdown.preview.markEditorSelection": {
      "type": "boolean",
      "default": true,
      "description": "Mark the current editor selection in the Markdown preview.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "markdown.preview.openMarkdownLinks": {
      "type": "string",
      "default": "inPreview",
      "description": "Controls how links to other Markdown files in the Markdown preview should be opened.",
      "scope": 5,
      "enum": [
        "inEditor",
        "inPreview"
      ],
      "enumDescriptions": [
        "Try to open links in the editor.",
        "Try to open links in the Markdown preview."
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "inPreview",
      "restricted": false
    },
    "markdown.preview.scrollEditorWithPreview": {
      "type": "boolean",
      "default": true,
      "description": "When a Markdown preview is scrolled, update the view of the editor.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "markdown.preview.scrollPreviewWithEditor": {
      "type": "boolean",
      "default": true,
      "description": "When a Markdown editor is scrolled, update the view of the preview.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "markdown.preview.typographer": {
      "type": "boolean",
      "default": false,
      "description": "Enable some language-neutral replacement and quotes beautification in the Markdown preview.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "markdown.server.log": {
      "type": "string",
      "scope": 4,
      "enum": [
        "debug",
        "off",
        "trace"
      ],
      "default": "off",
      "description": "Controls the logging level of the Markdown language server.",
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "off",
      "restricted": false
    },
    "markdown.styles": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "description": "A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\\' need to be written as '\\\\'.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": [],
      "restricted": true
    },
    "markdown.suggest.paths.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable path suggestions while writing links in Markdown files.",
      "scope": 5,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "markdown.suggest.paths.includeWorkspaceHeaderCompletions": {
      "type": "string",
      "default": "onDoubleHash",
      "scope": 5,
      "markdownDescription": "Enable suggestions for headers in other Markdown files in the current workspace. Accepting one of these suggestions inserts the full path to header in that file, for example: `[link text](/path/to/file.md#header)`.",
      "enum": [
        "never",
        "onDoubleHash",
        "onSingleOrDoubleHash"
      ],
      "markdownEnumDescriptions": [
        "Disable workspace header suggestions.",
        "Enable workspace header suggestions after typing `##` in a path, for example: `[link text](##`.",
        "Enable workspace header suggestions after typing either `##` or `#` in a path, for example: `[link text](#` or `[link text](##`."
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "onDoubleHash",
      "restricted": false
    },
    "markdown.trace.server": {
      "type": "string",
      "scope": 4,
      "enum": [
        "messages",
        "off",
        "verbose"
      ],
      "default": "off",
      "description": "Traces the communication between VS Code and the Markdown language server.",
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "off",
      "restricted": false
    },
    "markdown.updateLinksOnFileMove.enabled": {
      "type": "string",
      "enum": [
        "always",
        "never",
        "prompt"
      ],
      "markdownEnumDescriptions": [
        "Always update links automatically.",
        "Never try to update link and don't prompt.",
        "Prompt on each file move."
      ],
      "default": "never",
      "markdownDescription": "Try to update links in Markdown files when a file is renamed/moved in the workspace. Use `#markdown.updateLinksOnFileMove.include#` to configure which files trigger link updates.",
      "scope": 4,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "never",
      "restricted": false
    },
    "markdown.updateLinksOnFileMove.enableForDirectories": {
      "type": "boolean",
      "default": true,
      "description": "Enable updating links when a directory is moved or renamed in the workspace.",
      "scope": 4,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "markdown.updateLinksOnFileMove.include": {
      "type": "array",
      "markdownDescription": "Glob patterns that specifies files that trigger automatic link updates. See `#markdown.updateLinksOnFileMove.enabled#` for details about this feature.",
      "scope": 4,
      "items": {
        "type": "string",
        "description": "The glob pattern to match file paths against. Set to true to enable the pattern."
      },
      "default": [
        "**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
        "**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": [
        "**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
        "**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
      ],
      "restricted": false
    },
    "markdown.validate.duplicateLinkDefinitions.enabled": {
      "type": "string",
      "scope": 5,
      "markdownDescription": "Validate duplicated definitions in the current file.",
      "default": "warning",
      "enum": [
        "error",
        "ignore",
        "warning"
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "warning",
      "restricted": false
    },
    "markdown.validate.enabled": {
      "type": "boolean",
      "scope": 5,
      "description": "Enable all error reporting in Markdown files.",
      "default": false,
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "markdown.validate.fileLinks.enabled": {
      "type": "string",
      "scope": 5,
      "markdownDescription": "Validate links to other files in Markdown files, for example `[link](/path/to/file.md)`. This checks that the target files exists. Requires enabling `#markdown.validate.enabled#`.",
      "default": "warning",
      "enum": [
        "error",
        "ignore",
        "warning"
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "warning",
      "restricted": false
    },
    "markdown.validate.fileLinks.markdownFragmentLinks": {
      "type": "string",
      "scope": 5,
      "markdownDescription": "Validate the fragment part of links to headers in other files in Markdown files, for example: `[link](/path/to/file.md#header)`. Inherits the setting value from `#markdown.validate.fragmentLinks.enabled#` by default.",
      "default": "inherit",
      "enum": [
        "error",
        "ignore",
        "inherit",
        "warning"
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "inherit",
      "restricted": false
    },
    "markdown.validate.fragmentLinks.enabled": {
      "type": "string",
      "scope": 5,
      "markdownDescription": "Validate fragment links to headers in the current Markdown file, for example: `[link](#header)`. Requires enabling `#markdown.validate.enabled#`.",
      "default": "warning",
      "enum": [
        "error",
        "ignore",
        "warning"
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "warning",
      "restricted": false
    },
    "markdown.validate.ignoredLinks": {
      "type": "array",
      "scope": 5,
      "markdownDescription": "Configure links that should not be validated. For example adding `/about` would not validate the link `[about](/about)`, while the glob `/assets/**/*.svg` would let you skip validation for any link to `.svg` files under the `assets` directory.",
      "items": {
        "type": "string"
      },
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "default": [],
      "restricted": false
    },
    "markdown.validate.referenceLinks.enabled": {
      "type": "string",
      "scope": 5,
      "markdownDescription": "Validate reference links in Markdown files, for example: `[link][ref]`. Requires enabling `#markdown.validate.enabled#`.",
      "default": "warning",
      "enum": [
        "error",
        "ignore",
        "warning"
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "warning",
      "restricted": false
    },
    "markdown.validate.unusedLinkDefinitions.enabled": {
      "type": "string",
      "scope": 5,
      "markdownDescription": "Validate link definitions that are unused in the current file.",
      "default": "hint",
      "enum": [
        "error",
        "hint",
        "ignore",
        "warning"
      ],
      "source": {
        "id": "vscode.markdown-language-features",
        "displayName": "Markdown Language Features"
      },
      "defaultDefaultValue": "hint",
      "restricted": false
    },
    "mediaPreview.video.autoPlay": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Start playing videos on mute automatically.",
      "scope": 4,
      "source": {
        "id": "vscode.media-preview",
        "displayName": "Media Preview"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "mediaPreview.video.loop": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Loop videos over again automatically.",
      "scope": 4,
      "source": {
        "id": "vscode.media-preview",
        "displayName": "Media Preview"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "merge-conflict.autoNavigateNextConflict.enabled": {
      "type": "boolean",
      "description": "Whether to automatically navigate to the next merge conflict after resolving a merge conflict.",
      "default": false,
      "scope": 4,
      "source": {
        "id": "vscode.merge-conflict",
        "displayName": "Merge Conflict"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "merge-conflict.codeLens.enabled": {
      "type": "boolean",
      "description": "Create a CodeLens for merge conflict blocks within editor.",
      "default": true,
      "scope": 4,
      "source": {
        "id": "vscode.merge-conflict",
        "displayName": "Merge Conflict"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "merge-conflict.decorators.enabled": {
      "type": "boolean",
      "description": "Create decorators for merge conflict blocks within editor.",
      "default": true,
      "scope": 4,
      "source": {
        "id": "vscode.merge-conflict",
        "displayName": "Merge Conflict"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "merge-conflict.diffViewPosition": {
      "type": "string",
      "enum": [
        "Below",
        "Beside",
        "Current"
      ],
      "description": "Controls where the diff view should be opened when comparing changes in merge conflicts.",
      "enumDescriptions": [
        "Open the diff view below the current editor group.",
        "Open the diff view next to the current editor group.",
        "Open the diff view in the current editor group."
      ],
      "default": "Current",
      "scope": 4,
      "source": {
        "id": "vscode.merge-conflict",
        "displayName": "Merge Conflict"
      },
      "defaultDefaultValue": "Current",
      "restricted": false
    },
    "mergeEditor.diffAlgorithm": {
      "type": "string",
      "enum": [
        "advanced",
        "legacy"
      ],
      "default": "advanced",
      "markdownEnumDescriptions": [
        "Uses the advanced diffing algorithm.",
        "Uses the legacy diffing algorithm."
      ],
      "defaultDefaultValue": "advanced",
      "scope": 4,
      "restricted": false
    },
    "mergeEditor.showDeletionMarkers": {
      "type": "boolean",
      "default": true,
      "description": "Controls if deletions in base or one of the inputs should be indicated by a vertical bar.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "microsoft-authentication.implementation": {
      "type": "string",
      "default": "msal",
      "enum": [
        "classic",
        "msal"
      ],
      "enumDescriptions": [
        "(deprecated) Use the classic authentication flow to sign in with a Microsoft account.",
        "Use the Microsoft Authentication Library (MSAL) to sign in with a Microsoft account."
      ],
      "markdownDescription": "The authentication implementation to use for signing in with a Microsoft account.\n\n*NOTE: The `classic` implementation is deprecated and will be removed, along with this setting, in a future release. If only the `classic` implementation works for you, please [open an issue](command:workbench.action.openIssueReporter) and explain what you are trying to log in to.*",
      "tags": [
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "scope": 4,
      "source": {
        "id": "vscode.microsoft-authentication",
        "displayName": "Microsoft Account"
      },
      "defaultDefaultValue": "msal",
      "restricted": false
    },
    "microsoft-sovereign-cloud.customEnvironment": {
      "type": "object",
      "additionalProperties": true,
      "markdownDescription": "The custom configuration for the Sovereign Cloud to use with the Microsoft Sovereign Cloud authentication provider. This along with setting `#microsoft-sovereign-cloud.environment#` to `custom` is required to use this feature.",
      "properties": {
        "activeDirectoryEndpointUrl": {
          "type": "string",
          "description": "The Active Directory endpoint for the custom Sovereign Cloud."
        },
        "activeDirectoryResourceId": {
          "type": "string",
          "description": "The Active Directory resource ID for the custom Sovereign Cloud."
        },
        "managementEndpointUrl": {
          "type": "string",
          "description": "The management endpoint for the custom Sovereign Cloud."
        },
        "name": {
          "type": "string",
          "description": "The name of the custom Sovereign Cloud."
        },
        "portalUrl": {
          "type": "string",
          "description": "The portal URL for the custom Sovereign Cloud."
        },
        "resourceManagerEndpointUrl": {
          "type": "string",
          "description": "The resource manager endpoint for the custom Sovereign Cloud."
        }
      },
      "required": [
        "name",
        "portalUrl",
        "managementEndpointUrl",
        "resourceManagerEndpointUrl",
        "activeDirectoryEndpointUrl",
        "activeDirectoryResourceId"
      ],
      "scope": 4,
      "source": {
        "id": "vscode.microsoft-authentication",
        "displayName": "Microsoft Account"
      },
      "default": {},
      "restricted": false
    },
    "microsoft-sovereign-cloud.environment": {
      "type": "string",
      "markdownDescription": "The Sovereign Cloud to use for authentication. If you select `custom`, you must also set the `#microsoft-sovereign-cloud.customEnvironment#` setting.",
      "enum": [
        "ChinaCloud",
        "custom",
        "USGovernment"
      ],
      "enumDescriptions": [
        "Azure China",
        "A custom Microsoft Sovereign Cloud",
        "Azure US Government"
      ],
      "scope": 4,
      "source": {
        "id": "vscode.microsoft-authentication",
        "displayName": "Microsoft Account"
      },
      "default": "",
      "restricted": false
    },
    "multiDiffEditor.experimental.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable experimental multi diff editor.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.backup.sizeLimit": {
      "markdownDescription": "The limit of notebook output size in kilobytes (KB) where notebook files will no longer be backed up for hot reload. Use 0 for unlimited.",
      "type": "number",
      "default": 10000,
      "defaultDefaultValue": 10000,
      "scope": 4,
      "restricted": false
    },
    "notebook.breadcrumbs.showCodeCells": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled, notebook breadcrumbs contain code cells.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.cellExecutionTimeVerbosity": {
      "description": "Controls the verbosity of the cell execution time in the cell status bar.",
      "type": "string",
      "enum": [
        "default",
        "verbose"
      ],
      "enumDescriptions": [
        "The cell execution duration is visible, with advanced information in the hover tooltip.",
        "The cell last execution timestamp and duration are visible, with advanced information in the hover tooltip."
      ],
      "default": "default",
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "notebook.cellFailureDiagnostics": {
      "markdownDescription": "Show available diagnostics for cell failures.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.cellFocusIndicator": {
      "description": "Controls where the focus indicator is rendered, either along the cell borders or on the left gutter.",
      "type": "string",
      "enum": [
        "border",
        "gutter"
      ],
      "default": "gutter",
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": "gutter",
      "scope": 4,
      "restricted": false
    },
    "notebook.cellToolbarLocation": {
      "description": "Where the cell toolbar should be shown, or whether it should be hidden.",
      "type": "object",
      "additionalProperties": {
        "markdownDescription": "Configure the cell toolbar position for for specific file types",
        "type": "string",
        "enum": [
          "left",
          "right",
          "hidden"
        ]
      },
      "default": {
        "default": "right"
      },
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": {
        "default": "right"
      },
      "scope": 4,
      "restricted": false
    },
    "notebook.cellToolbarVisibility": {
      "markdownDescription": "Whether the cell toolbar should appear on hover or click.",
      "type": "string",
      "enum": [
        "click",
        "hover"
      ],
      "default": "click",
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": "click",
      "scope": 4,
      "restricted": false
    },
    "notebook.codeActionsOnSave": {
      "oneOf": [
        {
          "$ref": "#/$defs/_328"
        },
        {
          "$ref": "#/$defs/_329"
        }
      ],
      "markdownDescription": "Run a series of Code Actions for a notebook on save. Code Actions must be specified and the editor must not be shutting down. When `#files.autoSave#` is set to `afterDelay`, Code Actions will only be run when the file is saved explicitly. Example: `\"notebook.source.organizeImports\": \"explicit\"`",
      "type": "object",
      "additionalProperties": {
        "type": [
          "string",
          "boolean"
        ],
        "enum": [
          "explicit",
          "never",
          true,
          false
        ]
      },
      "default": {},
      "defaultDefaultValue": {},
      "scope": 6,
      "restricted": false,
      "properties": {}
    },
    "notebook.compactView": {
      "description": "Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.",
      "type": "boolean",
      "default": true,
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.confirmDeleteRunningCell": {
      "markdownDescription": "Control whether a confirmation prompt is required to delete a running cell.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.consolidatedOutputButton": {
      "description": "Control whether outputs action should be rendered in the output toolbar.",
      "type": "boolean",
      "default": true,
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.consolidatedRunButton": {
      "description": "Control whether extra actions are shown in a dropdown next to the run button.",
      "type": "boolean",
      "default": false,
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.defaultFormatter": {
      "description": "Defines a default notebook formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "enum": [
        null,
        "ms-vscode.js-debug",
        "ms-vscode.js-debug-companion",
        "ms-vscode.vscode-js-profile-table",
        "vscode.configuration-editing",
        "vscode.css-language-features",
        "vscode.debug-auto-launch",
        "vscode.debug-server-ready",
        "vscode.emmet",
        "vscode.extension-editing",
        "vscode.git",
        "vscode.git-base",
        "vscode.github",
        "vscode.github-authentication",
        "vscode.grunt",
        "vscode.gulp",
        "vscode.html-language-features",
        "vscode.ipynb",
        "vscode.jake",
        "vscode.json-language-features",
        "vscode.markdown-language-features",
        "vscode.markdown-math",
        "vscode.media-preview",
        "vscode.merge-conflict",
        "vscode.microsoft-authentication",
        "vscode.npm",
        "vscode.php-language-features",
        "vscode.references-view",
        "vscode.search-result",
        "vscode.simple-browser",
        "vscode.terminal-suggest",
        "vscode.tunnel-forwarding",
        "vscode.typescript-language-features"
      ],
      "enumItemLabels": [
        "None",
        "CSS Language Features",
        "HTML Language Features",
        "JSON Language Features",
        "Markdown Language Features",
        "Markdown Math",
        "PHP Language Features",
        "TypeScript and JavaScript Language Features",
        "Configuration Editing",
        "Node Debug Auto-attach",
        "Server Ready Action",
        "Emmet",
        "Extension Authoring",
        "Git",
        "Git Base",
        "GitHub",
        "GitHub Authentication",
        "Grunt support for VS Code",
        "Gulp support for VSCode",
        ".ipynb Support",
        "Jake support for VS Code",
        "JavaScript Debugger",
        "JavaScript Debugger Companion Extension",
        "Media Preview",
        "Merge Conflict",
        "Microsoft Account",
        "NPM support for VS Code",
        "Reference Search View",
        "Search Result",
        "Simple Browser",
        "Terminal Suggest for VS Code",
        "Local Tunnel Port Forwarding",
        "Table Visualizer for JavaScript Profiles"
      ],
      "markdownEnumDescriptions": [
        "None",
        "An extension for debugging Node.js programs and Chrome.",
        "Companion extension to js-debug that provides capability for remote debugging",
        "Text visualizer for profiles taken from the JavaScript debugger",
        "Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.",
        "Provides rich language support for CSS, LESS and SCSS files.",
        "Helper for auto-attach feature when node-debug extensions are not active.",
        "Open URI in browser if server under debugging is ready.",
        "Emmet support for VS Code",
        "Provides linting capabilities for authoring extensions.",
        "Git SCM Integration",
        "Git static contributions and pickers.",
        "GitHub features for VS Code",
        "GitHub Authentication Provider",
        "Extension to add Grunt capabilities to VS Code.",
        "Extension to add Gulp capabilities to VSCode.",
        "Provides rich language support for HTML and Handlebar files",
        "Provides basic support for opening and reading Jupyter's .ipynb notebook files",
        "Extension to add Jake capabilities to VS Code.",
        "Provides rich language support for JSON files.",
        "Provides rich language support for Markdown.",
        "Adds math support to Markdown in notebooks.",
        "Provides VS Code's built-in previews for images, audio, and video",
        "Highlighting and commands for inline merge conflicts.",
        "Microsoft authentication provider",
        "Extension to add task support for npm scripts.",
        "Provides rich language support for PHP files.",
        "Reference Search results as separate, stable view in the sidebar",
        "Provides syntax highlighting and language features for tabbed search results.",
        "A very basic built-in webview for displaying web content.",
        "Extension to add terminal completions for zsh, bash, and fish terminals.",
        "Allows forwarding local ports to be accessible over the internet.",
        "Provides rich language support for JavaScript and TypeScript."
      ],
      "defaultDefaultValue": null,
      "scope": 4,
      "restricted": false
    },
    "notebook.diff.enablePreview": {
      "description": "Whether to use the enhanced text diff editor for notebook.",
      "type": "boolean",
      "default": true,
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.diff.experimental.toggleInline": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Enable the command to toggle the experimental notebook inline diff editor.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.diff.ignoreMetadata": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Hide Metadata Differences",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.diff.ignoreOutputs": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Hide Outputs Differences",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.diff.overviewRuler": {
      "description": "Whether to render the overview ruler in the diff editor for notebook.",
      "type": "boolean",
      "default": false,
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.displayOrder": {
      "description": "Priority list for output mime types",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "defaultDefaultValue": [],
      "scope": 4,
      "restricted": false
    },
    "notebook.dragAndDropEnabled": {
      "description": "Control whether the notebook editor should allow moving cells through drag and drop.",
      "type": "boolean",
      "default": true,
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.editorOptionsCustomizations": {
      "description": "Settings for code editors used in notebooks. This can be used to customize most editor.* settings.",
      "default": {},
      "allOf": [
        {
          "properties": {
            "editor.acceptSuggestionOnCommitCharacter": {
              "$ref": "#/$defs/_23"
            },
            "editor.acceptSuggestionOnEnter": {
              "$ref": "#/$defs/_24"
            },
            "editor.accessibilityPageSize": {
              "$ref": "#/$defs/_26"
            },
            "editor.accessibilitySupport": {
              "$ref": "#/$defs/_25"
            },
            "editor.allowVariableFonts": {
              "$ref": "#/$defs/_28"
            },
            "editor.allowVariableFontsInAccessibilityMode": {
              "$ref": "#/$defs/_29"
            },
            "editor.allowVariableLineHeights": {
              "$ref": "#/$defs/_27"
            },
            "editor.autoClosingBrackets": {
              "$ref": "#/$defs/_30"
            },
            "editor.autoClosingComments": {
              "$ref": "#/$defs/_31"
            },
            "editor.autoClosingDelete": {
              "$ref": "#/$defs/_33"
            },
            "editor.autoClosingOvertype": {
              "$ref": "#/$defs/_34"
            },
            "editor.autoClosingQuotes": {
              "$ref": "#/$defs/_35"
            },
            "editor.autoIndent": {
              "$ref": "#/$defs/_36"
            },
            "editor.autoIndentOnPaste": {
              "$ref": "#/$defs/_37"
            },
            "editor.autoIndentOnPasteWithinString": {
              "$ref": "#/$defs/_38"
            },
            "editor.autoSurround": {
              "$ref": "#/$defs/_39"
            },
            "editor.bracketPairColorization.enabled": {
              "$ref": "#/$defs/_40"
            },
            "editor.bracketPairColorization.independentColorPoolPerBracketType": {
              "$ref": "#/$defs/_41"
            },
            "editor.codeLens": {
              "$ref": "#/$defs/_47"
            },
            "editor.codeLensFontFamily": {
              "$ref": "#/$defs/_48"
            },
            "editor.codeLensFontSize": {
              "$ref": "#/$defs/_49"
            },
            "editor.colorDecorators": {
              "$ref": "#/$defs/_50"
            },
            "editor.colorDecoratorsActivatedOn": {
              "$ref": "#/$defs/_268"
            },
            "editor.colorDecoratorsLimit": {
              "$ref": "#/$defs/_51"
            },
            "editor.columnSelection": {
              "$ref": "#/$defs/_52"
            },
            "editor.comments.ignoreEmptyLines": {
              "$ref": "#/$defs/_54"
            },
            "editor.comments.insertSpace": {
              "$ref": "#/$defs/_53"
            },
            "editor.copyWithSyntaxHighlighting": {
              "$ref": "#/$defs/_55"
            },
            "editor.cursorBlinking": {
              "$ref": "#/$defs/_56"
            },
            "editor.cursorHeight": {
              "$ref": "#/$defs/_62"
            },
            "editor.cursorSmoothCaretAnimation": {
              "$ref": "#/$defs/_57"
            },
            "editor.cursorStyle": {
              "$ref": "#/$defs/_58"
            },
            "editor.cursorSurroundingLines": {
              "$ref": "#/$defs/_59"
            },
            "editor.cursorSurroundingLinesStyle": {
              "$ref": "#/$defs/_60"
            },
            "editor.cursorWidth": {
              "$ref": "#/$defs/_61"
            },
            "editor.defaultColorDecorators": {
              "$ref": "#/$defs/_267"
            },
            "editor.definitionLinkOpensInPeek": {
              "$ref": "#/$defs/_158"
            },
            "editor.dragAndDrop": {
              "$ref": "#/$defs/_63"
            },
            "editor.dropIntoEditor.enabled": {
              "$ref": "#/$defs/_64"
            },
            "editor.dropIntoEditor.showDropSelector": {
              "$ref": "#/$defs/_65"
            },
            "editor.editContext": {
              "$ref": "#/$defs/_66"
            },
            "editor.emptySelectionClipboard": {
              "$ref": "#/$defs/_67"
            },
            "editor.experimentalGpuAcceleration": {
              "$ref": "#/$defs/_68"
            },
            "editor.experimentalWhitespaceRendering": {
              "$ref": "#/$defs/_69"
            },
            "editor.fastScrollSensitivity": {
              "$ref": "#/$defs/_70"
            },
            "editor.find.addExtraSpaceOnTop": {
              "$ref": "#/$defs/_74"
            },
            "editor.find.autoFindInSelection": {
              "$ref": "#/$defs/_73"
            },
            "editor.find.cursorMoveOnType": {
              "$ref": "#/$defs/_71"
            },
            "editor.find.findOnType": {
              "$ref": "#/$defs/_78"
            },
            "editor.find.globalFindClipboard": {
              "type": "boolean",
              "default": false,
              "description": "Controls whether the Find Widget should read or modify the shared find clipboard on macOS.",
              "included": false,
              "defaultDefaultValue": false,
              "scope": 6,
              "restricted": false
            },
            "editor.find.history": {
              "$ref": "#/$defs/_76"
            },
            "editor.find.loop": {
              "$ref": "#/$defs/_75"
            },
            "editor.find.replaceHistory": {
              "$ref": "#/$defs/_77"
            },
            "editor.find.seedSearchStringFromSelection": {
              "$ref": "#/$defs/_72"
            },
            "editor.folding": {
              "$ref": "#/$defs/_79"
            },
            "editor.foldingHighlight": {
              "$ref": "#/$defs/_81"
            },
            "editor.foldingImportsByDefault": {
              "$ref": "#/$defs/_82"
            },
            "editor.foldingMaximumRegions": {
              "$ref": "#/$defs/_83"
            },
            "editor.foldingStrategy": {
              "$ref": "#/$defs/_80"
            },
            "editor.fontFamily": {
              "$ref": "#/$defs/_85"
            },
            "editor.fontLigatures": {
              "$ref": "#/$defs/_86"
            },
            "editor.fontSize": {
              "$ref": "#/$defs/_87"
            },
            "editor.fontVariations": {
              "$ref": "#/$defs/_89"
            },
            "editor.fontWeight": {
              "$ref": "#/$defs/_88"
            },
            "editor.formatOnPaste": {
              "$ref": "#/$defs/_90"
            },
            "editor.formatOnType": {
              "$ref": "#/$defs/_91"
            },
            "editor.glyphMargin": {
              "$ref": "#/$defs/_92"
            },
            "editor.gotoLocation.alternativeDeclarationCommand": {
              "$ref": "#/$defs/_101"
            },
            "editor.gotoLocation.alternativeDefinitionCommand": {
              "$ref": "#/$defs/_99"
            },
            "editor.gotoLocation.alternativeImplementationCommand": {
              "$ref": "#/$defs/_102"
            },
            "editor.gotoLocation.alternativeReferenceCommand": {
              "$ref": "#/$defs/_103"
            },
            "editor.gotoLocation.alternativeTypeDefinitionCommand": {
              "$ref": "#/$defs/_100"
            },
            "editor.gotoLocation.multiple": {
              "$ref": "#/$defs/_93"
            },
            "editor.gotoLocation.multipleDeclarations": {
              "$ref": "#/$defs/_96"
            },
            "editor.gotoLocation.multipleDefinitions": {
              "$ref": "#/$defs/_94"
            },
            "editor.gotoLocation.multipleImplementations": {
              "$ref": "#/$defs/_97"
            },
            "editor.gotoLocation.multipleReferences": {
              "$ref": "#/$defs/_98"
            },
            "editor.gotoLocation.multipleTypeDefinitions": {
              "$ref": "#/$defs/_95"
            },
            "editor.guides.bracketPairs": {
              "$ref": "#/$defs/_42"
            },
            "editor.guides.bracketPairsHorizontal": {
              "$ref": "#/$defs/_43"
            },
            "editor.guides.highlightActiveBracketPair": {
              "$ref": "#/$defs/_44"
            },
            "editor.guides.highlightActiveIndentation": {
              "$ref": "#/$defs/_46"
            },
            "editor.guides.indentation": {
              "$ref": "#/$defs/_45"
            },
            "editor.hideCursorInOverviewRuler": {
              "$ref": "#/$defs/_104"
            },
            "editor.hover.above": {
              "$ref": "#/$defs/_109"
            },
            "editor.hover.delay": {
              "$ref": "#/$defs/_106"
            },
            "editor.hover.enabled": {
              "$ref": "#/$defs/_105"
            },
            "editor.hover.hidingDelay": {
              "$ref": "#/$defs/_108"
            },
            "editor.hover.sticky": {
              "$ref": "#/$defs/_107"
            },
            "editor.inertialScroll": {
              "$ref": "#/$defs/_259"
            },
            "editor.inlayHints.enabled": {
              "$ref": "#/$defs/_260"
            },
            "editor.inlayHints.fontFamily": {
              "$ref": "#/$defs/_262"
            },
            "editor.inlayHints.fontSize": {
              "$ref": "#/$defs/_261"
            },
            "editor.inlayHints.maximumLength": {
              "$ref": "#/$defs/_264"
            },
            "editor.inlayHints.padding": {
              "$ref": "#/$defs/_263"
            },
            "editor.inlineCompletionsAccessibilityVerbose": {
              "$ref": "#/$defs/_269"
            },
            "editor.inlineSuggest.edits.allowCodeShifting": {
              "$ref": "#/$defs/_117"
            },
            "editor.inlineSuggest.edits.renderSideBySide": {
              "$ref": "#/$defs/_118"
            },
            "editor.inlineSuggest.edits.showCollapsed": {
              "$ref": "#/$defs/_119"
            },
            "editor.inlineSuggest.enabled": {
              "$ref": "#/$defs/_110"
            },
            "editor.inlineSuggest.experimental.suppressInlineSuggestions": {
              "$ref": "#/$defs/_114"
            },
            "editor.inlineSuggest.experimental.triggerCommandOnProviderChange": {
              "$ref": "#/$defs/_115"
            },
            "editor.inlineSuggest.fontFamily": {
              "$ref": "#/$defs/_116"
            },
            "editor.inlineSuggest.showToolbar": {
              "$ref": "#/$defs/_111"
            },
            "editor.inlineSuggest.suppressSuggestions": {
              "$ref": "#/$defs/_113"
            },
            "editor.inlineSuggest.syntaxHighlightingEnabled": {
              "$ref": "#/$defs/_112"
            },
            "editor.letterSpacing": {
              "$ref": "#/$defs/_120"
            },
            "editor.lightbulb.enabled": {
              "$ref": "#/$defs/_121"
            },
            "editor.lineHeight": {
              "$ref": "#/$defs/_122"
            },
            "editor.lineNumbers": {
              "$ref": "#/$defs/_123"
            },
            "editor.linkedEditing": {
              "$ref": "#/$defs/_124"
            },
            "editor.links": {
              "$ref": "#/$defs/_125"
            },
            "editor.matchBrackets": {
              "$ref": "#/$defs/_126"
            },
            "editor.minimap.autohide": {
              "$ref": "#/$defs/_128"
            },
            "editor.minimap.enabled": {
              "$ref": "#/$defs/_127"
            },
            "editor.minimap.markSectionHeaderRegex": {
              "$ref": "#/$defs/_137"
            },
            "editor.minimap.maxColumn": {
              "$ref": "#/$defs/_134"
            },
            "editor.minimap.renderCharacters": {
              "$ref": "#/$defs/_133"
            },
            "editor.minimap.scale": {
              "$ref": "#/$defs/_132"
            },
            "editor.minimap.sectionHeaderFontSize": {
              "$ref": "#/$defs/_138"
            },
            "editor.minimap.sectionHeaderLetterSpacing": {
              "$ref": "#/$defs/_139"
            },
            "editor.minimap.showMarkSectionHeaders": {
              "$ref": "#/$defs/_136"
            },
            "editor.minimap.showRegionSectionHeaders": {
              "$ref": "#/$defs/_135"
            },
            "editor.minimap.showSlider": {
              "$ref": "#/$defs/_131"
            },
            "editor.minimap.side": {
              "$ref": "#/$defs/_130"
            },
            "editor.minimap.size": {
              "$ref": "#/$defs/_129"
            },
            "editor.mouseWheelScrollSensitivity": {
              "$ref": "#/$defs/_140"
            },
            "editor.mouseWheelZoom": {
              "$ref": "#/$defs/_141"
            },
            "editor.multiCursorLimit": {
              "$ref": "#/$defs/_145"
            },
            "editor.multiCursorMergeOverlapping": {
              "$ref": "#/$defs/_142"
            },
            "editor.multiCursorModifier": {
              "$ref": "#/$defs/_143"
            },
            "editor.multiCursorPaste": {
              "$ref": "#/$defs/_144"
            },
            "editor.occurrencesHighlight": {
              "$ref": "#/$defs/_146"
            },
            "editor.occurrencesHighlightDelay": {
              "$ref": "#/$defs/_147"
            },
            "editor.overtypeCursorStyle": {
              "$ref": "#/$defs/_148"
            },
            "editor.overtypeOnPaste": {
              "$ref": "#/$defs/_149"
            },
            "editor.overviewRulerBorder": {
              "$ref": "#/$defs/_150"
            },
            "editor.padding.bottom": {
              "$ref": "#/$defs/_152"
            },
            "editor.padding.top": {
              "$ref": "#/$defs/_151"
            },
            "editor.parameterHints.cycle": {
              "$ref": "#/$defs/_156"
            },
            "editor.parameterHints.enabled": {
              "$ref": "#/$defs/_155"
            },
            "editor.pasteAs.enabled": {
              "$ref": "#/$defs/_153"
            },
            "editor.pasteAs.showPasteSelector": {
              "$ref": "#/$defs/_154"
            },
            "editor.peekWidgetDefaultFocus": {
              "$ref": "#/$defs/_157"
            },
            "editor.quickSuggestions": {
              "$ref": "#/$defs/_159"
            },
            "editor.quickSuggestionsDelay": {
              "$ref": "#/$defs/_160"
            },
            "editor.renameOnType": {
              "$ref": "#/$defs/_161"
            },
            "editor.renderControlCharacters": {
              "$ref": "#/$defs/_163"
            },
            "editor.renderFinalNewline": {
              "$ref": "#/$defs/_164"
            },
            "editor.renderLineHighlight": {
              "$ref": "#/$defs/_165"
            },
            "editor.renderLineHighlightOnlyWhenFocus": {
              "$ref": "#/$defs/_166"
            },
            "editor.renderRichScreenReaderContent": {
              "$ref": "#/$defs/_162"
            },
            "editor.renderWhitespace": {
              "$ref": "#/$defs/_167"
            },
            "editor.roundedSelection": {
              "$ref": "#/$defs/_168"
            },
            "editor.rulers": {
              "$ref": "#/$defs/_169"
            },
            "editor.screenReaderAnnounceInlineSuggestion": {
              "$ref": "#/$defs/_32"
            },
            "editor.scrollbar.horizontal": {
              "$ref": "#/$defs/_171"
            },
            "editor.scrollbar.horizontalScrollbarSize": {
              "$ref": "#/$defs/_173"
            },
            "editor.scrollbar.ignoreHorizontalScrollbarInContentHeight": {
              "$ref": "#/$defs/_175"
            },
            "editor.scrollbar.scrollByPage": {
              "$ref": "#/$defs/_174"
            },
            "editor.scrollbar.vertical": {
              "$ref": "#/$defs/_170"
            },
            "editor.scrollbar.verticalScrollbarSize": {
              "$ref": "#/$defs/_172"
            },
            "editor.scrollBeyondLastColumn": {
              "$ref": "#/$defs/_176"
            },
            "editor.scrollBeyondLastLine": {
              "$ref": "#/$defs/_177"
            },
            "editor.scrollOnMiddleClick": {
              "$ref": "#/$defs/_270"
            },
            "editor.scrollPredominantAxis": {
              "$ref": "#/$defs/_178"
            },
            "editor.selectionClipboard": {
              "$ref": "#/$defs/_179"
            },
            "editor.selectionHighlight": {
              "$ref": "#/$defs/_180"
            },
            "editor.selectionHighlightMaxLength": {
              "$ref": "#/$defs/_181"
            },
            "editor.selectionHighlightMultiline": {
              "$ref": "#/$defs/_182"
            },
            "editor.showDeprecated": {
              "$ref": "#/$defs/_258"
            },
            "editor.showFoldingControls": {
              "$ref": "#/$defs/_183"
            },
            "editor.showUnused": {
              "$ref": "#/$defs/_184"
            },
            "editor.smartSelect.selectLeadingAndTrailingWhitespace": {
              "$ref": "#/$defs/_186"
            },
            "editor.smartSelect.selectSubwords": {
              "$ref": "#/$defs/_187"
            },
            "editor.smoothScrolling": {
              "$ref": "#/$defs/_188"
            },
            "editor.snippetSuggestions": {
              "$ref": "#/$defs/_185"
            },
            "editor.stickyScroll.defaultModel": {
              "$ref": "#/$defs/_191"
            },
            "editor.stickyScroll.enabled": {
              "$ref": "#/$defs/_189"
            },
            "editor.stickyScroll.maxLineCount": {
              "$ref": "#/$defs/_190"
            },
            "editor.stickyScroll.scrollWithEditor": {
              "$ref": "#/$defs/_192"
            },
            "editor.stickyTabStops": {
              "$ref": "#/$defs/_193"
            },
            "editor.suggest.filteredTypes": {
              "$ref": "#/$defs/_205"
            },
            "editor.suggest.filterGraceful": {
              "$ref": "#/$defs/_195"
            },
            "editor.suggest.insertMode": {
              "$ref": "#/$defs/_194"
            },
            "editor.suggest.localityBonus": {
              "$ref": "#/$defs/_196"
            },
            "editor.suggest.matchOnWordStartOnly": {
              "$ref": "#/$defs/_210"
            },
            "editor.suggest.maxVisibleSuggestions": {
              "$ref": "#/$defs/_204"
            },
            "editor.suggest.preview": {
              "$ref": "#/$defs/_202"
            },
            "editor.suggest.selectionMode": {
              "$ref": "#/$defs/_198"
            },
            "editor.suggest.shareSuggestSelections": {
              "$ref": "#/$defs/_197"
            },
            "editor.suggest.showClasses": {
              "$ref": "#/$defs/_213"
            },
            "editor.suggest.showColors": {
              "$ref": "#/$defs/_227"
            },
            "editor.suggest.showConstants": {
              "$ref": "#/$defs/_222"
            },
            "editor.suggest.showConstructors": {
              "$ref": "#/$defs/_208"
            },
            "editor.suggest.showCustomcolors": {
              "$ref": "#/$defs/_230"
            },
            "editor.suggest.showDeprecated": {
              "$ref": "#/$defs/_209"
            },
            "editor.suggest.showEnumMembers": {
              "$ref": "#/$defs/_224"
            },
            "editor.suggest.showEnums": {
              "$ref": "#/$defs/_223"
            },
            "editor.suggest.showEvents": {
              "$ref": "#/$defs/_218"
            },
            "editor.suggest.showFields": {
              "$ref": "#/$defs/_211"
            },
            "editor.suggest.showFiles": {
              "$ref": "#/$defs/_228"
            },
            "editor.suggest.showFolders": {
              "$ref": "#/$defs/_231"
            },
            "editor.suggest.showFunctions": {
              "$ref": "#/$defs/_207"
            },
            "editor.suggest.showIcons": {
              "$ref": "#/$defs/_200"
            },
            "editor.suggest.showInlineDetails": {
              "$ref": "#/$defs/_203"
            },
            "editor.suggest.showInterfaces": {
              "$ref": "#/$defs/_215"
            },
            "editor.suggest.showIssues": {
              "$ref": "#/$defs/_235"
            },
            "editor.suggest.showKeywords": {
              "$ref": "#/$defs/_225"
            },
            "editor.suggest.showMethods": {
              "$ref": "#/$defs/_206"
            },
            "editor.suggest.showModules": {
              "$ref": "#/$defs/_216"
            },
            "editor.suggest.showOperators": {
              "$ref": "#/$defs/_219"
            },
            "editor.suggest.showProperties": {
              "$ref": "#/$defs/_217"
            },
            "editor.suggest.showReferences": {
              "$ref": "#/$defs/_229"
            },
            "editor.suggest.showSnippets": {
              "$ref": "#/$defs/_233"
            },
            "editor.suggest.showStatusBar": {
              "$ref": "#/$defs/_201"
            },
            "editor.suggest.showStructs": {
              "$ref": "#/$defs/_214"
            },
            "editor.suggest.showTypeParameters": {
              "$ref": "#/$defs/_232"
            },
            "editor.suggest.showUnits": {
              "$ref": "#/$defs/_220"
            },
            "editor.suggest.showUsers": {
              "$ref": "#/$defs/_234"
            },
            "editor.suggest.showValues": {
              "$ref": "#/$defs/_221"
            },
            "editor.suggest.showVariables": {
              "$ref": "#/$defs/_212"
            },
            "editor.suggest.showWords": {
              "$ref": "#/$defs/_226"
            },
            "editor.suggest.snippetsPreventQuickSuggestions": {
              "$ref": "#/$defs/_199"
            },
            "editor.suggestFontSize": {
              "$ref": "#/$defs/_236"
            },
            "editor.suggestLineHeight": {
              "$ref": "#/$defs/_237"
            },
            "editor.suggestOnTriggerCharacters": {
              "$ref": "#/$defs/_238"
            },
            "editor.suggestSelection": {
              "$ref": "#/$defs/_239"
            },
            "editor.tabCompletion": {
              "$ref": "#/$defs/_240"
            },
            "editor.tabFocusMode": {
              "$ref": "#/$defs/_266"
            },
            "editor.trimWhitespaceOnDelete": {
              "$ref": "#/$defs/_241"
            },
            "editor.unfoldOnClickAfterEndOfLine": {
              "$ref": "#/$defs/_84"
            },
            "editor.unicodeHighlight.allowedCharacters": {
              "$ref": "#/$defs/_247"
            },
            "editor.unicodeHighlight.allowedLocales": {
              "$ref": "#/$defs/_248"
            },
            "editor.unicodeHighlight.ambiguousCharacters": {
              "$ref": "#/$defs/_244"
            },
            "editor.unicodeHighlight.includeComments": {
              "$ref": "#/$defs/_245"
            },
            "editor.unicodeHighlight.includeStrings": {
              "$ref": "#/$defs/_246"
            },
            "editor.unicodeHighlight.invisibleCharacters": {
              "$ref": "#/$defs/_243"
            },
            "editor.unicodeHighlight.nonBasicASCII": {
              "$ref": "#/$defs/_242"
            },
            "editor.unusualLineTerminators": {
              "$ref": "#/$defs/_249"
            },
            "editor.useTabStops": {
              "$ref": "#/$defs/_250"
            },
            "editor.wordBreak": {
              "$ref": "#/$defs/_251"
            },
            "editor.wordSegmenterLocales": {
              "$ref": "#/$defs/_252"
            },
            "editor.wordSeparators": {
              "$ref": "#/$defs/_253"
            },
            "editor.wordWrap": {
              "$ref": "#/$defs/_254"
            },
            "editor.wordWrapColumn": {
              "$ref": "#/$defs/_255"
            },
            "editor.wrapOnEscapedLineFeeds": {
              "$ref": "#/$defs/_265"
            },
            "editor.wrappingIndent": {
              "$ref": "#/$defs/_256"
            },
            "editor.wrappingStrategy": {
              "$ref": "#/$defs/_257"
            }
          }
        }
      ],
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": {},
      "scope": 4,
      "restricted": false
    },
    "notebook.experimental.generate": {
      "markdownDescription": "Enable experimental generate action to create code cell with inline chat enabled.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.experimental.remoteSave": {
      "markdownDescription": "Enables the incremental saving of notebooks between processes and across Remote connections. When enabled, only the changes to the notebook are sent to the extension host, improving performance for large notebooks and slow network connections.",
      "type": "boolean",
      "default": false,
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.find.filters": {
      "markdownDescription": "Customize the Find Widget behavior for searching within notebook cells. When both markup source and markup preview are enabled, the Find Widget will search either the source code or preview based on the current state of the cell.",
      "type": "object",
      "properties": {
        "codeOutput": {
          "$ref": "#/$defs/_271"
        },
        "codeSource": {
          "$ref": "#/$defs/_271"
        },
        "markupPreview": {
          "$ref": "#/$defs/_271"
        },
        "markupSource": {
          "$ref": "#/$defs/_271"
        }
      },
      "default": {
        "codeOutput": true,
        "codeSource": true,
        "markupPreview": true,
        "markupSource": true
      },
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": {
        "codeOutput": true,
        "codeSource": true,
        "markupPreview": true,
        "markupSource": true
      },
      "scope": 4,
      "restricted": false
    },
    "notebook.formatOnCellExecution": {
      "markdownDescription": "Format a notebook cell upon execution. A formatter must be available.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.formatOnSave.enabled": {
      "markdownDescription": "Format a notebook on save. A formatter must be available and the editor must not be shutting down. When `#files.autoSave#` is set to `afterDelay`, the file will only be formatted when saved explicitly.",
      "type": "boolean",
      "tags": [
        "notebookLayout"
      ],
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.globalToolbar": {
      "description": "Control whether to render a global toolbar inside the notebook editor.",
      "type": "boolean",
      "default": true,
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.globalToolbarShowLabel": {
      "description": "Control whether the actions on the notebook toolbar should render label or not.",
      "type": "string",
      "enum": [
        "always",
        "dynamic",
        "never"
      ],
      "default": "always",
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": "always",
      "scope": 4,
      "restricted": false
    },
    "notebook.gotoSymbols.showAllSymbols": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled, the Go to Symbol Quick Pick will display full code symbols from the notebook, as well as Markdown headers.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.inlineValues": {
      "markdownDescription": "Control whether to show inline values within notebook code cells after cell execution. Values will remain until the cell is edited, re-executed, or explicitly cleared via the Clear All Outputs toolbar button or the `Notebook: Clear Inline Values` command.",
      "type": "string",
      "enum": [
        "auto",
        "off",
        "on"
      ],
      "enumDescriptions": [
        "Show inline values only when an inline value provider is registered.",
        "Never show inline values.",
        "Always show inline values, with a regex fallback if no inline value provider is registered. Note: There may be a performance impact in larger cells if the fallback is used."
      ],
      "default": "off",
      "defaultDefaultValue": "off",
      "scope": 4,
      "restricted": false
    },
    "notebook.insertFinalNewline": {
      "markdownDescription": "When enabled, insert a final new line into the end of code cells when saving a notebook.",
      "type": "boolean",
      "tags": [
        "notebookLayout"
      ],
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.insertToolbarLocation": {
      "description": "Control where the insert cell actions should appear.",
      "type": "string",
      "enum": [
        "betweenCells",
        "both",
        "hidden",
        "notebookToolbar"
      ],
      "enumDescriptions": [
        "A toolbar that appears on hover between cells.",
        "Both toolbars.",
        "The insert actions don't appear anywhere.",
        "The toolbar at the top of the notebook editor."
      ],
      "default": "both",
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": "both",
      "scope": 4,
      "restricted": false
    },
    "notebook.lineNumbers": {
      "type": "string",
      "enum": [
        "off",
        "on"
      ],
      "default": "off",
      "markdownDescription": "Controls the display of line numbers in the cell editor.",
      "defaultDefaultValue": "off",
      "scope": 4,
      "restricted": false
    },
    "notebook.markdown.lineHeight": {
      "markdownDescription": "Controls the line height in pixels of markdown cells in notebooks. When set to `0`, `normal` will be used",
      "type": "number",
      "default": 0,
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": 0,
      "scope": 4,
      "restricted": false
    },
    "notebook.markup.fontFamily": {
      "markdownDescription": "Controls the font family of rendered markup in notebooks. When left blank, this will fall back to the default workbench font family.",
      "type": "string",
      "default": "",
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": "",
      "scope": 4,
      "restricted": false
    },
    "notebook.markup.fontSize": {
      "markdownDescription": "Controls the font size in pixels of rendered markup in notebooks. When set to `0`, 120% of `#editor.fontSize#` is used.",
      "type": "number",
      "default": 0,
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": 0,
      "scope": 4,
      "restricted": false
    },
    "notebook.multiCursor.enabled": {
      "markdownDescription": "Experimental. Enables a limited set of multi cursor controls across multiple cells in the notebook editor. Currently supported are core editor actions (typing/cut/copy/paste/composition) and a limited subset of editor commands.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.navigation.allowNavigateToSurroundingCells": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.outline.showCodeCells": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "When enabled, notebook outline shows code cells.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.outline.showCodeCellSymbols": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled, notebook outline shows code cell symbols. Relies on `notebook.outline.showCodeCells` being enabled.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.outline.showMarkdownHeadersOnly": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled, notebook outline will show only markdown cells containing a header.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.output.fontFamily": {
      "markdownDescription": "The font family of the output text within notebook cells. When set to empty, the `#editor.fontFamily#` is used.",
      "type": "string",
      "tags": [
        "notebookLayout",
        "notebookOutputLayout"
      ],
      "default": "",
      "scope": 4,
      "restricted": false
    },
    "notebook.output.fontSize": {
      "markdownDescription": "Font size for the output text within notebook cells. When set to 0, `#editor.fontSize#` is used.",
      "type": "number",
      "default": 0,
      "tags": [
        "notebookLayout",
        "notebookOutputLayout"
      ],
      "defaultDefaultValue": 0,
      "scope": 4,
      "restricted": false
    },
    "notebook.output.lineHeight": {
      "markdownDescription": "Line height of the output text within notebook cells.\n - When set to 0, editor line height is used.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values.",
      "type": "number",
      "default": 0,
      "tags": [
        "notebookLayout",
        "notebookOutputLayout"
      ],
      "defaultDefaultValue": 0,
      "scope": 4,
      "restricted": false
    },
    "notebook.output.linkifyFilePaths": {
      "description": "Control whether to disable filepath links in the output of notebook cells.",
      "type": "boolean",
      "default": true,
      "tags": [
        "notebookOutputLayout"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.output.minimalErrorRendering": {
      "description": "Control whether to render error output in a minimal style.",
      "type": "boolean",
      "default": false,
      "tags": [
        "notebookOutputLayout"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.output.scrolling": {
      "markdownDescription": "Initially render notebook outputs in a scrollable region when longer than the limit.",
      "type": "boolean",
      "tags": [
        "notebookLayout",
        "notebookOutputLayout"
      ],
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.output.textLineLimit": {
      "markdownDescription": "Controls how many lines of text are displayed in a text output. If `#notebook.output.scrolling#` is enabled, this setting is used to determine the scroll height of the output.",
      "type": "number",
      "default": 30,
      "tags": [
        "notebookLayout",
        "notebookOutputLayout"
      ],
      "minimum": 1,
      "defaultDefaultValue": 30,
      "scope": 4,
      "restricted": false
    },
    "notebook.output.wordWrap": {
      "markdownDescription": "Controls whether the lines in output should wrap.",
      "type": "boolean",
      "tags": [
        "notebookLayout",
        "notebookOutputLayout"
      ],
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.scrolling.revealNextCellOnExecute": {
      "markdownDescription": "How far to scroll when revealing the next cell upon running notebook.cell.executeAndSelectBelow.",
      "type": "string",
      "enum": [
        "firstLine",
        "fullCell",
        "none"
      ],
      "markdownEnumDescriptions": [
        "Scroll to reveal the first line of the next cell.",
        "Scroll to fully reveal the next cell.",
        "Do not scroll."
      ],
      "default": "fullCell",
      "defaultDefaultValue": "fullCell",
      "scope": 4,
      "restricted": false
    },
    "notebook.showCellStatusBar": {
      "description": "Whether the cell status bar should be shown.",
      "type": "string",
      "enum": [
        "hidden",
        "visible",
        "visibleAfterExecute"
      ],
      "enumDescriptions": [
        "The cell Status bar is always hidden.",
        "The cell Status bar is always visible.",
        "The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status."
      ],
      "default": "visible",
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": "visible",
      "scope": 4,
      "restricted": false
    },
    "notebook.showFoldingControls": {
      "description": "Controls when the Markdown header folding arrow is shown.",
      "type": "string",
      "enum": [
        "always",
        "mouseover",
        "never"
      ],
      "enumDescriptions": [
        "The folding controls are always visible.",
        "The folding controls are visible only on mouseover.",
        "Never show the folding controls and reduce the gutter size."
      ],
      "default": "mouseover",
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": "mouseover",
      "scope": 4,
      "restricted": false
    },
    "notebook.stickyScroll.enabled": {
      "description": "Experimental. Control whether to render notebook Sticky Scroll headers in the notebook editor.",
      "type": "boolean",
      "default": false,
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "notebook.stickyScroll.mode": {
      "description": "Control whether nested sticky lines appear to stack flat or indented.",
      "type": "string",
      "enum": [
        "flat",
        "indented"
      ],
      "enumDescriptions": [
        "Nested sticky lines appear flat.",
        "Nested sticky lines appear indented."
      ],
      "default": "indented",
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": "indented",
      "scope": 4,
      "restricted": false
    },
    "notebook.undoRedoPerCell": {
      "description": "Whether to use separate undo/redo stack for each cell.",
      "type": "boolean",
      "default": true,
      "tags": [
        "notebookLayout"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "notebook.variablesView": {
      "markdownDescription": "Enable the experimental notebook variables view within the debug panel.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "npm.autoDetect": {
      "type": "string",
      "enum": [
        "off",
        "on"
      ],
      "default": "on",
      "scope": 5,
      "description": "Controls whether npm scripts should be automatically detected.",
      "source": {
        "id": "vscode.npm",
        "displayName": "NPM support for VS Code"
      },
      "defaultDefaultValue": "on",
      "restricted": false
    },
    "npm.enableRunFromFolder": {
      "type": "boolean",
      "default": false,
      "scope": 5,
      "description": "Enable running npm scripts contained in a folder from the Explorer context menu.",
      "source": {
        "id": "vscode.npm",
        "displayName": "NPM support for VS Code"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "npm.enableScriptExplorer": {
      "type": "boolean",
      "default": false,
      "scope": 5,
      "deprecationMessage": "The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.",
      "description": "Enable an explorer view for npm scripts when there is no top-level 'package.json' file.",
      "source": {
        "id": "vscode.npm",
        "displayName": "NPM support for VS Code"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "npm.exclude": {
      "type": [
        "string",
        "array"
      ],
      "items": {
        "type": "string"
      },
      "description": "Configure glob patterns for folders that should be excluded from automatic script detection.",
      "scope": 5,
      "source": {
        "id": "vscode.npm",
        "displayName": "NPM support for VS Code"
      },
      "default": "",
      "restricted": false
    },
    "npm.fetchOnlinePackageInfo": {
      "type": "boolean",
      "description": "Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.",
      "default": true,
      "scope": 4,
      "tags": [
        "usesOnlineServices"
      ],
      "source": {
        "id": "vscode.npm",
        "displayName": "NPM support for VS Code"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "npm.packageManager": {
      "scope": 5,
      "type": "string",
      "enum": [
        "auto",
        "bun",
        "npm",
        "pnpm",
        "yarn"
      ],
      "enumDescriptions": [
        "Auto-detect which package manager to use based on lock files and installed package managers.",
        "Use bun as the package manager.",
        "Use npm as the package manager.",
        "Use pnpm as the package manager.",
        "Use yarn as the package manager."
      ],
      "default": "auto",
      "description": "The package manager used to install dependencies.",
      "source": {
        "id": "vscode.npm",
        "displayName": "NPM support for VS Code"
      },
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "npm.runSilent": {
      "type": "boolean",
      "default": false,
      "scope": 5,
      "markdownDescription": "Run npm commands with the `--silent` option.",
      "source": {
        "id": "vscode.npm",
        "displayName": "NPM support for VS Code"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "npm.scriptExplorerAction": {
      "type": "string",
      "enum": [
        "open",
        "run"
      ],
      "markdownDescription": "The default click action used in the NPM Scripts Explorer: `open` or `run`, the default is `open`.",
      "scope": 4,
      "default": "open",
      "source": {
        "id": "vscode.npm",
        "displayName": "NPM support for VS Code"
      },
      "defaultDefaultValue": "open",
      "restricted": false
    },
    "npm.scriptExplorerExclude": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "markdownDescription": "An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.",
      "scope": 5,
      "default": [],
      "source": {
        "id": "vscode.npm",
        "displayName": "NPM support for VS Code"
      },
      "defaultDefaultValue": [],
      "restricted": false
    },
    "npm.scriptHover": {
      "type": "boolean",
      "description": "Display hover with 'Run' and 'Debug' commands for scripts.",
      "default": true,
      "scope": 4,
      "source": {
        "id": "vscode.npm",
        "displayName": "NPM support for VS Code"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "npm.scriptRunner": {
      "scope": 5,
      "type": "string",
      "enum": [
        "auto",
        "bun",
        "node",
        "npm",
        "pnpm",
        "yarn"
      ],
      "enumDescriptions": [
        "Auto-detect which script runner to use based on lock files and installed package managers.",
        "Use bun as the script runner.",
        "Use Node.js as the script runner.",
        "Use npm as the script runner.",
        "Use pnpm as the script runner.",
        "Use yarn as the script runner."
      ],
      "default": "auto",
      "description": "The script runner used to run scripts.",
      "source": {
        "id": "vscode.npm",
        "displayName": "NPM support for VS Code"
      },
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "outline.collapseItems": {
      "description": "Controls whether Outline items are collapsed or expanded.",
      "type": "string",
      "scope": 6,
      "enum": [
        "alwaysCollapse",
        "alwaysExpand"
      ],
      "enumDescriptions": [
        "Collapse all items.",
        "Expand all items."
      ],
      "default": "alwaysExpand",
      "defaultDefaultValue": "alwaysExpand",
      "restricted": false
    },
    "outline.icons": {
      "description": "Render Outline elements with icons.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "outline.problems.badges": {
      "markdownDescription": "Use badges for errors and warnings on Outline elements. Overwritten by `#problems.visibility#` when it is off.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "outline.problems.colors": {
      "markdownDescription": "Use colors for errors and warnings on Outline elements. Overwritten by `#problems.visibility#` when it is off.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "outline.problems.enabled": {
      "markdownDescription": "Show errors and warnings on Outline elements. Overwritten by `#problems.visibility#` when it is off.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "outline.showArrays": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `array`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showBooleans": {
      "type": "boolean",
      "scope": 6,
      "default": true,
      "markdownDescription": "When enabled, Outline shows `boolean`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showClasses": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `class`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showConstants": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `constant`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showConstructors": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `constructor`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showEnumMembers": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `enumMember`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showEnums": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `enum`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showEvents": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `event`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showFields": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `field`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showFiles": {
      "type": "boolean",
      "scope": 6,
      "default": true,
      "markdownDescription": "When enabled, Outline shows `file`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showFunctions": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `function`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showInterfaces": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `interface`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showKeys": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `key`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showMethods": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `method`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showModules": {
      "type": "boolean",
      "scope": 6,
      "default": true,
      "markdownDescription": "When enabled, Outline shows `module`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showNamespaces": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `namespace`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showNull": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `null`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showNumbers": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `number`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showObjects": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `object`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showOperators": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `operator`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showPackages": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `package`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showProperties": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `property`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showStrings": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `string`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showStructs": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `struct`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showTypeParameters": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `typeParameter`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "outline.showVariables": {
      "type": "boolean",
      "default": true,
      "scope": 6,
      "markdownDescription": "When enabled, Outline shows `variable`-symbols.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "output.smartScroll.enabled": {
      "type": "boolean",
      "description": "Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.",
      "default": true,
      "scope": 4,
      "tags": [
        "output"
      ],
      "defaultDefaultValue": true,
      "restricted": false
    },
    "php.suggest.basic": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.",
      "scope": 4,
      "source": {
        "id": "vscode.php-language-features",
        "displayName": "PHP Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "php.validate.enable": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable built-in PHP validation.",
      "scope": 4,
      "source": {
        "id": "vscode.php-language-features",
        "displayName": "PHP Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "php.validate.executablePath": {
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "description": "Points to the PHP executable.",
      "scope": 7,
      "source": {
        "id": "vscode.php-language-features",
        "displayName": "PHP Language Features"
      },
      "defaultDefaultValue": null,
      "restricted": true
    },
    "php.validate.run": {
      "type": "string",
      "enum": [
        "onSave",
        "onType"
      ],
      "default": "onSave",
      "description": "Whether the linter is run on save or on type.",
      "scope": 4,
      "source": {
        "id": "vscode.php-language-features",
        "displayName": "PHP Language Features"
      },
      "defaultDefaultValue": "onSave",
      "restricted": false
    },
    "problems.autoReveal": {
      "description": "Controls whether Problems view should automatically reveal files when opening them.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "problems.decorations.enabled": {
      "markdownDescription": "Show Errors & Warnings on files and folder. Overwritten by `#problems.visibility#` when it is off.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "problems.defaultViewMode": {
      "description": "Controls the default view mode of the Problems view.",
      "type": "string",
      "default": "tree",
      "enum": [
        "table",
        "tree"
      ],
      "defaultDefaultValue": "tree",
      "scope": 4,
      "restricted": false
    },
    "problems.showCurrentInStatus": {
      "description": "When enabled shows the current problem in the status bar.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "problems.sortOrder": {
      "description": "Controls the order in which problems are navigated.",
      "type": "string",
      "default": "severity",
      "enum": [
        "position",
        "severity"
      ],
      "enumDescriptions": [
        "Navigate problems ordered by position",
        "Navigate problems ordered by severity"
      ],
      "defaultDefaultValue": "severity",
      "scope": 4,
      "restricted": false
    },
    "problems.visibility": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the problems are visible throughout the editor and workbench.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "references.preferredLocation": {
      "description": "Controls whether 'Peek References' or 'Find References' is invoked when selecting CodeLens references.",
      "type": "string",
      "default": "peek",
      "enum": [
        "peek",
        "view"
      ],
      "enumDescriptions": [
        "Show references in peek editor.",
        "Show references in separate view."
      ],
      "scope": 4,
      "source": {
        "id": "vscode.references-view",
        "displayName": "Reference Search View"
      },
      "defaultDefaultValue": "peek",
      "restricted": false
    },
    "remote.autoForwardPorts": {
      "type": "boolean",
      "markdownDescription": "When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded. Also see `#remote.autoForwardPortsSource#`.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "remote.autoForwardPortsFallback": {
      "type": "number",
      "default": 20,
      "markdownDescription": "The number of auto forwarded ports that will trigger the switch from `process` to `hybrid` when automatically forwarding ports and `remote.autoForwardPortsSource` is set to `process` by default. Set to `0` to disable the fallback. When `remote.autoForwardPortsFallback` hasn't been configured, but `remote.autoForwardPortsSource` has, `remote.autoForwardPortsFallback` will be treated as though it's set to `0`.",
      "defaultDefaultValue": 20,
      "scope": 4,
      "restricted": false
    },
    "remote.autoForwardPortsSource": {
      "type": "string",
      "markdownDescription": "Sets the source from which ports are automatically forwarded when `#remote.autoForwardPorts#` is true. When `#remote.autoForwardPorts#` is false, `#remote.autoForwardPortsSource#` will be used to find information about ports that have already been forwarded. On Windows and macOS remotes, the `process` and `hybrid` options have no effect and `output` will be used.",
      "enum": [
        "hybrid",
        "output",
        "process"
      ],
      "enumDescriptions": [
        "Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports will be \"un-forwarded\" by watching for processes that listen on that port to be terminated.",
        "Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be \"un-forwarded\" until reload or until the port is closed by the user in the Ports view.",
        "Ports will be automatically forwarded when discovered by watching for processes that are started and include a port."
      ],
      "default": "process",
      "defaultDefaultValue": "process",
      "scope": 4,
      "restricted": false
    },
    "remote.defaultExtensionsIfInstalledLocally": {
      "type": "array",
      "markdownDescription": "List of extensions to install upon connection to a remote when already installed locally.",
      "default": [
        "GitHub.copilot",
        "GitHub.copilot-chat",
        "GitHub.vscode-pull-request-github"
      ],
      "items": {
        "type": "string",
        "pattern": "([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$",
        "patternErrorMessage": "Extension identifier must be in format \"publisher.name\"."
      },
      "defaultDefaultValue": [
        "GitHub.copilot",
        "GitHub.copilot-chat",
        "GitHub.vscode-pull-request-github"
      ],
      "scope": 4,
      "restricted": false
    },
    "remote.downloadExtensionsLocally": {
      "type": "boolean",
      "markdownDescription": "When enabled extensions are downloaded locally and installed on remote.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "remote.extensionKind": {
      "type": "object",
      "markdownDescription": "Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.",
      "patternProperties": {
        "([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$": {
          "oneOf": [
            {
              "$ref": "#/$defs/_288"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/_288"
              }
            }
          ],
          "default": [
            "ui"
          ]
        }
      },
      "default": {
        "pub.name": [
          "ui"
        ]
      },
      "defaultDefaultValue": {
        "pub.name": [
          "ui"
        ]
      },
      "scope": 4,
      "restricted": false
    },
    "remote.forwardOnOpen": {
      "type": "boolean",
      "description": "Controls whether local URLs with a port will be forwarded when opened from the terminal and the debug console.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "remote.localPortHost": {
      "type": "string",
      "enum": [
        "allInterfaces",
        "localhost"
      ],
      "default": "localhost",
      "description": "Specifies the local host name that will be used for port forwarding.",
      "defaultDefaultValue": "localhost",
      "scope": 4,
      "restricted": false
    },
    "remote.otherPortsAttributes": {
      "type": "object",
      "properties": {
        "elevateIfNeeded": {
          "$ref": "#/$defs/_289"
        },
        "label": {
          "$ref": "#/$defs/_290"
        },
        "onAutoForward": {
          "type": "string",
          "enum": [
            "ignore",
            "notify",
            "openBrowser",
            "openPreview",
            "silent"
          ],
          "enumDescriptions": [
            "This port will not be automatically forwarded.",
            "Shows a notification when a port is automatically forwarded.",
            "Opens the browser when the port is automatically forwarded. Depending on your settings, this could open an embedded browser.",
            "Opens a preview in the same window when the port is automatically forwarded.",
            "Shows no notification and takes no action when this port is automatically forwarded."
          ],
          "description": "Defines the action that occurs when the port is discovered for automatic forwarding",
          "default": "notify"
        },
        "protocol": {
          "$ref": "#/$defs/_292"
        },
        "requireLocalPort": {
          "$ref": "#/$defs/_291"
        }
      },
      "defaultSnippets": [
        {
          "body": {
            "onAutoForward": "ignore"
          }
        }
      ],
      "markdownDescription": "Set default properties that are applied to all ports that don't get properties from the setting `#remote.portsAttributes#`. For example:\n\n```\n{\n  \"onAutoForward\": \"ignore\"\n}\n```",
      "additionalProperties": false,
      "default": {},
      "scope": 4,
      "restricted": false
    },
    "remote.portsAttributes": {
      "type": "object",
      "patternProperties": {
        "(^\\d+(-\\d+)?$)|(.+)": {
          "type": "object",
          "description": "A port, range of ports (ex. \"40000-55000\"), host and port (ex. \"db:1234\"), or regular expression (ex. \".+\\\\/server.js\").  For a port number or range, the attributes will apply to that port number or range of port numbers. Attributes which use a regular expression will apply to ports whose associated process command line matches the expression.",
          "properties": {
            "elevateIfNeeded": {
              "$ref": "#/$defs/_289"
            },
            "label": {
              "$ref": "#/$defs/_290"
            },
            "onAutoForward": {
              "type": "string",
              "enum": [
                "ignore",
                "notify",
                "openBrowser",
                "openBrowserOnce",
                "openPreview",
                "silent"
              ],
              "enumDescriptions": [
                "This port will not be automatically forwarded.",
                "Shows a notification when a port is automatically forwarded.",
                "Opens the browser when the port is automatically forwarded. Depending on your settings, this could open an embedded browser.",
                "Opens the browser when the port is automatically forwarded, but only the first time the port is forward during a session. Depending on your settings, this could open an embedded browser.",
                "Opens a preview in the same window when the port is automatically forwarded.",
                "Shows no notification and takes no action when this port is automatically forwarded."
              ],
              "description": "Defines the action that occurs when the port is discovered for automatic forwarding",
              "default": "notify"
            },
            "protocol": {
              "$ref": "#/$defs/_292"
            },
            "requireLocalPort": {
              "$ref": "#/$defs/_291"
            }
          },
          "default": {
            "label": "Application",
            "onAutoForward": "notify"
          }
        }
      },
      "markdownDescription": "Set properties that are applied when a specific port number is forwarded. For example:\n\n```\n\"3000\": {\n  \"label\": \"Application\"\n},\n\"40000-55000\": {\n  \"onAutoForward\": \"ignore\"\n},\n\".+\\\\/server.js\": {\n \"onAutoForward\": \"openPreview\"\n}\n```",
      "defaultSnippets": [
        {
          "body": {
            "${1:3000}": {
              "label": "${2:Application}",
              "onAutoForward": "openPreview"
            }
          }
        }
      ],
      "errorMessage": "Must be a port number, range of port numbers, or regular expression.",
      "additionalProperties": false,
      "default": {
        "443": {
          "protocol": "https"
        },
        "8443": {
          "protocol": "https"
        }
      },
      "defaultDefaultValue": {
        "443": {
          "protocol": "https"
        },
        "8443": {
          "protocol": "https"
        }
      },
      "scope": 4,
      "restricted": false
    },
    "remote.restoreForwardedPorts": {
      "type": "boolean",
      "markdownDescription": "Restores the ports you forwarded in a workspace.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "scm.alwaysShowActions": {
      "type": "boolean",
      "description": "Controls whether inline actions are always visible in the Source Control view.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 5,
      "restricted": false
    },
    "scm.alwaysShowRepositories": {
      "type": "boolean",
      "markdownDescription": "Controls whether repositories should always be visible in the Source Control view.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 5,
      "restricted": false
    },
    "scm.autoReveal": {
      "type": "boolean",
      "description": "Controls whether the Source Control view should automatically reveal and select files when opening them.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "scm.compactFolders": {
      "type": "boolean",
      "description": "Controls whether the Source Control view should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "scm.countBadge": {
      "type": "string",
      "enum": [
        "all",
        "focused",
        "off"
      ],
      "enumDescriptions": [
        "Show the sum of all Source Control Provider count badges.",
        "Show the count badge of the focused Source Control Provider.",
        "Disable the Source Control count badge."
      ],
      "description": "Controls the count badge on the Source Control icon on the Activity Bar.",
      "default": "all",
      "defaultDefaultValue": "all",
      "scope": 5,
      "restricted": false
    },
    "scm.defaultViewMode": {
      "type": "string",
      "enum": [
        "list",
        "tree"
      ],
      "enumDescriptions": [
        "Show the repository changes as a list.",
        "Show the repository changes as a tree."
      ],
      "description": "Controls the default Source Control repository view mode.",
      "default": "list",
      "defaultDefaultValue": "list",
      "scope": 5,
      "restricted": false
    },
    "scm.defaultViewSortKey": {
      "type": "string",
      "enum": [
        "name",
        "path",
        "status"
      ],
      "enumDescriptions": [
        "Sort the repository changes by file name.",
        "Sort the repository changes by path.",
        "Sort the repository changes by Source Control status."
      ],
      "description": "Controls the default Source Control repository changes sort order when viewed as a list.",
      "default": "path",
      "defaultDefaultValue": "path",
      "scope": 5,
      "restricted": false
    },
    "scm.diffDecorations": {
      "type": "string",
      "enum": [
        "all",
        "gutter",
        "minimap",
        "none",
        "overview"
      ],
      "enumDescriptions": [
        "Show the diff decorations in all available locations.",
        "Show the diff decorations only in the editor gutter.",
        "Show the diff decorations only in the minimap.",
        "Do not show the diff decorations.",
        "Show the diff decorations only in the overview ruler."
      ],
      "default": "all",
      "description": "Controls diff decorations in the editor.",
      "defaultDefaultValue": "all",
      "scope": 5,
      "restricted": false
    },
    "scm.diffDecorationsGutterAction": {
      "type": "string",
      "enum": [
        "diff",
        "none"
      ],
      "enumDescriptions": [
        "Show the inline diff Peek view on click.",
        "Do nothing."
      ],
      "description": "Controls the behavior of Source Control diff gutter decorations.",
      "default": "diff",
      "defaultDefaultValue": "diff",
      "scope": 5,
      "restricted": false
    },
    "scm.diffDecorationsGutterPattern": {
      "type": "object",
      "description": "Controls whether a pattern is used for the diff decorations in gutter.",
      "additionalProperties": false,
      "properties": {
        "added": {
          "type": "boolean",
          "description": "Use pattern for the diff decorations in gutter for added lines."
        },
        "modified": {
          "type": "boolean",
          "description": "Use pattern for the diff decorations in gutter for modified lines."
        }
      },
      "default": {
        "added": false,
        "modified": true
      },
      "defaultDefaultValue": {
        "added": false,
        "modified": true
      },
      "scope": 5,
      "restricted": false
    },
    "scm.diffDecorationsGutterVisibility": {
      "type": "string",
      "enum": [
        "always",
        "hover"
      ],
      "enumDescriptions": [
        "Show the diff decorator in the gutter at all times.",
        "Show the diff decorator in the gutter only on hover."
      ],
      "description": "Controls the visibility of the Source Control diff decorator in the gutter.",
      "default": "always",
      "defaultDefaultValue": "always",
      "scope": 5,
      "restricted": false
    },
    "scm.diffDecorationsGutterWidth": {
      "type": "number",
      "enum": [
        1,
        2,
        3,
        4,
        5
      ],
      "default": 3,
      "description": "Controls the width(px) of diff decorations in gutter (added & modified).",
      "defaultDefaultValue": 3,
      "scope": 5,
      "restricted": false
    },
    "scm.diffDecorationsIgnoreTrimWhitespace": {
      "type": "string",
      "enum": [
        "false",
        "inherit",
        "true"
      ],
      "enumDescriptions": [
        "Do not ignore leading and trailing whitespace.",
        "Inherit from `diffEditor.ignoreTrimWhitespace`.",
        "Ignore leading and trailing whitespace."
      ],
      "description": "Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations.",
      "default": "false",
      "defaultDefaultValue": "false",
      "scope": 5,
      "restricted": false
    },
    "scm.graph.badges": {
      "type": "string",
      "enum": [
        "all",
        "filter"
      ],
      "enumDescriptions": [
        "Show badges of all history item groups in the Source Control Graph view.",
        "Show only the badges of history item groups used as a filter in the Source Control Graph view."
      ],
      "description": "Controls which badges are shown in the Source Control Graph view. The badges are shown on the right side of the graph indicating the names of history item groups.",
      "default": "filter",
      "defaultDefaultValue": "filter",
      "scope": 5,
      "restricted": false
    },
    "scm.graph.pageOnScroll": {
      "type": "boolean",
      "description": "Controls whether the Source Control Graph view will load the next page of items when you scroll to the end of the list.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "scm.graph.pageSize": {
      "type": "number",
      "description": "The number of items to show in the Source Control Graph view by default and when loading more items.",
      "minimum": 1,
      "maximum": 1000,
      "default": 50,
      "defaultDefaultValue": 50,
      "scope": 5,
      "restricted": false
    },
    "scm.inputFontFamily": {
      "type": "string",
      "markdownDescription": "Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `#editor.fontFamily#`'s value, or a custom font family.",
      "default": "default",
      "defaultDefaultValue": "default",
      "scope": 5,
      "restricted": false
    },
    "scm.inputFontSize": {
      "type": "number",
      "markdownDescription": "Controls the font size for the input message in pixels.",
      "default": 13,
      "defaultDefaultValue": 13,
      "scope": 5,
      "restricted": false
    },
    "scm.inputMaxLineCount": {
      "type": "number",
      "markdownDescription": "Controls the maximum number of lines that the input will auto-grow to.",
      "minimum": 1,
      "maximum": 50,
      "default": 10,
      "defaultDefaultValue": 10,
      "scope": 5,
      "restricted": false
    },
    "scm.inputMinLineCount": {
      "type": "number",
      "markdownDescription": "Controls the minimum number of lines that the input will auto-grow from.",
      "minimum": 1,
      "maximum": 50,
      "default": 1,
      "defaultDefaultValue": 1,
      "scope": 5,
      "restricted": false
    },
    "scm.providerCountBadge": {
      "type": "string",
      "enum": [
        "auto",
        "hidden",
        "visible"
      ],
      "enumDescriptions": [
        "Only show count badge for Source Control Provider when non-zero.",
        "Hide Source Control Provider count badges.",
        "Show Source Control Provider count badges."
      ],
      "markdownDescription": "Controls the count badges on Source Control Provider headers. These headers appear in the Source Control view when there is more than one provider or when the `#scm.alwaysShowRepositories#` setting is enabled, and in the Source Control Repositories view.",
      "default": "hidden",
      "defaultDefaultValue": "hidden",
      "scope": 5,
      "restricted": false
    },
    "scm.repositories.sortOrder": {
      "type": "string",
      "enum": [
        "discovery time",
        "name",
        "path"
      ],
      "enumDescriptions": [
        "Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected.",
        "Repositories in the Source Control Repositories and Source Control views are sorted by repository name.",
        "Repositories in the Source Control Repositories and Source Control views are sorted by repository path."
      ],
      "description": "Controls the sort order of the repositories in the source control repositories view.",
      "default": "discovery time",
      "defaultDefaultValue": "discovery time",
      "scope": 5,
      "restricted": false
    },
    "scm.repositories.visible": {
      "type": "number",
      "description": "Controls how many repositories are visible in the Source Control Repositories section. Set to 0, to be able to manually resize the view.",
      "default": 10,
      "defaultDefaultValue": 10,
      "scope": 5,
      "restricted": false
    },
    "scm.showActionButton": {
      "type": "boolean",
      "markdownDescription": "Controls whether an action button can be shown in the Source Control view.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "scm.showInputActionButton": {
      "type": "boolean",
      "markdownDescription": "Controls whether an action button can be shown in the Source Control input.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 5,
      "restricted": false
    },
    "scm.workingSets.default": {
      "type": "string",
      "enum": [
        "current",
        "empty"
      ],
      "enumDescriptions": [
        "Use the current working set when switching to a source control history item group that does not have a working set.",
        "Use an empty working set when switching to a source control history item group that does not have a working set."
      ],
      "description": "Controls the default working set to use when switching to a source control history item group that does not have a working set.",
      "default": "current",
      "defaultDefaultValue": "current",
      "scope": 5,
      "restricted": false
    },
    "scm.workingSets.enabled": {
      "type": "boolean",
      "description": "Controls whether to store editor working sets when switching between source control history item groups.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 5,
      "restricted": false
    },
    "screencastMode.fontSize": {
      "type": "number",
      "default": 56,
      "minimum": 20,
      "maximum": 100,
      "description": "Controls the font size (in pixels) of the screencast mode keyboard.",
      "defaultDefaultValue": 56,
      "scope": 4,
      "restricted": false
    },
    "screencastMode.keyboardOptions": {
      "type": "object",
      "description": "Options for customizing the keyboard overlay in screencast mode.",
      "properties": {
        "showCommandGroups": {
          "type": "boolean",
          "default": false,
          "description": "Show command group names, when commands are also shown."
        },
        "showCommands": {
          "type": "boolean",
          "default": true,
          "description": "Show command names."
        },
        "showKeybindings": {
          "type": "boolean",
          "default": true,
          "description": "Show keyboard shortcuts."
        },
        "showKeys": {
          "type": "boolean",
          "default": true,
          "description": "Show raw keys."
        },
        "showSingleEditorCursorMoves": {
          "type": "boolean",
          "default": true,
          "description": "Show single editor cursor move commands."
        }
      },
      "default": {
        "showCommandGroups": false,
        "showCommands": true,
        "showKeybindings": true,
        "showKeys": true,
        "showSingleEditorCursorMoves": true
      },
      "additionalProperties": false,
      "defaultDefaultValue": {
        "showCommandGroups": false,
        "showCommands": true,
        "showKeybindings": true,
        "showKeys": true,
        "showSingleEditorCursorMoves": true
      },
      "scope": 4,
      "restricted": false
    },
    "screencastMode.keyboardOverlayTimeout": {
      "type": "number",
      "default": 800,
      "minimum": 500,
      "maximum": 5000,
      "description": "Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.",
      "defaultDefaultValue": 800,
      "scope": 4,
      "restricted": false
    },
    "screencastMode.mouseIndicatorColor": {
      "type": "string",
      "format": "color-hex",
      "default": "#FF0000",
      "description": "Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.",
      "defaultDefaultValue": "#FF0000",
      "scope": 4,
      "restricted": false
    },
    "screencastMode.mouseIndicatorSize": {
      "type": "number",
      "default": 20,
      "minimum": 20,
      "maximum": 100,
      "description": "Controls the size (in pixels) of the mouse indicator in screencast mode.",
      "defaultDefaultValue": 20,
      "scope": 4,
      "restricted": false
    },
    "screencastMode.verticalOffset": {
      "type": "number",
      "default": 20,
      "minimum": 0,
      "maximum": 90,
      "description": "Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.",
      "defaultDefaultValue": 20,
      "scope": 4,
      "restricted": false
    },
    "scss.completion.completePropertyWithSemicolon": {
      "$ref": "#/$defs/_333"
    },
    "scss.completion.triggerPropertyValueCompletion": {
      "$ref": "#/$defs/_332"
    },
    "scss.format.braceStyle": {
      "$ref": "#/$defs/_358"
    },
    "scss.format.enable": {
      "type": "boolean",
      "scope": 4,
      "default": true,
      "description": "Enable/disable default SCSS formatter.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "scss.format.maxPreserveNewLines": {
      "type": [
        "number",
        "null"
      ],
      "scope": 5,
      "default": null,
      "markdownDescription": "Maximum number of line breaks to be preserved in one chunk, when `#scss.format.preserveNewLines#` is enabled.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": null,
      "restricted": false
    },
    "scss.format.newlineBetweenRules": {
      "$ref": "#/$defs/_356"
    },
    "scss.format.newlineBetweenSelectors": {
      "$ref": "#/$defs/_355"
    },
    "scss.format.preserveNewLines": {
      "$ref": "#/$defs/_359"
    },
    "scss.format.spaceAroundSelectorSeparator": {
      "$ref": "#/$defs/_357"
    },
    "scss.hover.documentation": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Show property and value documentation in SCSS hovers.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "scss.hover.references": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Show references to MDN in SCSS hovers.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "scss.lint.argumentsInColorFunction": {
      "$ref": "#/$defs/_345"
    },
    "scss.lint.boxModel": {
      "$ref": "#/$defs/_340"
    },
    "scss.lint.compatibleVendorPrefixes": {
      "$ref": "#/$defs/_335"
    },
    "scss.lint.duplicateProperties": {
      "$ref": "#/$defs/_337"
    },
    "scss.lint.emptyRules": {
      "$ref": "#/$defs/_338"
    },
    "scss.lint.float": {
      "$ref": "#/$defs/_352"
    },
    "scss.lint.fontFaceProperties": {
      "$ref": "#/$defs/_343"
    },
    "scss.lint.hexColorLength": {
      "$ref": "#/$defs/_344"
    },
    "scss.lint.idSelector": {
      "$ref": "#/$defs/_353"
    },
    "scss.lint.ieHack": {
      "$ref": "#/$defs/_348"
    },
    "scss.lint.important": {
      "$ref": "#/$defs/_351"
    },
    "scss.lint.importStatement": {
      "$ref": "#/$defs/_339"
    },
    "scss.lint.propertyIgnoredDueToDisplay": {
      "$ref": "#/$defs/_350"
    },
    "scss.lint.universalSelector": {
      "$ref": "#/$defs/_341"
    },
    "scss.lint.unknownAtRules": {
      "$ref": "#/$defs/_354"
    },
    "scss.lint.unknownProperties": {
      "$ref": "#/$defs/_346"
    },
    "scss.lint.unknownVendorSpecificProperties": {
      "$ref": "#/$defs/_349"
    },
    "scss.lint.validProperties": {
      "$ref": "#/$defs/_347"
    },
    "scss.lint.vendorPrefix": {
      "$ref": "#/$defs/_336"
    },
    "scss.lint.zeroUnits": {
      "$ref": "#/$defs/_342"
    },
    "scss.validate": {
      "$ref": "#/$defs/_334"
    },
    "search.actionsPosition": {
      "type": "string",
      "enum": [
        "auto",
        "right"
      ],
      "enumDescriptions": [
        "Position the actionbar to the right when the Search view is narrow, and immediately after the content when the Search view is wide.",
        "Always position the actionbar to the right."
      ],
      "default": "right",
      "description": "Controls the positioning of the actionbar on rows in the Search view.",
      "defaultDefaultValue": "right",
      "scope": 4,
      "restricted": false
    },
    "search.collapseResults": {
      "type": "string",
      "enum": [
        "alwaysCollapse",
        "alwaysExpand",
        "auto"
      ],
      "enumDescriptions": [
        "",
        "",
        "Files with less than 10 results are expanded. Others are collapsed."
      ],
      "default": "alwaysExpand",
      "description": "Controls whether the search results will be collapsed or expanded.",
      "defaultDefaultValue": "alwaysExpand",
      "scope": 4,
      "restricted": false
    },
    "search.decorations.badges": {
      "type": "boolean",
      "description": "Controls whether search file decorations should use badges.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "search.decorations.colors": {
      "type": "boolean",
      "description": "Controls whether search file decorations should use colors.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "search.defaultViewMode": {
      "type": "string",
      "enum": [
        "list",
        "tree"
      ],
      "default": "list",
      "enumDescriptions": [
        "Shows search results as a list.",
        "Shows search results as a tree."
      ],
      "description": "Controls the default search result view mode.",
      "defaultDefaultValue": "list",
      "scope": 4,
      "restricted": false
    },
    "search.exclude": {
      "type": "object",
      "markdownDescription": "Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and file search in quick open. To exclude files from the recently opened list in quick open, patterns must be absolute (for example `**/node_modules/**`). Inherits all glob patterns from the `#files.exclude#` setting.",
      "default": {
        "**/*.code-search": true,
        "**/bower_components": true,
        "**/node_modules": true
      },
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/$defs/_272"
          },
          {
            "$ref": "#/$defs/_327"
          }
        ]
      },
      "scope": 5,
      "defaultDefaultValue": {
        "**/*.code-search": true,
        "**/bower_components": true,
        "**/node_modules": true
      },
      "restricted": false
    },
    "search.experimental.closedNotebookRichContentResults": {
      "type": "boolean",
      "description": "Show notebook editor rich content results for closed notebooks. Please refresh your search results after changing this setting.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.followSymlinks": {
      "type": "boolean",
      "description": "Controls whether to follow symlinks while searching.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "search.location": {
      "type": "string",
      "enum": [
        "panel",
        "sidebar"
      ],
      "default": "sidebar",
      "description": "Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.",
      "deprecationMessage": "This setting is deprecated. You can drag the search icon to a new location instead.",
      "defaultDefaultValue": "sidebar",
      "scope": 4,
      "restricted": false
    },
    "search.maintainFileSearchCache": {
      "type": "boolean",
      "deprecationMessage": "The search cache is kept in the extension host which never shuts down, so this setting is no longer needed.",
      "description": "When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.maxResults": {
      "type": [
        "number",
        "null"
      ],
      "default": 20000,
      "markdownDescription": "Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.",
      "defaultDefaultValue": 20000,
      "scope": 4,
      "restricted": false
    },
    "search.mode": {
      "type": "string",
      "enum": [
        "newEditor",
        "reuseEditor",
        "view"
      ],
      "default": "view",
      "markdownDescription": "Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the Search view, or in a search editor.",
      "enumDescriptions": [
        "Search in a new search editor.",
        "Search in an existing search editor if present, otherwise in a new search editor.",
        "Search in the Search view, either in the panel or side bars."
      ],
      "defaultDefaultValue": "view",
      "scope": 4,
      "restricted": false
    },
    "search.quickAccess.preserveInput": {
      "type": "boolean",
      "description": "Controls whether the last typed input to Quick Search should be restored when opening it the next time.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.quickOpen.history.filterSortOrder": {
      "type": "string",
      "enum": [
        "default",
        "recency"
      ],
      "default": "default",
      "enumDescriptions": [
        "History entries are sorted by relevance based on the filter value used. More relevant entries appear first.",
        "History entries are sorted by recency. More recently opened entries appear first."
      ],
      "description": "Controls sorting order of editor history in quick open when filtering.",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "search.quickOpen.includeHistory": {
      "type": "boolean",
      "description": "Whether to include results from recently opened files in the file results for Quick Open.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "search.quickOpen.includeSymbols": {
      "type": "boolean",
      "description": "Whether to include results from a global symbol search in the file results for Quick Open.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.ripgrep.maxThreads": {
      "type": "number",
      "description": "Number of threads to use for searching. When set to 0, the engine automatically determines this value.",
      "default": 0,
      "defaultDefaultValue": 0,
      "scope": 4,
      "restricted": false
    },
    "search.searchEditor.defaultNumberOfContextLines": {
      "type": [
        "number",
        "null"
      ],
      "default": 1,
      "markdownDescription": "The default number of surrounding context lines to use when creating new Search Editors. If using `#search.searchEditor.reusePriorSearchConfiguration#`, this can be set to `null` (empty) to use the prior Search Editor's configuration.",
      "defaultDefaultValue": 1,
      "scope": 4,
      "restricted": false
    },
    "search.searchEditor.doubleClickBehaviour": {
      "type": "string",
      "enum": [
        "goToLocation",
        "openLocationToSide",
        "selectWord"
      ],
      "default": "goToLocation",
      "enumDescriptions": [
        "Double-clicking opens the result in the active editor group.",
        "Double-clicking opens the result in the editor group to the side, creating one if it does not yet exist.",
        "Double-clicking selects the word under the cursor."
      ],
      "markdownDescription": "Configure effect of double-clicking a result in a search editor.",
      "defaultDefaultValue": "goToLocation",
      "scope": 4,
      "restricted": false
    },
    "search.searchEditor.focusResultsOnSearch": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "When a search is triggered, focus the Search Editor results instead of the Search Editor input.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.searchEditor.reusePriorSearchConfiguration": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.searchEditor.singleClickBehaviour": {
      "type": "string",
      "enum": [
        "default",
        "peekDefinition"
      ],
      "default": "default",
      "enumDescriptions": [
        "Single-clicking does nothing.",
        "Single-clicking opens a Peek Definition window."
      ],
      "markdownDescription": "Configure effect of single-clicking a result in a search editor.",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "search.searchOnType": {
      "type": "boolean",
      "default": true,
      "description": "Search all files as you type.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "search.searchOnTypeDebouncePeriod": {
      "type": "number",
      "default": 300,
      "markdownDescription": "When `#search.searchOnType#` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `#search.searchOnType#` is disabled.",
      "defaultDefaultValue": 300,
      "scope": 4,
      "restricted": false
    },
    "search.searchView.keywordSuggestions": {
      "type": "boolean",
      "description": "Enable keyword suggestions in the Search view.",
      "default": false,
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.searchView.semanticSearchBehavior": {
      "type": "string",
      "description": "Controls the behavior of the semantic search results displayed in the Search view.",
      "enum": [
        "auto",
        "manual",
        "runOnEmpty"
      ],
      "default": "manual",
      "enumDescriptions": [
        "Request semantic results automatically with every search.",
        "Only request semantic search results manually.",
        "Request semantic results automatically only when text search results are empty."
      ],
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": "manual",
      "scope": 4,
      "restricted": false
    },
    "search.seedOnFocus": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Update the search query to the editor's selected text when focusing the Search view. This happens either on click or when triggering the `workbench.views.search.focus` command.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.seedWithNearestWord": {
      "type": "boolean",
      "default": false,
      "description": "Enable seeding search from the word nearest the cursor when the active editor has no selection.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.showLineNumbers": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether to show line numbers for search results.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.smartCase": {
      "type": "boolean",
      "description": "Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.sortOrder": {
      "type": "string",
      "enum": [
        "countAscending",
        "countDescending",
        "default",
        "fileNames",
        "modified",
        "type"
      ],
      "default": "default",
      "enumDescriptions": [
        "Results are sorted by count per file, in ascending order.",
        "Results are sorted by count per file, in descending order.",
        "Results are sorted by folder and file names, in alphabetical order.",
        "Results are sorted by file names ignoring folder order, in alphabetical order.",
        "Results are sorted by file last modified date, in descending order.",
        "Results are sorted by file extensions, in alphabetical order."
      ],
      "description": "Controls sorting order of search results.",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "search.useGlobalIgnoreFiles": {
      "type": "boolean",
      "markdownDescription": "Controls whether to use your global gitignore file (for example, from `$HOME/.config/git/ignore`) when searching for files. Requires `#search.useIgnoreFiles#` to be enabled.",
      "default": false,
      "scope": 5,
      "defaultDefaultValue": false,
      "restricted": false
    },
    "search.useIgnoreFiles": {
      "type": "boolean",
      "markdownDescription": "Controls whether to use `.gitignore` and `.ignore` files when searching for files.",
      "default": true,
      "scope": 5,
      "defaultDefaultValue": true,
      "restricted": false
    },
    "search.useParentIgnoreFiles": {
      "type": "boolean",
      "markdownDescription": "Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `#search.useIgnoreFiles#` to be enabled.",
      "default": false,
      "scope": 5,
      "defaultDefaultValue": false,
      "restricted": false
    },
    "search.usePCRE2": {
      "type": "boolean",
      "default": false,
      "description": "Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.",
      "deprecationMessage": "Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "search.useReplacePreview": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to open Replace Preview when selecting or replacing a match.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "search.useRipgrep": {
      "type": "boolean",
      "description": "This setting is deprecated and now falls back on \"search.usePCRE2\".",
      "deprecationMessage": "Deprecated. Consider \"search.usePCRE2\" for advanced regex feature support.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "simpleBrowser.focusLockIndicator.enabled": {
      "type": "boolean",
      "default": true,
      "title": "Focus Lock Indicator Enabled",
      "description": "Enable/disable the floating indicator that shows when focused in the simple browser.",
      "scope": 4,
      "source": {
        "id": "vscode.simple-browser",
        "displayName": "Simple Browser"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "task.allowAutomaticTasks": {
      "type": "string",
      "enum": [
        "off",
        "on"
      ],
      "enumDescriptions": [
        "Never",
        "Always"
      ],
      "description": "Enable automatic tasks - note that tasks won't run in an untrusted workspace.",
      "default": "on",
      "restricted": true,
      "defaultDefaultValue": "on",
      "scope": 4
    },
    "task.autoDetect": {
      "markdownDescription": "Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.",
      "type": "string",
      "enum": [
        "off",
        "on"
      ],
      "default": "on",
      "defaultDefaultValue": "on",
      "scope": 4,
      "restricted": false
    },
    "task.problemMatchers.neverPrompt": {
      "markdownDescription": "Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.",
      "oneOf": [
        {
          "type": "boolean",
          "markdownDescription": "Sets problem matcher prompting behavior for all tasks."
        },
        {
          "type": "object",
          "patternProperties": {
            ".*": {
              "type": "boolean"
            }
          },
          "markdownDescription": "An object containing task type-boolean pairs to never prompt for problem matchers on.",
          "default": {
            "shell": true
          }
        }
      ],
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "task.quickOpen.detail": {
      "markdownDescription": "Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "task.quickOpen.history": {
      "markdownDescription": "Controls the number of recent items tracked in task quick open dialog.",
      "type": "number",
      "default": 30,
      "minimum": 0,
      "maximum": 30,
      "defaultDefaultValue": 30,
      "scope": 4,
      "restricted": false
    },
    "task.quickOpen.showAll": {
      "type": "boolean",
      "description": "Causes the Tasks: Run Task command to use the slower \"show all\" behavior instead of the faster two level picker where tasks are grouped by provider.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "task.quickOpen.skip": {
      "type": "boolean",
      "description": "Controls whether the task quick pick is skipped when there is only one task to pick from.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "task.reconnection": {
      "type": "boolean",
      "description": "On window reload, reconnect to tasks that have problem matchers.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "task.saveBeforeRun": {
      "markdownDescription": "Save all dirty editors before running a task.",
      "type": "string",
      "enum": [
        "always",
        "never",
        "prompt"
      ],
      "enumDescriptions": [
        "Always saves all editors before running.",
        "Never saves editors before running.",
        "Prompts whether to save editors before running."
      ],
      "default": "always",
      "defaultDefaultValue": "always",
      "scope": 4,
      "restricted": false
    },
    "task.slowProviderWarning": {
      "markdownDescription": "Configures whether a warning is shown when a provider is slow",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "type": "string",
            "markdownDescription": "An array of task types to never show the slow provider warning."
          }
        },
        {
          "type": "boolean",
          "markdownDescription": "Sets the slow provider warning for all tasks."
        }
      ],
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "task.verboseLogging": {
      "type": "boolean",
      "description": "Enable verbose logging for tasks.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "telemetry.editStats.details.enabled": {
      "markdownDescription": "Controls whether to enable telemetry for detailed edit statistics (only sends statistics if general telemetry is enabled).",
      "type": "boolean",
      "default": false,
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "telemetry.editStats.enabled": {
      "markdownDescription": "Controls whether to enable telemetry for edit statistics (only sends statistics if general telemetry is enabled).",
      "type": "boolean",
      "default": true,
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "telemetry.editStats.showDecorations": {
      "markdownDescription": "Controls whether to show decorations for edit telemetry.",
      "type": "boolean",
      "default": false,
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "telemetry.editStats.showStatusBar": {
      "markdownDescription": "Controls whether to show the status bar for edit telemetry.",
      "type": "boolean",
      "default": false,
      "tags": [
        "experimental"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "telemetry.enableCrashReporter": {
      "type": "boolean",
      "description": "Enable crash reports to be collected. This helps us improve stability. \nThis option requires restart to take effect.",
      "default": true,
      "tags": [
        "usesOnlineServices",
        "telemetry"
      ],
      "markdownDeprecationMessage": "If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `#telemetry.telemetryLevel#` setting.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false,
      "deprecationMessage": "If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `#telemetry.telemetryLevel#` setting."
    },
    "telemetry.feedback.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable feedback mechanisms such as the issue reporter, surveys, and feedback options in features like Copilot Chat.",
      "policy": {
        "name": "EnableFeedback",
        "minimumVersion": "1.99"
      },
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.explorerKind": {
      "type": "string",
      "enum": [
        "both",
        "external",
        "integrated"
      ],
      "enumDescriptions": [
        "Show both integrated and external terminal actions.",
        "Show the external terminal action.",
        "Show the integrated terminal action."
      ],
      "default": "integrated",
      "description": "When opening a file from the Explorer in a terminal, determines what kind of terminal will be launched",
      "defaultDefaultValue": "integrated",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.accessibleViewFocusOnCommandExecution": {
      "markdownDescription": "Focus the terminal accessible view when a command is executed.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.accessibleViewPreserveCursorPosition": {
      "markdownDescription": "Preserve the cursor position on reopen of the terminal's accessible view rather than setting it to the bottom of the buffer.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.allowChords": {
      "markdownDescription": "Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `#terminal.integrated.commandsToSkipShell#`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.allowedLinkSchemes": {
      "description": "An array of strings containing the URI schemes that the terminal is allowed to open links for. By default, only a small subset of possible schemes are allowed for security reasons.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [
        "file",
        "http",
        "https",
        "mailto",
        "vscode",
        "vscode-insiders"
      ],
      "defaultDefaultValue": [
        "file",
        "http",
        "https",
        "mailto",
        "vscode",
        "vscode-insiders"
      ],
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.allowMnemonics": {
      "markdownDescription": "Whether to allow menubar mnemonics (for example Alt+F) to trigger the open of the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.altClickMovesCursor": {
      "markdownDescription": "If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `#editor.multiCursorModifier#` is set to `'alt'` (the default value). This may not work reliably depending on your shell.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.automationProfile.linux": {
      "restricted": true,
      "markdownDescription": "The terminal profile to use on Linux for automation-related terminal usage like tasks and debug.",
      "type": [
        "object",
        "null"
      ],
      "default": null,
      "anyOf": [
        {
          "$ref": "#/$defs/_273"
        },
        {
          "type": "null"
        }
      ],
      "defaultSnippets": [
        {
          "body": {
            "path": "${1}",
            "icon": "${2}"
          }
        }
      ],
      "defaultDefaultValue": null,
      "scope": 4
    },
    "terminal.integrated.automationProfile.osx": {
      "restricted": true,
      "markdownDescription": "The terminal profile to use on macOS for automation-related terminal usage like tasks and debug.",
      "type": [
        "object",
        "null"
      ],
      "default": null,
      "anyOf": [
        {
          "$ref": "#/$defs/_273"
        },
        {
          "type": "null"
        }
      ],
      "defaultSnippets": [
        {
          "body": {
            "path": "${1}",
            "icon": "${2}"
          }
        }
      ],
      "defaultDefaultValue": null,
      "scope": 4
    },
    "terminal.integrated.automationProfile.windows": {
      "restricted": true,
      "markdownDescription": "The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.windows` (now deprecated) is set.",
      "type": [
        "object",
        "null"
      ],
      "default": null,
      "anyOf": [
        {
          "$ref": "#/$defs/_273"
        },
        {
          "type": "null"
        }
      ],
      "defaultSnippets": [
        {
          "body": {
            "path": "${1}",
            "icon": "${2}"
          }
        }
      ],
      "defaultDefaultValue": null,
      "scope": 4
    },
    "terminal.integrated.autoReplies": {
      "markdownDescription": "A set of messages that, when encountered in the terminal, will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.\n\nRemarks:\n\n- Use `\"Terminate batch job (Y/N)\": \"Y\\r\"` to automatically respond to the terminate batch job prompt on Windows.\n- The message includes escape sequences so the reply might not happen with styled text.\n- Each reply can only happen once every second.\n- Use `\"\\r\"` in the reply to mean the enter key.\n- To unset a default key, set the value to null.\n- Restart VS Code if new don't apply.",
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "type": "string",
            "description": "The reply to send to the process."
          },
          {
            "type": "null"
          }
        ]
      },
      "default": {},
      "defaultDefaultValue": {},
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.bellDuration": {
      "markdownDescription": "The number of milliseconds to show the bell within a terminal tab when triggered.",
      "type": "number",
      "default": 1000,
      "defaultDefaultValue": 1000,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.commandsToSkipShell": {
      "markdownDescription": "A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.\n\n&nbsp;\n\nMany commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.\n\n&nbsp;\n\nThe following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.\n\n&nbsp;\n\nDefault Skipped Commands:\n\n- editor.action.accessibilityHelp\n- editor.action.toggleTabFocusMode\n- notification.acceptPrimaryAction\n- notifications.hideList\n- notifications.hideToasts\n- runCommands\n- workbench.action.closeQuickOpen\n- workbench.action.debug.continue\n- workbench.action.debug.disconnect\n- workbench.action.debug.pause\n- workbench.action.debug.restart\n- workbench.action.debug.run\n- workbench.action.debug.start\n- workbench.action.debug.stepInto\n- workbench.action.debug.stepOut\n- workbench.action.debug.stepOver\n- workbench.action.debug.stop\n- workbench.action.firstEditorInGroup\n- workbench.action.focusActiveEditorGroup\n- workbench.action.focusEighthEditorGroup\n- workbench.action.focusFifthEditorGroup\n- workbench.action.focusFirstEditorGroup\n- workbench.action.focusFourthEditorGroup\n- workbench.action.focusLastEditorGroup\n- workbench.action.focusNextPart\n- workbench.action.focusPreviousPart\n- workbench.action.focusSecondEditorGroup\n- workbench.action.focusSeventhEditorGroup\n- workbench.action.focusSixthEditorGroup\n- workbench.action.focusThirdEditorGroup\n- workbench.action.lastEditorInGroup\n- workbench.action.navigateDown\n- workbench.action.navigateLeft\n- workbench.action.navigateRight\n- workbench.action.navigateUp\n- workbench.action.nextEditor\n- workbench.action.nextEditorInGroup\n- workbench.action.nextPanelView\n- workbench.action.nextSideBarView\n- workbench.action.openNextRecentlyUsedEditor\n- workbench.action.openNextRecentlyUsedEditorInGroup\n- workbench.action.openPreviousRecentlyUsedEditor\n- workbench.action.openPreviousRecentlyUsedEditorInGroup\n- workbench.action.previousEditor\n- workbench.action.previousEditorInGroup\n- workbench.action.previousPanelView\n- workbench.action.previousSideBarView\n- workbench.action.quickOpen\n- workbench.action.quickOpenLeastRecentlyUsedEditor\n- workbench.action.quickOpenLeastRecentlyUsedEditorInGroup\n- workbench.action.quickOpenPreviousEditor\n- workbench.action.quickOpenPreviousRecentlyUsedEditor\n- workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup\n- workbench.action.quickOpenView\n- workbench.action.showCommands\n- workbench.action.tasks.build\n- workbench.action.tasks.reRunTask\n- workbench.action.tasks.rerunForActiveTerminal\n- workbench.action.tasks.restartTask\n- workbench.action.tasks.runTask\n- workbench.action.tasks.showLog\n- workbench.action.tasks.showTasks\n- workbench.action.tasks.terminate\n- workbench.action.tasks.test\n- workbench.action.terminal.acceptSelectedSuggestion\n- workbench.action.terminal.acceptSelectedSuggestionEnter\n- workbench.action.terminal.chat.cancel\n- workbench.action.terminal.chat.close\n- workbench.action.terminal.chat.discard\n- workbench.action.terminal.chat.feedbackHelpful\n- workbench.action.terminal.chat.feedbackReportIssue\n- workbench.action.terminal.chat.feedbackUnhelpful\n- workbench.action.terminal.chat.insertCommand\n- workbench.action.terminal.chat.makeRequest\n- workbench.action.terminal.chat.runCommand\n- workbench.action.terminal.chat.start\n- workbench.action.terminal.chat.viewInChat\n- workbench.action.terminal.clear\n- workbench.action.terminal.clearSelection\n- workbench.action.terminal.copyAndClearSelection\n- workbench.action.terminal.copyLastCommand\n- workbench.action.terminal.copyLastCommandAndLastCommandOutput\n- workbench.action.terminal.copyLastCommandOutput\n- workbench.action.terminal.copySelection\n- workbench.action.terminal.copySelectionAsHtml\n- workbench.action.terminal.deleteToLineStart\n- workbench.action.terminal.deleteWordLeft\n- workbench.action.terminal.deleteWordRight\n- workbench.action.terminal.findNext\n- workbench.action.terminal.findPrevious\n- workbench.action.terminal.focus\n- workbench.action.terminal.focusAccessibleBuffer\n- workbench.action.terminal.focusAtIndex1\n- workbench.action.terminal.focusAtIndex2\n- workbench.action.terminal.focusAtIndex3\n- workbench.action.terminal.focusAtIndex4\n- workbench.action.terminal.focusAtIndex5\n- workbench.action.terminal.focusAtIndex6\n- workbench.action.terminal.focusAtIndex7\n- workbench.action.terminal.focusAtIndex8\n- workbench.action.terminal.focusAtIndex9\n- workbench.action.terminal.focusFind\n- workbench.action.terminal.focusHover\n- workbench.action.terminal.focusNext\n- workbench.action.terminal.focusNextPane\n- workbench.action.terminal.focusPrevious\n- workbench.action.terminal.focusPreviousPane\n- workbench.action.terminal.goToRecentDirectory\n- workbench.action.terminal.hideFind\n- workbench.action.terminal.hideSuggestWidget\n- workbench.action.terminal.kill\n- workbench.action.terminal.killEditor\n- workbench.action.terminal.moveToEditor\n- workbench.action.terminal.moveToLineEnd\n- workbench.action.terminal.moveToLineStart\n- workbench.action.terminal.moveToTerminalPanel\n- workbench.action.terminal.new\n- workbench.action.terminal.newInActiveWorkspace\n- workbench.action.terminal.paste\n- workbench.action.terminal.pasteSelection\n- workbench.action.terminal.requestCompletions\n- workbench.action.terminal.resizePaneDown\n- workbench.action.terminal.resizePaneLeft\n- workbench.action.terminal.resizePaneRight\n- workbench.action.terminal.resizePaneUp\n- workbench.action.terminal.runActiveFile\n- workbench.action.terminal.runRecentCommand\n- workbench.action.terminal.runSelectedText\n- workbench.action.terminal.scrollDown\n- workbench.action.terminal.scrollDownPage\n- workbench.action.terminal.scrollToBottom\n- workbench.action.terminal.scrollToNextCommand\n- workbench.action.terminal.scrollToPreviousCommand\n- workbench.action.terminal.scrollToTop\n- workbench.action.terminal.scrollUp\n- workbench.action.terminal.scrollUpPage\n- workbench.action.terminal.searchWorkspace\n- workbench.action.terminal.selectAll\n- workbench.action.terminal.selectNextPageSuggestion\n- workbench.action.terminal.selectNextSuggestion\n- workbench.action.terminal.selectPrevPageSuggestion\n- workbench.action.terminal.selectPrevSuggestion\n- workbench.action.terminal.selectToNextCommand\n- workbench.action.terminal.selectToNextLine\n- workbench.action.terminal.selectToPreviousCommand\n- workbench.action.terminal.selectToPreviousLine\n- workbench.action.terminal.sendSequence\n- workbench.action.terminal.sizeToContentWidth\n- workbench.action.terminal.split\n- workbench.action.terminal.splitInActiveWorkspace\n- workbench.action.terminal.suggestToggleDetails\n- workbench.action.terminal.suggestToggleDetailsFocus\n- workbench.action.terminal.toggleFindCaseSensitive\n- workbench.action.terminal.toggleFindRegex\n- workbench.action.terminal.toggleFindWholeWord\n- workbench.action.terminal.toggleTerminal\n- workbench.action.toggleFullScreen\n- workbench.action.toggleMaximizedPanel\n- workbench.action.togglePanel",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "defaultDefaultValue": [],
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.confirmOnExit": {
      "description": "Controls whether to confirm when the window closes if there are active terminal sessions. Background terminals like those launched by some extensions will not trigger the confirmation.",
      "type": "string",
      "enum": [
        "always",
        "hasChildProcesses",
        "never"
      ],
      "enumDescriptions": [
        "Always confirm if there are terminals.",
        "Confirm if there are any terminals that have child processes.",
        "Never confirm."
      ],
      "default": "never",
      "defaultDefaultValue": "never",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.confirmOnKill": {
      "description": "Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell. Background terminals like those launched by some extensions will not trigger the confirmation.",
      "type": "string",
      "enum": [
        "always",
        "editor",
        "never",
        "panel"
      ],
      "enumDescriptions": [
        "Confirm if the terminal is either in the editor or panel.",
        "Confirm if the terminal is in the editor.",
        "Never confirm.",
        "Confirm if the terminal is in the panel."
      ],
      "default": "editor",
      "defaultDefaultValue": "editor",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.copyOnSelection": {
      "description": "Controls whether text selected in the terminal will be copied to the clipboard.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.cursorBlinking": {
      "description": "Controls whether the terminal cursor blinks.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.cursorStyle": {
      "description": "Controls the style of terminal cursor when the terminal is focused.",
      "enum": [
        "block",
        "line",
        "underline"
      ],
      "default": "block",
      "defaultDefaultValue": "block",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.cursorStyleInactive": {
      "description": "Controls the style of terminal cursor when the terminal is not focused.",
      "enum": [
        "block",
        "line",
        "none",
        "outline",
        "underline"
      ],
      "default": "outline",
      "defaultDefaultValue": "outline",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.cursorWidth": {
      "markdownDescription": "Controls the width of the cursor when `#terminal.integrated.cursorStyle#` is set to `line`.",
      "type": "number",
      "default": 1,
      "defaultDefaultValue": 1,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.customGlyphs": {
      "markdownDescription": "Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work when `#terminal.integrated.gpuAcceleration#` is disabled.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.cwd": {
      "restricted": true,
      "description": "An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.",
      "type": "string",
      "default": "",
      "scope": 5
    },
    "terminal.integrated.defaultLocation": {
      "type": "string",
      "enum": [
        "editor",
        "view"
      ],
      "enumDescriptions": [
        "Create terminals in the editor",
        "Create terminals in the terminal view"
      ],
      "default": "view",
      "description": "Controls where newly created terminals will appear.",
      "defaultDefaultValue": "view",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.defaultProfile.linux": {
      "restricted": true,
      "markdownDescription": "The default terminal profile on Linux.",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "enum": [
        null,
        "bash",
        "bash (2)",
        "dash",
        "pwsh",
        "pwsh (2)",
        "rbash",
        "rbash (2)",
        "screen",
        "sh",
        "sh (2)",
        "tmux"
      ],
      "markdownEnumDescriptions": [
        "Automatically detect the default",
        "$(terminal-bash) bash\n- path: /usr/bin/bash",
        "$(terminal) bash (2)\n- path: /usr/bin/bash",
        "$(terminal) dash\n- path: /usr/bin/dash",
        "$(terminal-powershell) pwsh\n- path: /usr/bin/pwsh",
        "$(terminal) pwsh (2)\n- path: /opt/microsoft/powershell/7/pwsh",
        "$(terminal) rbash\n- path: /bin/rbash",
        "$(terminal) rbash (2)\n- path: /usr/bin/rbash",
        "$(terminal) screen\n- path: /usr/bin/screen",
        "$(terminal) sh\n- path: /bin/sh",
        "$(terminal) sh (2)\n- path: /usr/bin/sh",
        "$(terminal-tmux) tmux\n- path: /usr/bin/tmux"
      ],
      "defaultDefaultValue": null,
      "scope": 4
    },
    "terminal.integrated.defaultProfile.osx": {
      "restricted": true,
      "markdownDescription": "The default terminal profile on macOS.",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "defaultDefaultValue": null,
      "scope": 4
    },
    "terminal.integrated.defaultProfile.windows": {
      "restricted": true,
      "markdownDescription": "The default terminal profile on Windows.",
      "type": [
        "string",
        "null"
      ],
      "default": null,
      "defaultDefaultValue": null,
      "scope": 4
    },
    "terminal.integrated.detectLocale": {
      "markdownDescription": "Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.",
      "type": "string",
      "enum": [
        "auto",
        "off",
        "on"
      ],
      "markdownEnumDescriptions": [
        "Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.",
        "Do not set the `$LANG` environment variable.",
        "Always set the `$LANG` environment variable."
      ],
      "default": "auto",
      "defaultDefaultValue": "auto",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.drawBoldTextInBrightColors": {
      "description": "Controls whether bold text in the terminal will always use the \"bright\" ANSI color variant.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.enableBell": {
      "markdownDeprecationMessage": "This is now deprecated. Instead use the `terminal.integrated.enableVisualBell` and `accessibility.signals.terminalBell` settings.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false,
      "deprecationMessage": "This is now deprecated. Instead use the `terminal.integrated.enableVisualBell` and `accessibility.signals.terminalBell` settings."
    },
    "terminal.integrated.enableFileLinks": {
      "description": "Whether to enable file links in terminals. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.",
      "type": "string",
      "enum": [
        "notRemote",
        "off",
        "on"
      ],
      "enumDescriptions": [
        "Enable only when not in a remote workspace.",
        "Always off.",
        "Always on."
      ],
      "default": "on",
      "defaultDefaultValue": "on",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.enableImages": {
      "restricted": true,
      "markdownDescription": "Enables image support in the terminal, this will only work when `#terminal.integrated.gpuAcceleration#` is enabled. Both sixel and iTerm's inline image protocol are supported on Linux and macOS. This will only work on Windows for versions of ConPTY >= v2 which is shipped with Windows itself, see also `#terminal.integrated.windowsUseConptyDll#`. Images will currently not be restored between window reloads/reconnects.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4
    },
    "terminal.integrated.enableMultiLinePasteWarning": {
      "markdownDescription": "Controls whether to show a warning dialog when pasting multiple lines into the terminal.",
      "type": "string",
      "enum": [
        "always",
        "auto",
        "never"
      ],
      "markdownEnumDescriptions": [
        "Always show the warning if the text contains a new line.",
        "Enable the warning but do not show it when:\n\n- Bracketed paste mode is enabled (the shell supports multi-line paste natively)\n- The paste is handled by the shell's readline (in the case of pwsh)",
        "Never show the warning."
      ],
      "default": "auto",
      "defaultDefaultValue": "auto",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.enablePersistentSessions": {
      "description": "Persist terminal sessions/history for the workspace across window reloads.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.enableVisualBell": {
      "description": "Controls whether the visual terminal bell is enabled. This shows up next to the terminal's name.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.env.linux": {
      "restricted": true,
      "markdownDescription": "Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.",
      "type": "object",
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ]
      },
      "default": {},
      "defaultDefaultValue": {},
      "scope": 4
    },
    "terminal.integrated.env.osx": {
      "restricted": true,
      "markdownDescription": "Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.",
      "type": "object",
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ]
      },
      "default": {},
      "defaultDefaultValue": {},
      "scope": 4
    },
    "terminal.integrated.env.windows": {
      "restricted": true,
      "markdownDescription": "Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.",
      "type": "object",
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ]
      },
      "default": {},
      "defaultDefaultValue": {},
      "scope": 4
    },
    "terminal.integrated.environmentChangesIndicator": {
      "markdownDescription": "Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.",
      "type": "string",
      "enum": [
        "off",
        "on",
        "warnonly"
      ],
      "enumDescriptions": [
        "Disable the indicator.",
        "Enable the indicator.",
        "Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension."
      ],
      "default": "warnonly",
      "defaultDefaultValue": "warnonly",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.environmentChangesRelaunch": {
      "markdownDescription": "Whether to relaunch terminals automatically if extensions want to contribute to their environment and have not been interacted with yet.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.fastScrollSensitivity": {
      "markdownDescription": "Scrolling speed multiplier when pressing `Alt`.",
      "type": "number",
      "default": 5,
      "defaultDefaultValue": 5,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.focusAfterRun": {
      "markdownDescription": "Controls whether the terminal, accessible buffer, or neither will be focused after `Terminal: Run Selected Text In Active Terminal` has been run.",
      "enum": [
        "accessible-buffer",
        "none",
        "terminal"
      ],
      "default": "none",
      "tags": [
        "accessibility"
      ],
      "markdownEnumDescriptions": [
        "Always focus the accessible buffer.",
        "Do nothing.",
        "Always focus the terminal."
      ],
      "defaultDefaultValue": "none",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.fontFamily": {
      "markdownDescription": "Controls the font family of the terminal. Defaults to `#editor.fontFamily#`'s value.",
      "type": "string",
      "default": "",
      "scope": 4,
      "restricted": false,
      "defaultSnippets": [
        {
          "body": "DejaVu Math TeX Gyre"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans Mono"
        },
        {
          "body": "DejaVu Sans Mono"
        },
        {
          "body": "DejaVu Sans Mono"
        },
        {
          "body": "DejaVu Sans Mono"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Liberation Mono"
        },
        {
          "body": "Liberation Mono"
        },
        {
          "body": "Liberation Mono"
        },
        {
          "body": "Liberation Mono"
        },
        {
          "body": "Liberation Sans"
        },
        {
          "body": "Liberation Sans"
        },
        {
          "body": "Liberation Sans"
        },
        {
          "body": "Liberation Sans"
        },
        {
          "body": "Liberation Serif"
        },
        {
          "body": "Liberation Serif"
        },
        {
          "body": "Liberation Serif"
        },
        {
          "body": "Liberation Serif"
        },
        {
          "body": "Noto Color Emoji"
        }
      ]
    },
    "terminal.integrated.fontLigatures.enabled": {
      "markdownDescription": "Controls whether font ligatures are enabled in the terminal. Ligatures will only work if the configured `#terminal.integrated.fontFamily#` supports them.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.fontLigatures.fallbackLigatures": {
      "markdownDescription": "When `#terminal.integrated.gpuAcceleration#` is enabled and the particular `#terminal.integrated.fontFamily#` cannot be parsed, this is the set of character sequences that will always be drawn together. This allows the use of a fixed set of ligatures even when the font isn't supported.",
      "type": "array",
      "items": [
        {
          "type": "string"
        }
      ],
      "default": [
        "<--",
        "<---",
        "<<-",
        "<-",
        "->",
        "->>",
        "-->",
        "--->",
        "<==",
        "<===",
        "<<=",
        "<=",
        "=>",
        "=>>",
        "==>",
        "===>",
        ">=",
        ">>=",
        "<->",
        "<-->",
        "<--->",
        "<---->",
        "<=>",
        "<==>",
        "<===>",
        "<====>",
        "::",
        ":::",
        "<~~",
        "</",
        "</>",
        "/>",
        "~~>",
        "==",
        "!=",
        "/=",
        "~=",
        "<>",
        "===",
        "!==",
        "!===",
        "<:",
        ":=",
        "*=",
        "*+",
        "<*",
        "<*>",
        "*>",
        "<|",
        "<|>",
        "|>",
        "+*",
        "=*",
        "=:",
        ":>",
        "/*",
        "*/",
        "+++",
        "<!--",
        "<!---"
      ],
      "defaultDefaultValue": [
        "<--",
        "<---",
        "<<-",
        "<-",
        "->",
        "->>",
        "-->",
        "--->",
        "<==",
        "<===",
        "<<=",
        "<=",
        "=>",
        "=>>",
        "==>",
        "===>",
        ">=",
        ">>=",
        "<->",
        "<-->",
        "<--->",
        "<---->",
        "<=>",
        "<==>",
        "<===>",
        "<====>",
        "::",
        ":::",
        "<~~",
        "</",
        "</>",
        "/>",
        "~~>",
        "==",
        "!=",
        "/=",
        "~=",
        "<>",
        "===",
        "!==",
        "!===",
        "<:",
        ":=",
        "*=",
        "*+",
        "<*",
        "<*>",
        "*>",
        "<|",
        "<|>",
        "|>",
        "+*",
        "=*",
        "=:",
        ":>",
        "/*",
        "*/",
        "+++",
        "<!--",
        "<!---"
      ],
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.fontLigatures.featureSettings": {
      "markdownDescription": "Controls what font feature settings are used when ligatures are enabled, in the format of the `font-feature-settings` CSS property. Some examples which may be valid depending on the font:\n\n- `\"calt\" off, \"ss03\"`\n- `\"liga\" on`\n- `\"calt\" off, \"dlig\" on`",
      "type": "string",
      "default": "\"calt\" on",
      "defaultDefaultValue": "\"calt\" on",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.fontSize": {
      "description": "Controls the font size in pixels of the terminal.",
      "type": "number",
      "default": 14,
      "minimum": 6,
      "maximum": 100,
      "defaultDefaultValue": 14,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.fontWeight": {
      "anyOf": [
        {
          "$ref": "#/$defs/_283"
        },
        {
          "$ref": "#/$defs/_284"
        },
        {
          "$ref": "#/$defs/_285"
        }
      ],
      "description": "The font weight to use within the terminal for non-bold text. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000.",
      "default": "normal",
      "defaultDefaultValue": "normal",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.fontWeightBold": {
      "anyOf": [
        {
          "$ref": "#/$defs/_283"
        },
        {
          "$ref": "#/$defs/_284"
        },
        {
          "$ref": "#/$defs/_285"
        }
      ],
      "description": "The font weight to use within the terminal for bold text. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000.",
      "default": "bold",
      "defaultDefaultValue": "bold",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.gpuAcceleration": {
      "type": "string",
      "enum": [
        "auto",
        "off",
        "on"
      ],
      "markdownEnumDescriptions": [
        "Let VS Code detect which renderer will give the best experience.",
        "Disable GPU acceleration within the terminal. The terminal will render much slower when GPU acceleration is off but it should reliably work on all systems.",
        "Enable GPU acceleration within the terminal."
      ],
      "default": "auto",
      "description": "Controls whether the terminal will leverage the GPU to do its rendering.",
      "defaultDefaultValue": "auto",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.hideOnLastClosed": {
      "description": "Whether to hide the terminal view when the last terminal is closed. This will only happen when the terminal is the only visible view in the view container.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.hideOnStartup": {
      "description": "Whether to hide the terminal view on startup, avoiding creating a terminal when there are no persistent sessions.",
      "type": "string",
      "enum": [
        "always",
        "never",
        "whenEmpty"
      ],
      "markdownEnumDescriptions": [
        "Always hide the terminal, even when there are persistent sessions restored.",
        "Never hide the terminal view on startup.",
        "Only hide the terminal when there are no persistent sessions restored."
      ],
      "default": "never",
      "defaultDefaultValue": "never",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.ignoreBracketedPasteMode": {
      "markdownDescription": "Controls whether the terminal will ignore bracketed paste mode even if the terminal was put into the mode, omitting the `\\x1b[200~` and `\\x1b[201~` sequences when pasting. This is useful when the shell is not respecting the mode which can happen in sub-shells for example.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.ignoreProcessNames": {
      "markdownDescription": "A set of process names to ignore when using the `#terminal.integrated.confirmOnKill#` setting.",
      "type": "array",
      "items": {
        "$ref": "#/$defs/_282"
      },
      "default": [
        "starship",
        "oh-my-posh",
        "bash",
        "zsh"
      ],
      "defaultDefaultValue": [
        "starship",
        "oh-my-posh",
        "bash",
        "zsh"
      ],
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.initialHint": {
      "restricted": true,
      "markdownDescription": "Controls if the first terminal without input will show a hint about available actions when it is focused.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4
    },
    "terminal.integrated.letterSpacing": {
      "description": "Controls the letter spacing of the terminal. This is an integer value which represents the number of additional pixels to add between characters.",
      "type": "number",
      "default": 0,
      "defaultDefaultValue": 0,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.lineHeight": {
      "description": "Controls the line height of the terminal. This number is multiplied by the terminal font size to get the actual line-height in pixels.",
      "type": "number",
      "default": 1.1,
      "defaultDefaultValue": 1.1,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.localEchoEnabled": {
      "markdownDescription": "When local echo should be enabled. This will override `#terminal.integrated.localEchoLatencyThreshold#`",
      "type": "string",
      "enum": [
        "auto",
        "off",
        "on"
      ],
      "enumDescriptions": [
        "Enabled only for remote workspaces",
        "Always disabled",
        "Always enabled"
      ],
      "default": "off",
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": "off",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.localEchoExcludePrograms": {
      "description": "Local echo will be disabled when any of these program names are found in the terminal title.",
      "type": "array",
      "items": {
        "$ref": "#/$defs/_282"
      },
      "default": [
        "vim",
        "vi",
        "nano",
        "tmux"
      ],
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": [
        "vim",
        "vi",
        "nano",
        "tmux"
      ],
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.localEchoLatencyThreshold": {
      "description": "Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.",
      "type": "integer",
      "minimum": -1,
      "default": 30,
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": 30,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.localEchoStyle": {
      "description": "Terminal style of locally echoed text; either a font style or an RGB color.",
      "default": "dim",
      "anyOf": [
        {
          "enum": [
            "#ff0000",
            "bold",
            "dim",
            "inverted",
            "italic",
            "underlined"
          ]
        },
        {
          "type": "string",
          "format": "color-hex"
        }
      ],
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": "dim",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.macOptionClickForcesSelection": {
      "description": "Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.macOptionIsMeta": {
      "description": "Controls whether to treat the option key as the meta key in the terminal on macOS.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.middleClickBehavior": {
      "type": "string",
      "enum": [
        "default",
        "paste"
      ],
      "enumDescriptions": [
        "The platform default to focus the terminal. On Linux this will also paste the selection.",
        "Paste on middle click."
      ],
      "default": "default",
      "description": "Controls how terminal reacts to middle click.",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.minimumContrastRatio": {
      "markdownDescription": "When set, the foreground color of each cell will change to try meet the contrast ratio specified. Note that this will not apply to `powerline` characters per #146406. Example values:\n\n- 1: Do nothing and use the standard theme colors.\n- 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (default).\n- 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).\n- 21: White on black or black on white.",
      "type": "number",
      "default": 4.5,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": 4.5,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.mouseWheelScrollSensitivity": {
      "markdownDescription": "A multiplier to be used on the `deltaY` of mouse wheel scroll events.",
      "type": "number",
      "default": 1,
      "defaultDefaultValue": 1,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.mouseWheelZoom": {
      "markdownDescription": "Zoom the font of the terminal when using mouse wheel and holding `Ctrl`.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.persistentSessionReviveProcess": {
      "markdownDescription": "When the terminal process must be shut down (for example on window or application close), this determines when the previous terminal session contents/history should be restored and processes be recreated when the workspace is next opened.\n\nCaveats:\n\n- Restoring of the process current working directory depends on whether it is supported by the shell.\n- Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections.",
      "type": "string",
      "enum": [
        "never",
        "onExit",
        "onExitAndWindowClose"
      ],
      "markdownEnumDescriptions": [
        "Never restore the terminal buffers or recreate the process.",
        "Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).",
        "Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed."
      ],
      "default": "onExit",
      "defaultDefaultValue": "onExit",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.profiles.linux": {
      "restricted": true,
      "markdownDescription": "A set of terminal profile customizations for Linux which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.\n\nTo override an existing profile use its profile name as the key, for example:\n\n```json\n\"terminal.integrated.profile.linux\": {\n  \"bash\": null\n}\n```\n\n[Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).",
      "type": "object",
      "default": {
        "bash": {
          "path": "bash",
          "icon": "terminal-bash"
        },
        "fish": {
          "path": "fish"
        },
        "pwsh": {
          "path": "pwsh",
          "icon": "terminal-powershell"
        },
        "tmux": {
          "path": "tmux",
          "icon": "terminal-tmux"
        },
        "zsh": {
          "path": "zsh"
        }
      },
      "additionalProperties": {
        "$ref": "#/$defs/_281"
      },
      "defaultDefaultValue": {
        "bash": {
          "path": "bash",
          "icon": "terminal-bash"
        },
        "fish": {
          "path": "fish"
        },
        "pwsh": {
          "path": "pwsh",
          "icon": "terminal-powershell"
        },
        "tmux": {
          "path": "tmux",
          "icon": "terminal-tmux"
        },
        "zsh": {
          "path": "zsh"
        }
      },
      "scope": 4
    },
    "terminal.integrated.profiles.osx": {
      "restricted": true,
      "markdownDescription": "A set of terminal profile customizations for Mac which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.\n\nTo override an existing profile use its profile name as the key, for example:\n\n```json\n\"terminal.integrated.profile.osx\": {\n  \"bash\": null\n}\n```\n\n[Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).",
      "type": "object",
      "default": {
        "bash": {
          "path": "bash",
          "args": [
            "-l"
          ],
          "icon": "terminal-bash"
        },
        "fish": {
          "path": "fish",
          "args": [
            "-l"
          ]
        },
        "pwsh": {
          "path": "pwsh",
          "icon": "terminal-powershell"
        },
        "tmux": {
          "path": "tmux",
          "icon": "terminal-tmux"
        },
        "zsh": {
          "path": "zsh",
          "args": [
            "-l"
          ]
        }
      },
      "additionalProperties": {
        "$ref": "#/$defs/_281"
      },
      "defaultDefaultValue": {
        "bash": {
          "path": "bash",
          "args": [
            "-l"
          ],
          "icon": "terminal-bash"
        },
        "fish": {
          "path": "fish",
          "args": [
            "-l"
          ]
        },
        "pwsh": {
          "path": "pwsh",
          "icon": "terminal-powershell"
        },
        "tmux": {
          "path": "tmux",
          "icon": "terminal-tmux"
        },
        "zsh": {
          "path": "zsh",
          "args": [
            "-l"
          ]
        }
      },
      "scope": 4
    },
    "terminal.integrated.profiles.windows": {
      "restricted": true,
      "markdownDescription": "A set of terminal profile customizations for Windows which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.\n\nTo override an existing profile use its profile name as the key, for example:\n\n```json\n\"terminal.integrated.profile.windows\": {\n  \"bash\": null\n}\n```\n\n[Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).",
      "type": "object",
      "default": {
        "Command Prompt": {
          "path": [
            "${env:windir}\\Sysnative\\cmd.exe",
            "${env:windir}\\System32\\cmd.exe"
          ],
          "args": [],
          "icon": "terminal-cmd"
        },
        "Git Bash": {
          "source": "Git Bash"
        },
        "PowerShell": {
          "source": "PowerShell",
          "icon": "terminal-powershell"
        }
      },
      "additionalProperties": {
        "anyOf": [
          {
            "type": "object",
            "required": [
              "source"
            ],
            "properties": {
              "source": {
                "description": "A profile source that will auto detect the paths to the shell. Note that non-standard executable locations are not supported and must be created manually in a new profile.",
                "enum": [
                  "PowerShell",
                  "Git Bash"
                ]
              },
              "args": {
                "$ref": "#/$defs/_274"
              },
              "overrideName": {
                "$ref": "#/$defs/_275"
              },
              "icon": {
                "$ref": "#/$defs/_276"
              },
              "color": {
                "$ref": "#/$defs/_277"
              },
              "env": {
                "$ref": "#/$defs/_278"
              }
            }
          },
          {
            "$ref": "#/$defs/_279"
          },
          {
            "type": "null"
          },
          {
            "$ref": "#/$defs/_280"
          }
        ]
      },
      "defaultDefaultValue": {
        "Command Prompt": {
          "path": [
            "${env:windir}\\Sysnative\\cmd.exe",
            "${env:windir}\\System32\\cmd.exe"
          ],
          "args": [],
          "icon": "terminal-cmd"
        },
        "Git Bash": {
          "source": "Git Bash"
        },
        "PowerShell": {
          "source": "PowerShell",
          "icon": "terminal-powershell"
        }
      },
      "scope": 4
    },
    "terminal.integrated.rescaleOverlappingGlyphs": {
      "markdownDescription": "Whether to rescale glyphs horizontally that are a single cell wide but have glyphs that would overlap following cell(s). This typically happens for ambiguous width characters (eg. the roman numeral characters U+2160+) which aren't featured in monospace fonts. Emoji glyphs are never rescaled.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.rightClickBehavior": {
      "type": "string",
      "enum": [
        "copyPaste",
        "default",
        "nothing",
        "paste",
        "selectWord"
      ],
      "enumDescriptions": [
        "Copy when there is a selection, otherwise paste.",
        "Show the context menu.",
        "Do nothing and pass event to terminal.",
        "Paste on right click.",
        "Select the word under the cursor and show the context menu."
      ],
      "default": "default",
      "description": "Controls how terminal reacts to right click.",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.scrollback": {
      "description": "Controls the maximum number of lines the terminal keeps in its buffer. We pre-allocate memory based on this value in order to ensure a smooth experience. As such, as the value increases, so will the amount of memory.",
      "type": "number",
      "default": 1000,
      "defaultDefaultValue": 1000,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.sendKeybindingsToShell": {
      "markdownDescription": "Dispatches most keybindings to the terminal instead of the workbench, overriding `#terminal.integrated.commandsToSkipShell#`, which can be used alternatively for fine tuning.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.shellIntegration.decorationsEnabled": {
      "restricted": true,
      "markdownDescription": "When shell integration is enabled, adds a decoration for each command.",
      "type": "string",
      "enum": [
        "both",
        "gutter",
        "never",
        "overviewRuler"
      ],
      "enumDescriptions": [
        "Show decorations in the gutter (left) and overview ruler (right)",
        "Show gutter decorations to the left of the terminal",
        "Do not show decorations",
        "Show overview ruler decorations to the right of the terminal"
      ],
      "default": "both",
      "defaultDefaultValue": "both",
      "scope": 4
    },
    "terminal.integrated.shellIntegration.enabled": {
      "restricted": true,
      "markdownDescription": "Determines whether or not shell integration is auto-injected to support features like enhanced command tracking and current working directory detection. \n\nShell integration works by injecting the shell with a startup script. The script gives VS Code insight into what is happening within the terminal.\n\nSupported shells:\n\n- Linux/macOS: bash, fish, pwsh, zsh\n - Windows: pwsh, git bash\n\nThis setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.\n\n Note that the script injection may not work if you have custom arguments defined in the terminal profile, have enabled `#editor.accessibilitySupport#`, have a [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand), or other unsupported setup. To disable decorations, see `#terminal.integrated.shellIntegration.decorationsEnabled#`",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4
    },
    "terminal.integrated.shellIntegration.environmentReporting": {
      "markdownDescription": "Controls whether to report the shell environment, enabling its use in features such as `#terminal.integrated.suggest.enabled#`. This may cause a slowdown when printing your shell's prompt.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.shellIntegration.history": {
      "restricted": true,
      "markdownDescription": "Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history.",
      "type": "number",
      "default": 100,
      "defaultDefaultValue": 100,
      "scope": 4
    },
    "terminal.integrated.shellIntegration.showCommandGuide": {
      "restricted": true,
      "markdownDescription": "Whether to show the command guide when hovering over a command in the terminal.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4
    },
    "terminal.integrated.showExitAlert": {
      "description": "Controls whether to show the alert \"The terminal process terminated with exit code\" when exit code is non-zero.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.smoothScrolling": {
      "markdownDescription": "Controls whether the terminal will scroll using an animation.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.splitCwd": {
      "description": "Controls the working directory a split terminal starts with.",
      "type": "string",
      "enum": [
        "inherited",
        "initial",
        "workspaceRoot"
      ],
      "enumDescriptions": [
        "On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.",
        "A new split terminal will use the working directory that the parent terminal started with.",
        "A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered."
      ],
      "default": "inherited",
      "defaultDefaultValue": "inherited",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.stickyScroll.enabled": {
      "markdownDescription": "Shows the current command at the top of the terminal. This feature requires [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) to be activated. See `#terminal.integrated.shellIntegration.enabled#`.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.stickyScroll.maxLineCount": {
      "markdownDescription": "Defines the maximum number of sticky lines to show. Sticky scroll lines will never exceed 40% of the viewport regardless of this setting.",
      "type": "number",
      "default": 5,
      "minimum": 1,
      "maximum": 10,
      "defaultDefaultValue": 5,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.suggest.cdPath": {
      "restricted": true,
      "markdownDescription": "Controls whether to enable $CDPATH support which exposes children of the folders in the $CDPATH variable regardless of the current working directory. $CDPATH is expected to be semi colon-separated on Windows and colon-separated on other platforms.",
      "type": "string",
      "enum": [
        "absolute",
        "off",
        "relative"
      ],
      "markdownEnumDescriptions": [
        "Enable the feature and use absolute paths. This is useful when the shell doesn't natively support `$CDPATH`.",
        "Disable the feature.",
        "Enable the feature and use relative paths."
      ],
      "default": "absolute",
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": "absolute",
      "scope": 4
    },
    "terminal.integrated.suggest.enabled": {
      "restricted": true,
      "markdownDescription": "Enables terminal intellisense suggestions (preview) for supported shells (PowerShell v7+, zsh, bash, fish) when `#terminal.integrated.shellIntegration.enabled#` is set to `true`.\n\nIf shell integration is installed manually, `VSCODE_SUGGEST` needs to be set to `1` before calling the shell integration script.",
      "type": "boolean",
      "default": false,
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": false,
      "scope": 4
    },
    "terminal.integrated.suggest.inlineSuggestion": {
      "restricted": true,
      "markdownDescription": "Controls whether the shell's inline suggestion should be detected and how it is scored.",
      "type": "string",
      "enum": [
        "alwaysOnTop",
        "alwaysOnTopExceptExactMatch",
        "off"
      ],
      "markdownEnumDescriptions": [
        "Enable the feature and always put the inline suggestion on top.",
        "Enable the feature and sort the inline suggestion without forcing it to be on top. This means that exact matches will be will be above the inline suggestion.",
        "Disable the feature."
      ],
      "default": "alwaysOnTop",
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": "alwaysOnTop",
      "scope": 4
    },
    "terminal.integrated.suggest.providers": {
      "restricted": true,
      "markdownDescription": "Providers are enabled by default. Omit them by setting the id of the provider to `false`.",
      "type": "object",
      "properties": {
        "core:pwsh-shell-integration": {
          "type": "boolean",
          "description": "Enable or disable the PowerShell script-based provider. This enables PowerShell-specific argument completion.",
          "deprecated": true,
          "deprecationMessage": "This is deprecated as it has performance problems, the upcoming LSP provider will supersede this.",
          "default": false
        }
      },
      "default": {
        "core:pwsh-shell-integration": false
      },
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": {
        "core:pwsh-shell-integration": false
      },
      "scope": 4
    },
    "terminal.integrated.suggest.quickSuggestions": {
      "restricted": true,
      "markdownDescription": "Controls whether suggestions should automatically show up while typing. Also be aware of the `#terminal.integrated.suggest.suggestOnTriggerCharacters#`-setting which controls if suggestions are triggered by special characters.",
      "type": "object",
      "properties": {
        "arguments": {
          "description": "Enable quick suggestions for arguments, anything after the first word in a command line input.",
          "type": "string",
          "enum": [
            "off",
            "on"
          ]
        },
        "commands": {
          "description": "Enable quick suggestions for commands, the first word in a command line input.",
          "type": "string",
          "enum": [
            "off",
            "on"
          ]
        },
        "unknown": {
          "description": "Enable quick suggestions when it's unclear what the best suggestion is, if this is on files and folders will be suggested as a fallback.",
          "type": "string",
          "enum": [
            "off",
            "on"
          ]
        }
      },
      "default": {
        "arguments": "on",
        "commands": "on",
        "unknown": "off"
      },
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": {
        "arguments": "on",
        "commands": "on",
        "unknown": "off"
      },
      "scope": 4
    },
    "terminal.integrated.suggest.runOnEnter": {
      "restricted": true,
      "markdownDescription": "Controls whether suggestions should run immediately when `Enter` (not `Tab`) is used to accept the result.",
      "enum": [
        "always",
        "exactMatch",
        "exactMatchIgnoreExtension",
        "never"
      ],
      "markdownEnumDescriptions": [
        "Always run on `Enter`.",
        "Run on `Enter` when the suggestion is typed in its entirety.",
        "Run on `Enter` when the suggestion is typed in its entirety or when a file is typed without its extension included.",
        "Never run on `Enter`."
      ],
      "default": "never",
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": "never",
      "scope": 4
    },
    "terminal.integrated.suggest.selectionMode": {
      "markdownDescription": "Controls how suggestion selection works in the integrated terminal.",
      "type": "string",
      "enum": [
        "always",
        "never",
        "partial"
      ],
      "markdownEnumDescriptions": [
        "Always select a suggestion when automatically triggering IntelliSense. `Enter` or `Tab` can be used to accept the first suggestion.",
        "Never select a suggestion when automatically triggering IntelliSense. The list must be navigated via `Down` before `Enter` or `Tab` can be used to accept the active suggestion.",
        "Partially select a suggestion when automatically triggering IntelliSense. `Tab` can be used to accept the first suggestion, only after navigating the suggestions via `Down` will `Enter` also accept the active suggestion."
      ],
      "default": "partial",
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": "partial",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.suggest.showStatusBar": {
      "restricted": true,
      "markdownDescription": "Controls whether the terminal suggestions status bar should be shown.",
      "type": "boolean",
      "default": true,
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": true,
      "scope": 4
    },
    "terminal.integrated.suggest.suggestOnTriggerCharacters": {
      "restricted": true,
      "markdownDescription": "Controls whether suggestions should automatically show up when typing trigger characters.",
      "type": "boolean",
      "default": true,
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": true,
      "scope": 4
    },
    "terminal.integrated.suggest.upArrowNavigatesHistory": {
      "restricted": true,
      "markdownDescription": "Determines whether the up arrow key navigates the command history when focus is on the first suggestion and navigation has not yet occurred. When set to false, the up arrow will move focus to the last suggestion instead.",
      "type": "boolean",
      "default": true,
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": true,
      "scope": 4
    },
    "terminal.integrated.suggest.windowsExecutableExtensions": {
      "restricted": true,
      "markdownDescription": "A set of windows command executable extensions that will be included as suggestions in the terminal.\n\nMany executables are included by default, listed below:\n\n- bat\n- cmd\n- com\n- exe\n- jar\n- js\n- msi\n- pl\n- ps1\n- py\n- rb\n- sh\n- vbs.\n\nTo exclude an extension, set it to `false`\n\n. To include one not in the list, add it and set it to `true`.",
      "type": "object",
      "default": {},
      "tags": [
        "preview"
      ],
      "defaultDefaultValue": {},
      "scope": 4
    },
    "terminal.integrated.tabs.defaultColor": {
      "description": "A theme color ID to associate with terminal icons by default.",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "terminal.ansiBlack",
        "terminal.ansiBlue",
        "terminal.ansiCyan",
        "terminal.ansiGreen",
        "terminal.ansiMagenta",
        "terminal.ansiRed",
        "terminal.ansiWhite",
        "terminal.ansiYellow"
      ],
      "default": null,
      "scope": 5,
      "defaultDefaultValue": null,
      "restricted": false
    },
    "terminal.integrated.tabs.defaultIcon": {
      "description": "A codicon ID to associate with terminal icons by default.",
      "type": "string",
      "enum": [
        "account",
        "activate-breakpoints",
        "add",
        "alert",
        "archive",
        "array",
        "arrow-both",
        "arrow-circle-down",
        "arrow-circle-left",
        "arrow-circle-right",
        "arrow-circle-up",
        "arrow-down",
        "arrow-left",
        "arrow-right",
        "arrow-small-down",
        "arrow-small-left",
        "arrow-small-right",
        "arrow-small-up",
        "arrow-swap",
        "arrow-up",
        "attach",
        "azure",
        "azure-devops",
        "beaker",
        "beaker-stop",
        "bell",
        "bell-dot",
        "bell-slash",
        "bell-slash-dot",
        "blank",
        "bold",
        "book",
        "bookmark",
        "bracket",
        "bracket-dot",
        "bracket-error",
        "briefcase",
        "broadcast",
        "browser",
        "bug",
        "calendar",
        "call-incoming",
        "call-outgoing",
        "case-sensitive",
        "chat-sparkle",
        "check",
        "check-all",
        "checklist",
        "chevron-down",
        "chevron-left",
        "chevron-right",
        "chevron-up",
        "chip",
        "chrome-close",
        "chrome-maximize",
        "chrome-minimize",
        "chrome-restore",
        "circle",
        "circle-filled",
        "circle-large",
        "circle-large-filled",
        "circle-large-outline",
        "circle-outline",
        "circle-slash",
        "circle-small",
        "circle-small-filled",
        "circuit-board",
        "clear-all",
        "clippy",
        "clock",
        "clone",
        "close",
        "close-all",
        "close-dirty",
        "cloud",
        "cloud-download",
        "cloud-upload",
        "code",
        "code-oss",
        "code-review",
        "coffee",
        "collapse-all",
        "color-mode",
        "combine",
        "comment",
        "comment-add",
        "comment-discussion",
        "comment-draft",
        "comment-unresolved",
        "compare-changes",
        "compass",
        "compass-active",
        "compass-dot",
        "console",
        "copilot",
        "copilot-blocked",
        "copilot-error",
        "copilot-in-progress",
        "copilot-large",
        "copilot-not-connected",
        "copilot-snooze",
        "copilot-success",
        "copilot-unavailable",
        "copilot-warning",
        "copilot-warning-large",
        "copy",
        "coverage",
        "credit-card",
        "dash",
        "dashboard",
        "database",
        "debug",
        "debug-all",
        "debug-alt",
        "debug-alt-small",
        "debug-breakpoint",
        "debug-breakpoint-conditional",
        "debug-breakpoint-conditional-disabled",
        "debug-breakpoint-conditional-unverified",
        "debug-breakpoint-data",
        "debug-breakpoint-data-disabled",
        "debug-breakpoint-data-unverified",
        "debug-breakpoint-disabled",
        "debug-breakpoint-function",
        "debug-breakpoint-function-disabled",
        "debug-breakpoint-function-unverified",
        "debug-breakpoint-log",
        "debug-breakpoint-log-disabled",
        "debug-breakpoint-log-unverified",
        "debug-breakpoint-pending",
        "debug-breakpoint-unsupported",
        "debug-breakpoint-unverified",
        "debug-console",
        "debug-continue",
        "debug-continue-small",
        "debug-coverage",
        "debug-disconnect",
        "debug-hint",
        "debug-line-by-line",
        "debug-pause",
        "debug-rerun",
        "debug-restart",
        "debug-restart-frame",
        "debug-reverse-continue",
        "debug-stackframe",
        "debug-stackframe-active",
        "debug-stackframe-dot",
        "debug-stackframe-focused",
        "debug-start",
        "debug-step-back",
        "debug-step-into",
        "debug-step-out",
        "debug-step-over",
        "debug-stop",
        "desktop-download",
        "device-camera",
        "device-camera-video",
        "device-desktop",
        "device-mobile",
        "dialog-close",
        "dialog-error",
        "dialog-info",
        "dialog-warning",
        "diff",
        "diff-added",
        "diff-ignored",
        "diff-modified",
        "diff-multiple",
        "diff-removed",
        "diff-renamed",
        "diff-sidebyside",
        "diff-single",
        "discard",
        "drop-down-button",
        "edit",
        "edit-session",
        "edit-sparkle",
        "editor-layout",
        "ellipsis",
        "empty-window",
        "error",
        "error-small",
        "exclude",
        "expand-all",
        "export",
        "export",
        "extensions",
        "extensions-large",
        "eye",
        "eye-closed",
        "eye-unwatch",
        "eye-watch",
        "feedback",
        "file",
        "file-add",
        "file-binary",
        "file-code",
        "file-directory",
        "file-directory-create",
        "file-media",
        "file-pdf",
        "file-submodule",
        "file-symlink-directory",
        "file-symlink-file",
        "file-text",
        "file-zip",
        "files",
        "filter",
        "filter-filled",
        "flag",
        "flame",
        "fold",
        "fold-down",
        "fold-horizontal",
        "fold-horizontal-filled",
        "fold-up",
        "fold-vertical",
        "fold-vertical-filled",
        "folder",
        "folder-active",
        "folder-library",
        "folder-opened",
        "game",
        "gather",
        "gear",
        "gift",
        "gist",
        "gist-fork",
        "gist-new",
        "gist-private",
        "gist-secret",
        "git-branch",
        "git-branch-create",
        "git-branch-delete",
        "git-commit",
        "git-compare",
        "git-fetch",
        "git-fork-private",
        "git-merge",
        "git-pull-request",
        "git-pull-request-abandoned",
        "git-pull-request-assignee",
        "git-pull-request-closed",
        "git-pull-request-create",
        "git-pull-request-done",
        "git-pull-request-draft",
        "git-pull-request-go-to-changes",
        "git-pull-request-label",
        "git-pull-request-milestone",
        "git-pull-request-new-changes",
        "git-pull-request-reviewer",
        "git-stash",
        "git-stash-apply",
        "git-stash-pop",
        "github",
        "github-action",
        "github-alt",
        "github-inverted",
        "github-project",
        "globe",
        "go-to-editing-session",
        "go-to-file",
        "go-to-search",
        "grabber",
        "graph",
        "graph-left",
        "graph-line",
        "graph-scatter",
        "gripper",
        "group-by-ref-type",
        "heart",
        "heart-filled",
        "history",
        "home",
        "horizontal-rule",
        "hubot",
        "inbox",
        "indent",
        "info",
        "insert",
        "inspect",
        "issue-closed",
        "issue-draft",
        "issue-opened",
        "issue-reopened",
        "issues",
        "italic",
        "jersey",
        "json",
        "kebab-horizontal",
        "kebab-vertical",
        "key",
        "keyboard",
        "keyboard-tab",
        "keyboard-tab-above",
        "keyboard-tab-below",
        "law",
        "layers",
        "layers-active",
        "layers-dot",
        "layout",
        "layout-activitybar-left",
        "layout-activitybar-right",
        "layout-centered",
        "layout-menubar",
        "layout-panel",
        "layout-panel-center",
        "layout-panel-dock",
        "layout-panel-justify",
        "layout-panel-left",
        "layout-panel-off",
        "layout-panel-right",
        "layout-sidebar-left",
        "layout-sidebar-left-dock",
        "layout-sidebar-left-off",
        "layout-sidebar-right",
        "layout-sidebar-right-dock",
        "layout-sidebar-right-off",
        "layout-statusbar",
        "library",
        "light-bulb",
        "lightbulb",
        "lightbulb-autofix",
        "lightbulb-empty",
        "lightbulb-sparkle",
        "lightbulb-sparkle-autofix",
        "link",
        "link-external",
        "list-filter",
        "list-flat",
        "list-ordered",
        "list-selection",
        "list-tree",
        "list-unordered",
        "live-share",
        "loading",
        "location",
        "lock",
        "lock-small",
        "log-in",
        "log-out",
        "logo-github",
        "magnet",
        "mail",
        "mail-read",
        "mail-reply",
        "map",
        "map-filled",
        "map-horizontal",
        "map-horizontal-filled",
        "map-vertical",
        "map-vertical-filled",
        "mark-github",
        "markdown",
        "mcp",
        "megaphone",
        "mention",
        "menu",
        "menu-selection",
        "menu-submenu",
        "menubar-more",
        "merge",
        "mic",
        "mic-filled",
        "microscope",
        "milestone",
        "mirror",
        "mirror-private",
        "mirror-public",
        "more",
        "mortar-board",
        "move",
        "multiple-windows",
        "music",
        "mute",
        "new-file",
        "new-folder",
        "newline",
        "newline",
        "no-newline",
        "note",
        "notebook",
        "notebook-template",
        "octoface",
        "open-preview",
        "organization",
        "organization-filled",
        "organization-outline",
        "output",
        "package",
        "paintcan",
        "pass",
        "pass-filled",
        "pencil",
        "percentage",
        "person",
        "person-add",
        "person-filled",
        "person-follow",
        "person-outline",
        "piano",
        "pie-chart",
        "pin",
        "pinned",
        "pinned-dirty",
        "play",
        "play-circle",
        "plug",
        "plus",
        "preserve-case",
        "preview",
        "primitive-dot",
        "primitive-square",
        "project",
        "pulse",
        "python",
        "question",
        "quick-input-back",
        "quote",
        "radio-tower",
        "reactions",
        "record",
        "record-keys",
        "record-small",
        "redo",
        "references",
        "refresh",
        "regex",
        "remote",
        "remote-explorer",
        "remove",
        "remove-close",
        "repl",
        "replace",
        "replace-all",
        "reply",
        "repo",
        "repo-clone",
        "repo-create",
        "repo-delete",
        "repo-fetch",
        "repo-force-push",
        "repo-forked",
        "repo-pinned",
        "repo-pull",
        "repo-push",
        "repo-sync",
        "report",
        "request-changes",
        "robot",
        "rocket",
        "root-folder",
        "root-folder-opened",
        "rss",
        "ruby",
        "run",
        "run-above",
        "run-all",
        "run-all-coverage",
        "run-below",
        "run-coverage",
        "run-errors",
        "save",
        "save-all",
        "save-as",
        "screen-full",
        "screen-normal",
        "scrollbar-button-down",
        "scrollbar-button-left",
        "scrollbar-button-right",
        "scrollbar-button-up",
        "search",
        "search-fuzzy",
        "search-save",
        "search-sparkle",
        "search-stop",
        "selection",
        "send",
        "send-to-remote-agent",
        "server",
        "server-environment",
        "server-process",
        "settings",
        "settings-gear",
        "share",
        "shield",
        "sign-in",
        "sign-out",
        "smiley",
        "snake",
        "sort-percentage",
        "sort-precedence",
        "source-control",
        "sparkle",
        "sparkle-filled",
        "split-horizontal",
        "split-vertical",
        "squirrel",
        "star",
        "star-add",
        "star-delete",
        "star-empty",
        "star-full",
        "star-half",
        "stop",
        "stop-circle",
        "surround-with",
        "symbol-array",
        "symbol-boolean",
        "symbol-class",
        "symbol-color",
        "symbol-constant",
        "symbol-constructor",
        "symbol-customcolor",
        "symbol-enum",
        "symbol-enum-member",
        "symbol-event",
        "symbol-field",
        "symbol-file",
        "symbol-folder",
        "symbol-function",
        "symbol-interface",
        "symbol-key",
        "symbol-keyword",
        "symbol-method",
        "symbol-method-arrow",
        "symbol-misc",
        "symbol-module",
        "symbol-namespace",
        "symbol-null",
        "symbol-number",
        "symbol-numeric",
        "symbol-object",
        "symbol-operator",
        "symbol-package",
        "symbol-parameter",
        "symbol-property",
        "symbol-reference",
        "symbol-ruler",
        "symbol-snippet",
        "symbol-string",
        "symbol-struct",
        "symbol-structure",
        "symbol-text",
        "symbol-type-parameter",
        "symbol-unit",
        "symbol-value",
        "symbol-variable",
        "sync",
        "sync-ignored",
        "table",
        "tag",
        "tag-add",
        "tag-remove",
        "target",
        "tasklist",
        "telescope",
        "terminal",
        "terminal-bash",
        "terminal-cmd",
        "terminal-debian",
        "terminal-decoration-error",
        "terminal-decoration-incomplete",
        "terminal-decoration-mark",
        "terminal-decoration-success",
        "terminal-linux",
        "terminal-powershell",
        "terminal-tmux",
        "terminal-ubuntu",
        "text-size",
        "three-bars",
        "thumbsdown",
        "thumbsdown-filled",
        "thumbsdown-filled",
        "thumbsup",
        "thumbsup-filled",
        "thumbsup-filled",
        "toolbar-more",
        "tools",
        "trash",
        "trashcan",
        "tree-filter-clear",
        "tree-filter-on-type-off",
        "tree-filter-on-type-on",
        "tree-item-expanded",
        "tree-item-loading",
        "triangle-down",
        "triangle-left",
        "triangle-right",
        "triangle-up",
        "twitter",
        "type-hierarchy",
        "type-hierarchy-sub",
        "type-hierarchy-super",
        "unfold",
        "ungroup-by-ref-type",
        "unlock",
        "unmute",
        "unverified",
        "variable",
        "variable-group",
        "verified",
        "verified-filled",
        "versions",
        "vm",
        "vm-active",
        "vm-connect",
        "vm-outline",
        "vm-running",
        "vr",
        "vscode",
        "vscode-insiders",
        "wand",
        "warning",
        "watch",
        "whitespace",
        "whole-word",
        "window",
        "word-wrap",
        "workspace-trusted",
        "workspace-unknown",
        "workspace-unspecified",
        "workspace-untrusted",
        "wrench",
        "wrench-subaction",
        "x",
        "zap",
        "zoom-in",
        "zoom-out"
      ],
      "markdownEnumDescriptions": [
        "$(account)",
        "$(activate-breakpoints)",
        "$(add)",
        "$(alert)",
        "$(archive)",
        "$(array)",
        "$(arrow-both)",
        "$(arrow-circle-down)",
        "$(arrow-circle-left)",
        "$(arrow-circle-right)",
        "$(arrow-circle-up)",
        "$(arrow-down)",
        "$(arrow-left)",
        "$(arrow-right)",
        "$(arrow-small-down)",
        "$(arrow-small-left)",
        "$(arrow-small-right)",
        "$(arrow-small-up)",
        "$(arrow-swap)",
        "$(arrow-up)",
        "$(attach)",
        "$(azure)",
        "$(azure-devops)",
        "$(beaker)",
        "$(beaker-stop)",
        "$(bell)",
        "$(bell-dot)",
        "$(bell-slash)",
        "$(bell-slash-dot)",
        "$(blank)",
        "$(bold)",
        "$(book)",
        "$(bookmark)",
        "$(bracket)",
        "$(bracket-dot)",
        "$(bracket-error)",
        "$(briefcase)",
        "$(broadcast)",
        "$(browser)",
        "$(bug)",
        "$(calendar)",
        "$(call-incoming)",
        "$(call-outgoing)",
        "$(case-sensitive)",
        "$(chat-sparkle)",
        "$(check)",
        "$(check-all)",
        "$(checklist)",
        "$(chevron-down)",
        "$(chevron-left)",
        "$(chevron-right)",
        "$(chevron-up)",
        "$(chip)",
        "$(chrome-close)",
        "$(chrome-maximize)",
        "$(chrome-minimize)",
        "$(chrome-restore)",
        "$(circle)",
        "$(circle-filled)",
        "$(circle-large)",
        "$(circle-large-filled)",
        "$(circle-large-outline)",
        "$(circle-outline)",
        "$(circle-slash)",
        "$(circle-small)",
        "$(circle-small-filled)",
        "$(circuit-board)",
        "$(clear-all)",
        "$(clippy)",
        "$(clock)",
        "$(clone)",
        "$(close)",
        "$(close-all)",
        "$(close-dirty)",
        "$(cloud)",
        "$(cloud-download)",
        "$(cloud-upload)",
        "$(code)",
        "$(code-oss)",
        "$(code-review)",
        "$(coffee)",
        "$(collapse-all)",
        "$(color-mode)",
        "$(combine)",
        "$(comment)",
        "$(comment-add)",
        "$(comment-discussion)",
        "$(comment-draft)",
        "$(comment-unresolved)",
        "$(compare-changes)",
        "$(compass)",
        "$(compass-active)",
        "$(compass-dot)",
        "$(console)",
        "$(copilot)",
        "$(copilot-blocked)",
        "$(copilot-error)",
        "$(copilot-in-progress)",
        "$(copilot-large)",
        "$(copilot-not-connected)",
        "$(copilot-snooze)",
        "$(copilot-success)",
        "$(copilot-unavailable)",
        "$(copilot-warning)",
        "$(copilot-warning-large)",
        "$(copy)",
        "$(coverage)",
        "$(credit-card)",
        "$(dash)",
        "$(dashboard)",
        "$(database)",
        "$(debug)",
        "$(debug-all)",
        "$(debug-alt)",
        "$(debug-alt-small)",
        "$(debug-breakpoint)",
        "$(debug-breakpoint-conditional)",
        "$(debug-breakpoint-conditional-disabled)",
        "$(debug-breakpoint-conditional-unverified)",
        "$(debug-breakpoint-data)",
        "$(debug-breakpoint-data-disabled)",
        "$(debug-breakpoint-data-unverified)",
        "$(debug-breakpoint-disabled)",
        "$(debug-breakpoint-function)",
        "$(debug-breakpoint-function-disabled)",
        "$(debug-breakpoint-function-unverified)",
        "$(debug-breakpoint-log)",
        "$(debug-breakpoint-log-disabled)",
        "$(debug-breakpoint-log-unverified)",
        "$(debug-breakpoint-pending)",
        "$(debug-breakpoint-unsupported)",
        "$(debug-breakpoint-unverified)",
        "$(debug-console)",
        "$(debug-continue)",
        "$(debug-continue-small)",
        "$(debug-coverage)",
        "$(debug-disconnect)",
        "$(debug-hint)",
        "$(debug-line-by-line)",
        "$(debug-pause)",
        "$(debug-rerun)",
        "$(debug-restart)",
        "$(debug-restart-frame)",
        "$(debug-reverse-continue)",
        "$(debug-stackframe)",
        "$(debug-stackframe-active)",
        "$(debug-stackframe-dot)",
        "$(debug-stackframe-focused)",
        "$(debug-start)",
        "$(debug-step-back)",
        "$(debug-step-into)",
        "$(debug-step-out)",
        "$(debug-step-over)",
        "$(debug-stop)",
        "$(desktop-download)",
        "$(device-camera)",
        "$(device-camera-video)",
        "$(device-desktop)",
        "$(device-mobile)",
        "$(dialog-close)",
        "$(dialog-error)",
        "$(dialog-info)",
        "$(dialog-warning)",
        "$(diff)",
        "$(diff-added)",
        "$(diff-ignored)",
        "$(diff-modified)",
        "$(diff-multiple)",
        "$(diff-removed)",
        "$(diff-renamed)",
        "$(diff-sidebyside)",
        "$(diff-single)",
        "$(discard)",
        "$(drop-down-button)",
        "$(edit)",
        "$(edit-session)",
        "$(edit-sparkle)",
        "$(editor-layout)",
        "$(ellipsis)",
        "$(empty-window)",
        "$(error)",
        "$(error-small)",
        "$(exclude)",
        "$(expand-all)",
        "$(export)",
        "$(export)",
        "$(extensions)",
        "$(extensions-large)",
        "$(eye)",
        "$(eye-closed)",
        "$(eye-unwatch)",
        "$(eye-watch)",
        "$(feedback)",
        "$(file)",
        "$(file-add)",
        "$(file-binary)",
        "$(file-code)",
        "$(file-directory)",
        "$(file-directory-create)",
        "$(file-media)",
        "$(file-pdf)",
        "$(file-submodule)",
        "$(file-symlink-directory)",
        "$(file-symlink-file)",
        "$(file-text)",
        "$(file-zip)",
        "$(files)",
        "$(filter)",
        "$(filter-filled)",
        "$(flag)",
        "$(flame)",
        "$(fold)",
        "$(fold-down)",
        "$(fold-horizontal)",
        "$(fold-horizontal-filled)",
        "$(fold-up)",
        "$(fold-vertical)",
        "$(fold-vertical-filled)",
        "$(folder)",
        "$(folder-active)",
        "$(folder-library)",
        "$(folder-opened)",
        "$(game)",
        "$(gather)",
        "$(gear)",
        "$(gift)",
        "$(gist)",
        "$(gist-fork)",
        "$(gist-new)",
        "$(gist-private)",
        "$(gist-secret)",
        "$(git-branch)",
        "$(git-branch-create)",
        "$(git-branch-delete)",
        "$(git-commit)",
        "$(git-compare)",
        "$(git-fetch)",
        "$(git-fork-private)",
        "$(git-merge)",
        "$(git-pull-request)",
        "$(git-pull-request-abandoned)",
        "$(git-pull-request-assignee)",
        "$(git-pull-request-closed)",
        "$(git-pull-request-create)",
        "$(git-pull-request-done)",
        "$(git-pull-request-draft)",
        "$(git-pull-request-go-to-changes)",
        "$(git-pull-request-label)",
        "$(git-pull-request-milestone)",
        "$(git-pull-request-new-changes)",
        "$(git-pull-request-reviewer)",
        "$(git-stash)",
        "$(git-stash-apply)",
        "$(git-stash-pop)",
        "$(github)",
        "$(github-action)",
        "$(github-alt)",
        "$(github-inverted)",
        "$(github-project)",
        "$(globe)",
        "$(go-to-editing-session)",
        "$(go-to-file)",
        "$(go-to-search)",
        "$(grabber)",
        "$(graph)",
        "$(graph-left)",
        "$(graph-line)",
        "$(graph-scatter)",
        "$(gripper)",
        "$(group-by-ref-type)",
        "$(heart)",
        "$(heart-filled)",
        "$(history)",
        "$(home)",
        "$(horizontal-rule)",
        "$(hubot)",
        "$(inbox)",
        "$(indent)",
        "$(info)",
        "$(insert)",
        "$(inspect)",
        "$(issue-closed)",
        "$(issue-draft)",
        "$(issue-opened)",
        "$(issue-reopened)",
        "$(issues)",
        "$(italic)",
        "$(jersey)",
        "$(json)",
        "$(kebab-horizontal)",
        "$(kebab-vertical)",
        "$(key)",
        "$(keyboard)",
        "$(keyboard-tab)",
        "$(keyboard-tab-above)",
        "$(keyboard-tab-below)",
        "$(law)",
        "$(layers)",
        "$(layers-active)",
        "$(layers-dot)",
        "$(layout)",
        "$(layout-activitybar-left)",
        "$(layout-activitybar-right)",
        "$(layout-centered)",
        "$(layout-menubar)",
        "$(layout-panel)",
        "$(layout-panel-center)",
        "$(layout-panel-dock)",
        "$(layout-panel-justify)",
        "$(layout-panel-left)",
        "$(layout-panel-off)",
        "$(layout-panel-right)",
        "$(layout-sidebar-left)",
        "$(layout-sidebar-left-dock)",
        "$(layout-sidebar-left-off)",
        "$(layout-sidebar-right)",
        "$(layout-sidebar-right-dock)",
        "$(layout-sidebar-right-off)",
        "$(layout-statusbar)",
        "$(library)",
        "$(light-bulb)",
        "$(lightbulb)",
        "$(lightbulb-autofix)",
        "$(lightbulb-empty)",
        "$(lightbulb-sparkle)",
        "$(lightbulb-sparkle-autofix)",
        "$(link)",
        "$(link-external)",
        "$(list-filter)",
        "$(list-flat)",
        "$(list-ordered)",
        "$(list-selection)",
        "$(list-tree)",
        "$(list-unordered)",
        "$(live-share)",
        "$(loading)",
        "$(location)",
        "$(lock)",
        "$(lock-small)",
        "$(log-in)",
        "$(log-out)",
        "$(logo-github)",
        "$(magnet)",
        "$(mail)",
        "$(mail-read)",
        "$(mail-reply)",
        "$(map)",
        "$(map-filled)",
        "$(map-horizontal)",
        "$(map-horizontal-filled)",
        "$(map-vertical)",
        "$(map-vertical-filled)",
        "$(mark-github)",
        "$(markdown)",
        "$(mcp)",
        "$(megaphone)",
        "$(mention)",
        "$(menu)",
        "$(menu-selection)",
        "$(menu-submenu)",
        "$(menubar-more)",
        "$(merge)",
        "$(mic)",
        "$(mic-filled)",
        "$(microscope)",
        "$(milestone)",
        "$(mirror)",
        "$(mirror-private)",
        "$(mirror-public)",
        "$(more)",
        "$(mortar-board)",
        "$(move)",
        "$(multiple-windows)",
        "$(music)",
        "$(mute)",
        "$(new-file)",
        "$(new-folder)",
        "$(newline)",
        "$(newline)",
        "$(no-newline)",
        "$(note)",
        "$(notebook)",
        "$(notebook-template)",
        "$(octoface)",
        "$(open-preview)",
        "$(organization)",
        "$(organization-filled)",
        "$(organization-outline)",
        "$(output)",
        "$(package)",
        "$(paintcan)",
        "$(pass)",
        "$(pass-filled)",
        "$(pencil)",
        "$(percentage)",
        "$(person)",
        "$(person-add)",
        "$(person-filled)",
        "$(person-follow)",
        "$(person-outline)",
        "$(piano)",
        "$(pie-chart)",
        "$(pin)",
        "$(pinned)",
        "$(pinned-dirty)",
        "$(play)",
        "$(play-circle)",
        "$(plug)",
        "$(plus)",
        "$(preserve-case)",
        "$(preview)",
        "$(primitive-dot)",
        "$(primitive-square)",
        "$(project)",
        "$(pulse)",
        "$(python)",
        "$(question)",
        "$(quick-input-back)",
        "$(quote)",
        "$(radio-tower)",
        "$(reactions)",
        "$(record)",
        "$(record-keys)",
        "$(record-small)",
        "$(redo)",
        "$(references)",
        "$(refresh)",
        "$(regex)",
        "$(remote)",
        "$(remote-explorer)",
        "$(remove)",
        "$(remove-close)",
        "$(repl)",
        "$(replace)",
        "$(replace-all)",
        "$(reply)",
        "$(repo)",
        "$(repo-clone)",
        "$(repo-create)",
        "$(repo-delete)",
        "$(repo-fetch)",
        "$(repo-force-push)",
        "$(repo-forked)",
        "$(repo-pinned)",
        "$(repo-pull)",
        "$(repo-push)",
        "$(repo-sync)",
        "$(report)",
        "$(request-changes)",
        "$(robot)",
        "$(rocket)",
        "$(root-folder)",
        "$(root-folder-opened)",
        "$(rss)",
        "$(ruby)",
        "$(run)",
        "$(run-above)",
        "$(run-all)",
        "$(run-all-coverage)",
        "$(run-below)",
        "$(run-coverage)",
        "$(run-errors)",
        "$(save)",
        "$(save-all)",
        "$(save-as)",
        "$(screen-full)",
        "$(screen-normal)",
        "$(scrollbar-button-down)",
        "$(scrollbar-button-left)",
        "$(scrollbar-button-right)",
        "$(scrollbar-button-up)",
        "$(search)",
        "$(search-fuzzy)",
        "$(search-save)",
        "$(search-sparkle)",
        "$(search-stop)",
        "$(selection)",
        "$(send)",
        "$(send-to-remote-agent)",
        "$(server)",
        "$(server-environment)",
        "$(server-process)",
        "$(settings)",
        "$(settings-gear)",
        "$(share)",
        "$(shield)",
        "$(sign-in)",
        "$(sign-out)",
        "$(smiley)",
        "$(snake)",
        "$(sort-percentage)",
        "$(sort-precedence)",
        "$(source-control)",
        "$(sparkle)",
        "$(sparkle-filled)",
        "$(split-horizontal)",
        "$(split-vertical)",
        "$(squirrel)",
        "$(star)",
        "$(star-add)",
        "$(star-delete)",
        "$(star-empty)",
        "$(star-full)",
        "$(star-half)",
        "$(stop)",
        "$(stop-circle)",
        "$(surround-with)",
        "$(symbol-array)",
        "$(symbol-boolean)",
        "$(symbol-class)",
        "$(symbol-color)",
        "$(symbol-constant)",
        "$(symbol-constructor)",
        "$(symbol-customcolor)",
        "$(symbol-enum)",
        "$(symbol-enum-member)",
        "$(symbol-event)",
        "$(symbol-field)",
        "$(symbol-file)",
        "$(symbol-folder)",
        "$(symbol-function)",
        "$(symbol-interface)",
        "$(symbol-key)",
        "$(symbol-keyword)",
        "$(symbol-method)",
        "$(symbol-method-arrow)",
        "$(symbol-misc)",
        "$(symbol-module)",
        "$(symbol-namespace)",
        "$(symbol-null)",
        "$(symbol-number)",
        "$(symbol-numeric)",
        "$(symbol-object)",
        "$(symbol-operator)",
        "$(symbol-package)",
        "$(symbol-parameter)",
        "$(symbol-property)",
        "$(symbol-reference)",
        "$(symbol-ruler)",
        "$(symbol-snippet)",
        "$(symbol-string)",
        "$(symbol-struct)",
        "$(symbol-structure)",
        "$(symbol-text)",
        "$(symbol-type-parameter)",
        "$(symbol-unit)",
        "$(symbol-value)",
        "$(symbol-variable)",
        "$(sync)",
        "$(sync-ignored)",
        "$(table)",
        "$(tag)",
        "$(tag-add)",
        "$(tag-remove)",
        "$(target)",
        "$(tasklist)",
        "$(telescope)",
        "$(terminal)",
        "$(terminal-bash)",
        "$(terminal-cmd)",
        "$(terminal-debian)",
        "$(terminal-decoration-error)",
        "$(terminal-decoration-incomplete)",
        "$(terminal-decoration-mark)",
        "$(terminal-decoration-success)",
        "$(terminal-linux)",
        "$(terminal-powershell)",
        "$(terminal-tmux)",
        "$(terminal-ubuntu)",
        "$(text-size)",
        "$(three-bars)",
        "$(thumbsdown)",
        "$(thumbsdown-filled)",
        "$(thumbsdown-filled)",
        "$(thumbsup)",
        "$(thumbsup-filled)",
        "$(thumbsup-filled)",
        "$(toolbar-more)",
        "$(tools)",
        "$(trash)",
        "$(trashcan)",
        "$(tree-filter-clear)",
        "$(tree-filter-on-type-off)",
        "$(tree-filter-on-type-on)",
        "$(tree-item-expanded)",
        "$(tree-item-loading)",
        "$(triangle-down)",
        "$(triangle-left)",
        "$(triangle-right)",
        "$(triangle-up)",
        "$(twitter)",
        "$(type-hierarchy)",
        "$(type-hierarchy-sub)",
        "$(type-hierarchy-super)",
        "$(unfold)",
        "$(ungroup-by-ref-type)",
        "$(unlock)",
        "$(unmute)",
        "$(unverified)",
        "$(variable)",
        "$(variable-group)",
        "$(verified)",
        "$(verified-filled)",
        "$(versions)",
        "$(vm)",
        "$(vm-active)",
        "$(vm-connect)",
        "$(vm-outline)",
        "$(vm-running)",
        "$(vr)",
        "$(vscode)",
        "$(vscode-insiders)",
        "$(wand)",
        "$(warning)",
        "$(watch)",
        "$(whitespace)",
        "$(whole-word)",
        "$(window)",
        "$(word-wrap)",
        "$(workspace-trusted)",
        "$(workspace-unknown)",
        "$(workspace-unspecified)",
        "$(workspace-untrusted)",
        "$(wrench)",
        "$(wrench-subaction)",
        "$(x)",
        "$(zap)",
        "$(zoom-in)",
        "$(zoom-out)"
      ],
      "default": "terminal",
      "scope": 5,
      "defaultDefaultValue": "terminal",
      "restricted": false
    },
    "terminal.integrated.tabs.description": {
      "type": "string",
      "default": "${task}${separator}${local}${separator}${cwdFolder}",
      "markdownDescription": "Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:\n- `${cwd}`: the terminal's current working directory.\n- `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.\n- `${workspaceFolder}`: the workspace in which the terminal was launched.\n- `${workspaceFolderName}`: the `name` of the workspace in which the terminal was launched.\n- `${local}`: indicates a local terminal in a remote workspace.\n- `${process}`: the name of the terminal process.\n- `${progress}`: the progress state as reported by the `OSC 9;4` sequence.\n- `${separator}`: a conditional separator (` - `) that only shows when it's surrounded by variables with values or static text.\n- `${sequence}`: the name provided to the terminal by the process.\n- `${task}`: indicates this terminal is associated with a task.\n- `${shellType}`: the detected shell type.\n- `${shellCommand}`: the command being executed according to shell integration. This also requires high confidence in the detected command line, which may not work in some prompt frameworks.\n- `${shellPromptInput}`: the shell's full prompt input according to shell integration.",
      "defaultDefaultValue": "${task}${separator}${local}${separator}${cwdFolder}",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.tabs.enableAnimation": {
      "description": "Controls whether terminal tab statuses support animation (eg. in progress tasks).",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.tabs.enabled": {
      "description": "Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.tabs.focusMode": {
      "type": "string",
      "enum": [
        "doubleClick",
        "singleClick"
      ],
      "enumDescriptions": [
        "Focus the terminal when double-clicking a terminal tab",
        "Focus the terminal when clicking a terminal tab"
      ],
      "default": "doubleClick",
      "description": "Controls whether focusing the terminal of a tab happens on double or single click.",
      "defaultDefaultValue": "doubleClick",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.tabs.hideCondition": {
      "description": "Controls whether the terminal tabs view will hide under certain conditions.",
      "type": "string",
      "enum": [
        "never",
        "singleGroup",
        "singleTerminal"
      ],
      "enumDescriptions": [
        "Never hide the terminal tabs view",
        "Hide the terminal tabs view when there is only a single terminal group opened",
        "Hide the terminal tabs view when there is only a single terminal opened"
      ],
      "default": "singleTerminal",
      "defaultDefaultValue": "singleTerminal",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.tabs.location": {
      "type": "string",
      "enum": [
        "left",
        "right"
      ],
      "enumDescriptions": [
        "Show the terminal tabs view to the left of the terminal",
        "Show the terminal tabs view to the right of the terminal"
      ],
      "default": "right",
      "description": "Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).",
      "defaultDefaultValue": "right",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.tabs.separator": {
      "type": "string",
      "default": " - ",
      "markdownDescription": "Separator used by `#terminal.integrated.tabs.title#` and `#terminal.integrated.tabs.description#`.",
      "defaultDefaultValue": " - ",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.tabs.showActions": {
      "description": "Controls whether terminal split and kill buttons are displays next to the new terminal button.",
      "type": "string",
      "enum": [
        "always",
        "never",
        "singleTerminal",
        "singleTerminalOrNarrow"
      ],
      "enumDescriptions": [
        "Always show the actions",
        "Never show the actions",
        "Show the actions when it is the only terminal opened",
        "Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state"
      ],
      "default": "singleTerminalOrNarrow",
      "defaultDefaultValue": "singleTerminalOrNarrow",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.tabs.showActiveTerminal": {
      "description": "Shows the active terminal information in the view. This is particularly useful when the title within the tabs aren't visible.",
      "type": "string",
      "enum": [
        "always",
        "never",
        "singleTerminal",
        "singleTerminalOrNarrow"
      ],
      "enumDescriptions": [
        "Always show the active terminal",
        "Never show the active terminal",
        "Show the active terminal when it is the only terminal opened",
        "Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state"
      ],
      "default": "singleTerminalOrNarrow",
      "defaultDefaultValue": "singleTerminalOrNarrow",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.tabs.title": {
      "type": "string",
      "default": "${process}",
      "markdownDescription": "Controls the terminal title. Variables are substituted based on the context:\n- `${cwd}`: the terminal's current working directory.\n- `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.\n- `${workspaceFolder}`: the workspace in which the terminal was launched.\n- `${workspaceFolderName}`: the `name` of the workspace in which the terminal was launched.\n- `${local}`: indicates a local terminal in a remote workspace.\n- `${process}`: the name of the terminal process.\n- `${progress}`: the progress state as reported by the `OSC 9;4` sequence.\n- `${separator}`: a conditional separator (` - `) that only shows when it's surrounded by variables with values or static text.\n- `${sequence}`: the name provided to the terminal by the process.\n- `${task}`: indicates this terminal is associated with a task.\n- `${shellType}`: the detected shell type.\n- `${shellCommand}`: the command being executed according to shell integration. This also requires high confidence in the detected command line, which may not work in some prompt frameworks.\n- `${shellPromptInput}`: the shell's full prompt input according to shell integration.",
      "defaultDefaultValue": "${process}",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.tabStopWidth": {
      "markdownDescription": "The number of cells in a tab stop.",
      "type": "number",
      "minimum": 1,
      "default": 8,
      "defaultDefaultValue": 8,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.unicodeVersion": {
      "type": "string",
      "enum": [
        "11",
        "6"
      ],
      "enumDescriptions": [
        "Version 11 of Unicode. This version provides better support on modern systems that use modern versions of Unicode.",
        "Version 6 of Unicode. This is an older version which should work better on older systems."
      ],
      "default": "11",
      "description": "Controls what version of Unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.",
      "defaultDefaultValue": "11",
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.useWslProfiles": {
      "description": "Controls whether or not WSL distros are shown in the terminal dropdown",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.windowsEnableConpty": {
      "description": "Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.windowsUseConptyDll": {
      "markdownDescription": "Whether to use the experimental conpty.dll (v1.22.250204002) shipped with VS Code, instead of the one bundled with Windows.",
      "type": "boolean",
      "tags": [
        "preview"
      ],
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "terminal.integrated.wordSeparators": {
      "markdownDescription": "A string containing all characters to be considered word separators when double-clicking to select word and in the fallback 'word' link detection. Since this is used for link detection, including characters such as `:` that are used when detecting links will cause the line and column part of links like `file:10:5` to be ignored.",
      "type": "string",
      "default": " ()[]{}',\"`─‘’“”|",
      "defaultDefaultValue": " ()[]{}',\"`─‘’“”|",
      "scope": 4,
      "restricted": false
    },
    "terminal.sourceControlRepositoriesKind": {
      "type": "string",
      "enum": [
        "both",
        "external",
        "integrated"
      ],
      "enumDescriptions": [
        "Show both integrated and external terminal actions.",
        "Show the external terminal action.",
        "Show the integrated terminal action."
      ],
      "default": "integrated",
      "description": "When opening a repository from the Source Control Repositories view in a terminal, determines what kind of terminal will be launched",
      "defaultDefaultValue": "integrated",
      "scope": 4,
      "restricted": false
    },
    "testing.alwaysRevealTestOnStateChange": {
      "markdownDescription": "Always reveal the executed test when `#testing.followRunningTest#` is on. If this setting is turned off, only failed tests will be revealed.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "testing.automaticallyOpenPeekView": {
      "description": "Configures when the error Peek view is automatically opened.",
      "enum": [
        "failureAnywhere",
        "failureInVisibleDocument",
        "never"
      ],
      "default": "never",
      "enumDescriptions": [
        "Open automatically no matter where the failure is.",
        "Open automatically when a test fails in a visible document.",
        "Never automatically open."
      ],
      "defaultDefaultValue": "never",
      "scope": 4,
      "restricted": false
    },
    "testing.automaticallyOpenPeekViewDuringAutoRun": {
      "description": "Controls whether to automatically open the Peek view during continuous run mode.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "testing.automaticallyOpenTestResults": {
      "enum": [
        "neverOpen",
        "openExplorerOnTestStart",
        "openOnTestFailure",
        "openOnTestStart"
      ],
      "enumDescriptions": [
        "Never automatically open the testing views",
        "Open the test explorer when tests start",
        "Open the test result view on any test failure",
        "Open the test results view when tests start"
      ],
      "default": "openOnTestStart",
      "description": "Controls when the testing view should open.",
      "defaultDefaultValue": "openOnTestStart",
      "scope": 4,
      "restricted": false
    },
    "testing.countBadge": {
      "description": "Controls the count badge on the Testing icon on the Activity Bar.",
      "enum": [
        "failed",
        "off",
        "passed",
        "skipped"
      ],
      "enumDescriptions": [
        "Show the number of failed tests",
        "Disable the testing count badge",
        "Show the number of passed tests",
        "Show the number of skipped tests"
      ],
      "default": "failed",
      "defaultDefaultValue": "failed",
      "scope": 4,
      "restricted": false
    },
    "testing.coverageBarThresholds": {
      "markdownDescription": "Configures the colors used for percentages in test coverage bars.",
      "default": {
        "green": 90,
        "red": 0,
        "yellow": 60
      },
      "properties": {
        "green": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "default": 90
        },
        "red": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "default": 0
        },
        "yellow": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "default": 60
        }
      },
      "defaultDefaultValue": {
        "green": 90,
        "red": 0,
        "yellow": 60
      },
      "scope": 4,
      "restricted": false
    },
    "testing.coverageToolbarEnabled": {
      "description": "Controls whether the coverage toolbar is shown in the editor.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "testing.defaultGutterClickAction": {
      "description": "Controls the action to take when left-clicking on a test decoration in the gutter.",
      "enum": [
        "contextMenu",
        "debug",
        "run",
        "runWithCoverage"
      ],
      "enumDescriptions": [
        "Open the context menu for more options.",
        "Debug the test.",
        "Run the test.",
        "Run the test with coverage."
      ],
      "default": "run",
      "defaultDefaultValue": "run",
      "scope": 4,
      "restricted": false
    },
    "testing.displayedCoveragePercent": {
      "markdownDescription": "Configures what percentage is displayed by default for test coverage.",
      "default": "totalCoverage",
      "enum": [
        "minimum",
        "statement",
        "totalCoverage"
      ],
      "enumDescriptions": [
        "The minimum of statement, function, and branch coverage.",
        "The statement coverage.",
        "A calculation of the combined statement, function, and branch coverage."
      ],
      "defaultDefaultValue": "totalCoverage",
      "scope": 4,
      "restricted": false
    },
    "testing.followRunningTest": {
      "description": "Controls whether the running test should be followed in the Test Explorer view.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "testing.gutterEnabled": {
      "description": "Controls whether test decorations are shown in the editor gutter.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "testing.saveBeforeTest": {
      "description": "Control whether save all dirty editors before running a test.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "testing.showAllMessages": {
      "description": "Controls whether to show messages from all test runs.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "testing.showCoverageInExplorer": {
      "description": "Whether test coverage should be down in the File Explorer view.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "timeline.pageOnScroll": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "timeline.pageSize": {
      "type": [
        "number",
        "null"
      ],
      "default": 50,
      "markdownDescription": "The number of items to show in the Timeline view by default and when loading more items. Setting to `null` will automatically choose a page size based on the visible area of the Timeline view.",
      "defaultDefaultValue": 50,
      "scope": 4,
      "restricted": false
    },
    "typescript.autoClosingTags": {
      "$ref": "#/$defs/_361"
    },
    "typescript.check.npmIsInstalled": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "typescript.disableAutomaticTypeAcquisition": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.",
      "scope": 4,
      "tags": [
        "usesOnlineServices"
      ],
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.enablePromptUseWorkspaceTsdk": {
      "type": "boolean",
      "default": false,
      "description": "Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.experimental.useTsgo": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Disables TypeScript and JavaScript language features to allow usage of the TypeScript Go experimental extension. Requires TypeScript Go to be installed and configured. Requires reloading extensions after changing this setting.",
      "scope": 4,
      "tags": [
        "experimental"
      ],
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.format.enable": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable default TypeScript formatter.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "typescript.format.indentSwitchCase": {
      "$ref": "#/$defs/_394"
    },
    "typescript.format.insertSpaceAfterCommaDelimiter": {
      "$ref": "#/$defs/_378"
    },
    "typescript.format.insertSpaceAfterConstructor": {
      "$ref": "#/$defs/_379"
    },
    "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
      "$ref": "#/$defs/_383"
    },
    "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
      "$ref": "#/$defs/_382"
    },
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": {
      "$ref": "#/$defs/_388"
    },
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
      "$ref": "#/$defs/_390"
    },
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
      "$ref": "#/$defs/_387"
    },
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
      "$ref": "#/$defs/_386"
    },
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
      "$ref": "#/$defs/_385"
    },
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
      "$ref": "#/$defs/_389"
    },
    "typescript.format.insertSpaceAfterSemicolonInForStatements": {
      "$ref": "#/$defs/_380"
    },
    "typescript.format.insertSpaceAfterTypeAssertion": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after type assertions in TypeScript.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": {
      "$ref": "#/$defs/_381"
    },
    "typescript.format.insertSpaceBeforeFunctionParenthesis": {
      "$ref": "#/$defs/_384"
    },
    "typescript.format.placeOpenBraceOnNewLineForControlBlocks": {
      "$ref": "#/$defs/_392"
    },
    "typescript.format.placeOpenBraceOnNewLineForFunctions": {
      "$ref": "#/$defs/_391"
    },
    "typescript.format.semicolons": {
      "$ref": "#/$defs/_393"
    },
    "typescript.implementationsCodeLens.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.implementationsCodeLens.showOnInterfaceMethods": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable implementations CodeLens on interface methods.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.inlayHints.enumMemberValues.enabled": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for member values in enum declarations:\n```typescript\n\nenum MyValue {\n\tA /* = 0 */;\n\tB /* = 1 */;\n}\n \n```",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.inlayHints.functionLikeReturnTypes.enabled": {
      "$ref": "#/$defs/_401"
    },
    "typescript.inlayHints.parameterNames.enabled": {
      "$ref": "#/$defs/_395"
    },
    "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
      "$ref": "#/$defs/_396"
    },
    "typescript.inlayHints.parameterTypes.enabled": {
      "$ref": "#/$defs/_397"
    },
    "typescript.inlayHints.propertyDeclarationTypes.enabled": {
      "$ref": "#/$defs/_400"
    },
    "typescript.inlayHints.variableTypes.enabled": {
      "$ref": "#/$defs/_398"
    },
    "typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": {
      "$ref": "#/$defs/_399"
    },
    "typescript.locale": {
      "type": "string",
      "default": "auto",
      "enum": [
        "auto",
        "de",
        "en",
        "es",
        "fr",
        "it",
        "ja",
        "ko",
        "ru",
        "zh-CN",
        "zh-TW"
      ],
      "enumDescriptions": [
        "Use VS Code's configured display language.",
        "Deutsch",
        "English",
        "español",
        "français",
        "italiano",
        "日本語",
        "한국어",
        "русский",
        "中文(简体)",
        "中文(繁體)"
      ],
      "markdownDescription": "Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "typescript.npm": {
      "type": "string",
      "markdownDescription": "Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
      "scope": 2,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "default": "",
      "restricted": true
    },
    "typescript.preferences.autoImportFileExcludePatterns": {
      "$ref": "#/$defs/_374"
    },
    "typescript.preferences.autoImportSpecifierExcludeRegexes": {
      "$ref": "#/$defs/_375"
    },
    "typescript.preferences.importModuleSpecifier": {
      "$ref": "#/$defs/_372"
    },
    "typescript.preferences.importModuleSpecifierEnding": {
      "$ref": "#/$defs/_373"
    },
    "typescript.preferences.includePackageJsonAutoImports": {
      "type": "string",
      "enum": [
        "auto",
        "off",
        "on"
      ],
      "enumDescriptions": [
        "Search dependencies based on estimated performance impact.",
        "Never search dependencies.",
        "Always search dependencies."
      ],
      "default": "auto",
      "markdownDescription": "Enable/disable searching `package.json` dependencies for available auto imports.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "typescript.preferences.jsxAttributeCompletionStyle": {
      "type": "string",
      "enum": [
        "auto",
        "braces",
        "none"
      ],
      "markdownEnumDescriptions": [
        "Insert `={}` or `=\"\"` after attribute names based on the prop type. See `#typescript.preferences.quoteStyle#` to control the type of quotes used for string attributes.",
        "Insert `={}` after attribute names.",
        "Only insert attribute names."
      ],
      "default": "auto",
      "description": "Preferred style for JSX attribute completions.",
      "scope": 6,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "typescript.preferences.organizeImports": {
      "$ref": "#/$defs/_325"
    },
    "typescript.preferences.preferTypeOnlyAutoImports": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Include the `type` keyword in auto-imports whenever possible. Requires using TypeScript 5.3+ in the workspace.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.preferences.quoteStyle": {
      "$ref": "#/$defs/_371"
    },
    "typescript.preferences.renameMatchingJsxTags": {
      "$ref": "#/$defs/_377"
    },
    "typescript.preferences.useAliasesForRenames": {
      "$ref": "#/$defs/_376"
    },
    "typescript.preferGoToSourceDefinition": {
      "$ref": "#/$defs/_323"
    },
    "typescript.referencesCodeLens.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable references CodeLens in TypeScript files.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.referencesCodeLens.showOnAllFunctions": {
      "type": "boolean",
      "default": false,
      "description": "Enable/disable references CodeLens on all functions in TypeScript files.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.reportStyleChecksAsWarnings": {
      "type": "boolean",
      "default": true,
      "description": "Report style checks as warnings.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "typescript.suggest.autoImports": {
      "$ref": "#/$defs/_363"
    },
    "typescript.suggest.classMemberSnippets.enabled": {
      "$ref": "#/$defs/_370"
    },
    "typescript.suggest.completeFunctionCalls": {
      "$ref": "#/$defs/_364"
    },
    "typescript.suggest.completeJSDocs": {
      "$ref": "#/$defs/_366"
    },
    "typescript.suggest.enabled": {
      "$ref": "#/$defs/_362"
    },
    "typescript.suggest.includeAutomaticOptionalChainCompletions": {
      "$ref": "#/$defs/_368"
    },
    "typescript.suggest.includeCompletionsForImportStatements": {
      "$ref": "#/$defs/_369"
    },
    "typescript.suggest.jsdoc.generateReturns": {
      "$ref": "#/$defs/_367"
    },
    "typescript.suggest.objectLiteralMethodSnippets.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable snippet completions for methods in object literals.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "typescript.suggest.paths": {
      "$ref": "#/$defs/_365"
    },
    "typescript.suggestionActions.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable suggestion diagnostics for TypeScript files in the editor.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "typescript.tsc.autoDetect": {
      "type": "string",
      "default": "on",
      "enum": [
        "build",
        "off",
        "on",
        "watch"
      ],
      "markdownEnumDescriptions": [
        "Only create single run compile tasks.",
        "Disable this feature.",
        "Create both build and watch tasks.",
        "Only create compile and watch tasks."
      ],
      "description": "Controls auto detection of tsc tasks.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "on",
      "restricted": false
    },
    "typescript.tsdk": {
      "type": "string",
      "markdownDescription": "Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.\n\n- When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.\n- When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.\n\nSee the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "default": "",
      "restricted": true
    },
    "typescript.tsserver.enableRegionDiagnostics": {
      "type": "boolean",
      "default": true,
      "description": "Enables region-based diagnostics in TypeScript. Requires using TypeScript 5.6+ in the workspace.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "typescript.tsserver.enableTracing": {
      "type": "boolean",
      "default": false,
      "description": "Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.tsserver.experimental.enableProjectDiagnostics": {
      "type": "boolean",
      "default": false,
      "description": "Enables project wide error reporting.",
      "scope": 4,
      "tags": [
        "experimental"
      ],
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.tsserver.log": {
      "type": "string",
      "enum": [
        "normal",
        "off",
        "requestTime",
        "terse",
        "verbose"
      ],
      "default": "off",
      "description": "Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "off",
      "restricted": false
    },
    "typescript.tsserver.maxTsServerMemory": {
      "type": "number",
      "default": 3072,
      "markdownDescription": "The maximum amount of memory (in MB) to allocate to the TypeScript server process. To use a memory limit greater than 4 GB, use `#typescript.tsserver.nodePath#` to run TS Server with a custom Node installation.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": 3072,
      "restricted": false
    },
    "typescript.tsserver.nodePath": {
      "type": "string",
      "description": "Run TS Server on a custom Node installation. This can be a path to a Node executable, or 'node' if you want VS Code to detect a Node installation.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "default": "",
      "restricted": true
    },
    "typescript.tsserver.pluginPaths": {
      "type": "array",
      "items": {
        "type": "string",
        "description": "Either an absolute or relative path. Relative path will be resolved against workspace folder(s)."
      },
      "default": [],
      "description": "Additional paths to discover TypeScript Language Service plugins.",
      "scope": 2,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": [],
      "restricted": true
    },
    "typescript.tsserver.useSyntaxServer": {
      "type": "string",
      "scope": 4,
      "description": "Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.",
      "default": "auto",
      "enum": [
        "always",
        "auto",
        "never"
      ],
      "enumDescriptions": [
        "Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.",
        "Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.",
        "Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations."
      ],
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "typescript.tsserver.watchOptions": {
      "description": "Configure which watching strategies should be used to keep track of files and directories.",
      "scope": 4,
      "default": "vscode",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "fallbackPolling": {
              "type": "string",
              "description": "When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn't support native file watchers.",
              "enum": [
                "dynamicPriorityPolling",
                "fixedPollingInterval",
                "priorityPollingInterval"
              ],
              "enumDescriptions": [
                "configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling",
                "configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval",
                "configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval"
              ]
            },
            "synchronousWatchDirectory": {
              "type": "boolean",
              "description": "Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in node_modules from running npm install), but you might want to disable it with this flag for some less-common setups."
            },
            "watchDirectory": {
              "type": "string",
              "description": "Strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.",
              "enum": [
                "dynamicPriorityPolling",
                "fixedChunkSizePolling",
                "fixedPollingInterval",
                "useFsEvents"
              ],
              "enumDescriptions": [
                "Use a dynamic queue where less-frequently modified directories will be checked less often.",
                "Polls directories in chunks at regular interval.",
                "Check every directory for changes several times a second at a fixed interval.",
                "Attempt to use the operating system/file system's native events for directory changes."
              ],
              "default": "useFsEvents"
            },
            "watchFile": {
              "type": "string",
              "description": "Strategy for how individual files are watched.",
              "enum": [
                "dynamicPriorityPolling",
                "fixedChunkSizePolling",
                "fixedPollingInterval",
                "priorityPollingInterval",
                "useFsEvents",
                "useFsEventsOnParentDirectory"
              ],
              "enumDescriptions": [
                "Use a dynamic queue where less-frequently modified files will be checked less often.",
                "Polls files in chunks at regular interval.",
                "Check every file for changes several times a second at a fixed interval.",
                "Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.",
                "Attempt to use the operating system/file system's native events for file changes.",
                "Attempt to use the operating system/file system's native events to listen for changes on a file's containing directories. This can use fewer file watchers, but might be less accurate."
              ],
              "default": "useFsEvents"
            }
          }
        },
        {
          "type": "string",
          "const": "vscode",
          "description": "Use VS Code's file watchers instead of TypeScript's. Requires using TypeScript 5.4+ in the workspace."
        }
      ],
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "vscode",
      "restricted": false
    },
    "typescript.tsserver.web.projectWideIntellisense.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable project-wide IntelliSense on web. Requires that VS Code is running in a trusted context.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "typescript.tsserver.web.projectWideIntellisense.suppressSemanticErrors": {
      "type": "boolean",
      "default": false,
      "description": "Suppresses semantic errors on web even when project wide IntelliSense is enabled. This is always on when project wide IntelliSense is not enabled or available. See `#typescript.tsserver.web.projectWideIntellisense.enabled#`",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "typescript.tsserver.web.typeAcquisition.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable package acquisition on the web. This enables IntelliSense for imported packages. Requires `#typescript.tsserver.web.projectWideIntellisense.enabled#`. Currently not supported for Safari.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "typescript.updateImportsOnFileMove.enabled": {
      "$ref": "#/$defs/_360"
    },
    "typescript.updateImportsOnPaste.enabled": {
      "$ref": "#/$defs/_324"
    },
    "typescript.validate.enable": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable TypeScript validation.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "typescript.workspaceSymbols.excludeLibrarySymbols": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Exclude symbols that come from library files in `Go to Symbol in Workspace` results. Requires using TypeScript 5.3+ in the workspace.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "typescript.workspaceSymbols.scope": {
      "type": "string",
      "enum": [
        "allOpenProjects",
        "currentProject"
      ],
      "enumDescriptions": [
        "Search all open JavaScript or TypeScript projects for symbols.",
        "Only search for symbols in the current JavaScript or TypeScript project."
      ],
      "default": "allOpenProjects",
      "markdownDescription": "Controls which files are searched by [Go to Symbol in Workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "allOpenProjects",
      "restricted": false
    },
    "window.autoDetectColorScheme": {
      "type": "boolean",
      "markdownDescription": "If enabled, will automatically select a color theme based on the system color mode. If the system color mode is dark, `#workbench.preferredDarkColorTheme#` is used, else `#workbench.preferredLightColorTheme#`.",
      "default": false,
      "tags": [
        "colorThemeConfiguration"
      ],
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "window.closeWhenEmpty": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "window.commandCenter": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Show command launcher together with the window title. This setting only has an effect when `#window.customTitleBarVisibility#` is not set to `never`.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "window.confirmSaveUntitledWorkspace": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether a confirmation dialog shows asking to save or discard an opened untitled workspace in the window when switching to another workspace. Disabling the confirmation dialog will always discard the untitled workspace.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "window.density.editorTabHeight": {
      "type": "string",
      "enum": [
        "compact",
        "default"
      ],
      "default": "default",
      "markdownDescription": "Controls the height of editor tabs. Also applies to the title control bar when `#workbench.editor.showTabs#` is not set to `multiple`.",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "window.title": {
      "type": "string",
      "default": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${profileName}${separator}${appName}",
      "markdownDescription": "Controls the window title based on the current context such as the opened workspace or active editor. Variables are substituted based on the context:\n- `${activeEditorShort}`: the file name (e.g. myFile.txt).\n- `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).\n- `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).\n- `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).\n- `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).\n- `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).\n- `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).\n- `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).\n- `${rootName}`: name of the workspace with optional remote name and workspace indicator if applicable (e.g. myFolder, myRemoteFolder [SSH] or myWorkspace (Workspace)).\n- `${rootNameShort}`: shortened name of the workspace without suffixes (e.g. myFolder, myRemoteFolder or myWorkspace).\n- `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).\n- `${profileName}`: name of the profile in which the workspace is opened (e.g. Data Science (Profile)). Ignored if default profile is used.\n- `${appName}`: e.g. VS Code.\n- `${remoteName}`: e.g. SSH\n- `${dirty}`: an indicator for when the active editor has unsaved changes.\n- `${focusedView}`: the name of the view that is currently focused.\n- `${activeRepositoryName}`: the name of the active repository (e.g. vscode).\n- `${activeRepositoryBranchName}`: the name of the active branch in the active repository (e.g. main).\n- `${activeEditorState}`: provides information about the state of the active editor (e.g. modified). This will be appended by default when in screen reader mode with `accessibility.windowTitleOptimized` enabled.\n- `${separator}`: a conditional separator (\" - \") that only shows when surrounded by variables with values or static text.",
      "defaultDefaultValue": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${profileName}${separator}${appName}",
      "scope": 4,
      "restricted": false
    },
    "window.titleSeparator": {
      "type": "string",
      "default": " - ",
      "markdownDescription": "Separator used by `#window.title#`.",
      "defaultDefaultValue": " - ",
      "scope": 4,
      "restricted": false
    },
    "window.zoomLevel": {
      "type": "number",
      "default": 0,
      "minimum": -8,
      "maximum": 8,
      "markdownDescription": "Adjust the default zoom level for all windows. Each increment above `0` (e.g. `1`) or below (e.g. `-1`) represents zooming `20%` larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity. See `#window.zoomPerWindow#` for configuring if the 'Zoom In' and 'Zoom Out' commands apply the zoom level to all windows or only the active window.",
      "ignoreSync": true,
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": 0,
      "scope": 4,
      "restricted": false
    },
    "window.zoomPerWindow": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls if the 'Zoom In' and 'Zoom Out' commands apply the zoom level to all windows or only the active window. See `#window.zoomLevel#` for configuring a default zoom level for all windows.",
      "tags": [
        "accessibility"
      ],
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.activityBar.iconClickBehavior": {
      "type": "string",
      "enum": [
        "focus",
        "toggle"
      ],
      "default": "toggle",
      "markdownDescription": "Controls the behavior of clicking an Activity Bar icon in the workbench. This value is ignored when `#workbench.activityBar.location#` is not set to `default`.",
      "enumDescriptions": [
        "Focus the Primary Side Bar if the clicked item is already visible.",
        "Hide the Primary Side Bar if the clicked item is already visible."
      ],
      "defaultDefaultValue": "toggle",
      "scope": 4,
      "restricted": false
    },
    "workbench.activityBar.location": {
      "type": "string",
      "enum": [
        "bottom",
        "default",
        "hidden",
        "top"
      ],
      "default": "default",
      "markdownDescription": "Controls the location of the Activity Bar relative to the Primary and Secondary Side Bars.",
      "enumDescriptions": [
        "Show the Activity Bar at the bottom of the Primary and Secondary Side Bars.",
        "Show the Activity Bar on the side of the Primary Side Bar and on top of the Secondary Side Bar.",
        "Hide the Activity Bar in the Primary and Secondary Side Bars.",
        "Show the Activity Bar on top of the Primary and Secondary Side Bars."
      ],
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "workbench.cloudChanges.autoResume": {
      "enum": [
        "off",
        "onReload"
      ],
      "enumDescriptions": [
        "Never attempt to resume working changes from the cloud.",
        "Automatically resume available working changes from the cloud on window reload."
      ],
      "type": "string",
      "tags": [
        "usesOnlineServices"
      ],
      "default": "onReload",
      "markdownDescription": "Controls whether to automatically resume available working changes stored in the cloud for the current workspace.",
      "defaultDefaultValue": "onReload",
      "scope": 4,
      "restricted": false
    },
    "workbench.cloudChanges.continueOn": {
      "enum": [
        "off",
        "prompt"
      ],
      "enumDescriptions": [
        "Do not store working changes in the cloud with Continue Working On unless the user has already turned on Cloud Changes.",
        "Prompt the user to sign in to store working changes in the cloud with Continue Working On."
      ],
      "type": "string",
      "tags": [
        "usesOnlineServices"
      ],
      "default": "prompt",
      "markdownDescription": "Controls whether to prompt the user to store working changes in the cloud when using Continue Working On.",
      "defaultDefaultValue": "prompt",
      "scope": 4,
      "restricted": false
    },
    "workbench.colorCustomizations": {
      "type": "object",
      "description": "Overrides colors from the currently selected color theme.",
      "allOf": [
        {
          "$ref": "vscode://schemas/workbench-colors"
        },
        {
          "properties": {
            "[Abyss]": {
              "$ref": "#/$defs/_9"
            },
            "[Default Dark Modern]": {
              "$ref": "#/$defs/_9"
            },
            "[Default Dark+]": {
              "$ref": "#/$defs/_9"
            },
            "[Default High Contrast Light]": {
              "$ref": "#/$defs/_9"
            },
            "[Default High Contrast]": {
              "$ref": "#/$defs/_9"
            },
            "[Default Light Modern]": {
              "$ref": "#/$defs/_9"
            },
            "[Default Light+]": {
              "$ref": "#/$defs/_9"
            },
            "[Kimbie Dark]": {
              "$ref": "#/$defs/_9"
            },
            "[Monokai Dimmed]": {
              "$ref": "#/$defs/_9"
            },
            "[Monokai]": {
              "$ref": "#/$defs/_9"
            },
            "[Quiet Light]": {
              "$ref": "#/$defs/_9"
            },
            "[Red]": {
              "$ref": "#/$defs/_9"
            },
            "[Solarized Dark]": {
              "$ref": "#/$defs/_9"
            },
            "[Solarized Light]": {
              "$ref": "#/$defs/_9"
            },
            "[Tomorrow Night Blue]": {
              "$ref": "#/$defs/_9"
            },
            "[Visual Studio Dark]": {
              "$ref": "#/$defs/_9"
            },
            "[Visual Studio Light]": {
              "$ref": "#/$defs/_9"
            }
          },
          "patternProperties": {
            "^\\[[^\\]]*(\\]\\s*\\[[^\\]]*)*\\]$": {
              "$ref": "#/$defs/_9"
            }
          }
        }
      ],
      "default": {},
      "defaultSnippets": [
        {
          "body": {}
        }
      ],
      "defaultDefaultValue": {},
      "scope": 4,
      "restricted": false
    },
    "workbench.colorTheme": {
      "type": "string",
      "markdownDescription": "Specifies the color theme used in the workbench when `#window.autoDetectColorScheme#` is not enabled.",
      "default": "Default Dark Modern",
      "tags": [
        "colorThemeConfiguration"
      ],
      "enum": [
        "Abyss",
        "Default Dark Modern",
        "Default Dark+",
        "Default High Contrast",
        "Default High Contrast Light",
        "Default Light Modern",
        "Default Light+",
        "Kimbie Dark",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue",
        "Visual Studio Dark",
        "Visual Studio Light"
      ],
      "enumDescriptions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "enumItemLabels": [
        "Abyss",
        "Dark (Visual Studio)",
        "Dark High Contrast",
        "Dark Modern",
        "Dark+",
        "Kimbie Dark",
        "Light (Visual Studio)",
        "Light High Contrast",
        "Light Modern",
        "Light+",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue"
      ],
      "errorMessage": "Theme is unknown or not installed.",
      "defaultDefaultValue": "Default Dark Modern",
      "scope": 4,
      "restricted": false
    },
    "workbench.commandPalette.experimental.askChatLocation": {
      "type": "string",
      "tags": [
        "experimental"
      ],
      "description": "Controls where the command palette should ask chat questions.",
      "default": "chatView",
      "enum": [
        "chatView",
        "quickChat"
      ],
      "enumDescriptions": [
        "Ask chat questions in the Chat view.",
        "Ask chat questions in Quick Chat."
      ],
      "defaultDefaultValue": "chatView",
      "scope": 4,
      "restricted": false
    },
    "workbench.commandPalette.experimental.enableNaturalLanguageSearch": {
      "type": "boolean",
      "tags": [
        "experimental"
      ],
      "description": "Controls whether the command palette should include similar commands. You must have an extension installed that provides Natural Language support.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.commandPalette.experimental.suggestCommands": {
      "type": "boolean",
      "tags": [
        "experimental"
      ],
      "description": "Controls whether the command palette should have a list of commonly used commands.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.commandPalette.history": {
      "type": "number",
      "description": "Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.",
      "default": 50,
      "minimum": 0,
      "defaultDefaultValue": 50,
      "scope": 4,
      "restricted": false
    },
    "workbench.commandPalette.preserveInput": {
      "type": "boolean",
      "description": "Controls whether the last typed input to the command palette should be restored when opening it the next time.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.alwaysShowEditorActions": {
      "type": "boolean",
      "markdownDescription": "Controls whether to always show the editor actions, even when the editor group is not active.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.autoLockGroups": {
      "type": "object",
      "description": "If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by a user gesture (for example drag and drop), but not by default. Consequently, the active editor in a locked group is less likely to be replaced accidentally with a different editor.",
      "properties": {
        "default": {
          "type": "boolean",
          "default": false,
          "description": "Text Editor"
        },
        "imagePreview.previewEditor": {
          "type": "boolean",
          "default": false,
          "description": "Image Preview"
        },
        "jsProfileVisualizer.cpuprofile.table": {
          "type": "boolean",
          "default": false,
          "description": "CPU Profile Table Visualizer"
        },
        "jsProfileVisualizer.heapprofile.table": {
          "type": "boolean",
          "default": false,
          "description": "Heap Profile Table Visualizer"
        },
        "jsProfileVisualizer.heapsnapshot.table": {
          "type": "boolean",
          "default": false,
          "description": "Heap Snapshot Table Visualizer"
        },
        "jupyter-notebook": {
          "type": "boolean",
          "default": false,
          "description": "Jupyter Notebook"
        },
        "mainThreadWebview-browserPreview": {
          "type": "boolean",
          "default": true,
          "description": "Live Preview"
        },
        "mainThreadWebview-markdown.preview": {
          "type": "boolean",
          "default": false,
          "description": "Markdown Preview"
        },
        "mainThreadWebview-simpleBrowser.view": {
          "type": "boolean",
          "default": true,
          "description": "Simple Browser"
        },
        "notebookOutputEditor": {
          "type": "boolean",
          "default": false,
          "description": "Notebook Output Editor"
        },
        "repl": {
          "type": "boolean",
          "default": false,
          "description": "repl Editor"
        },
        "terminalEditor": {
          "type": "boolean",
          "default": true,
          "description": "Terminal"
        },
        "vscode.audioPreview": {
          "type": "boolean",
          "default": false,
          "description": "Audio Preview"
        },
        "vscode.videoPreview": {
          "type": "boolean",
          "default": false,
          "description": "Video Preview"
        },
        "workbench.editor.chatSession": {
          "type": "boolean",
          "default": true,
          "description": "Chat"
        },
        "workbench.editor.processExplorer": {
          "type": "boolean",
          "default": true,
          "description": "Process Explorer"
        },
        "workbench.editorinputs.searchEditorInput": {
          "type": "boolean",
          "default": false,
          "description": "Search Editor"
        },
        "workbench.editors.gettingStartedInput": {
          "type": "boolean",
          "default": false,
          "description": "Welcome Page"
        },
        "workbench.input.interactive": {
          "type": "boolean",
          "default": false,
          "description": "Interactive Window"
        }
      },
      "default": {
        "default": false,
        "imagePreview.previewEditor": false,
        "jsProfileVisualizer.cpuprofile.table": false,
        "jsProfileVisualizer.heapprofile.table": false,
        "jsProfileVisualizer.heapsnapshot.table": false,
        "jupyter-notebook": false,
        "mainThreadWebview-browserPreview": true,
        "mainThreadWebview-markdown.preview": false,
        "mainThreadWebview-simpleBrowser.view": true,
        "notebookOutputEditor": false,
        "repl": false,
        "terminalEditor": true,
        "vscode.audioPreview": false,
        "vscode.videoPreview": false,
        "workbench.editor.chatSession": true,
        "workbench.editor.processExplorer": true,
        "workbench.editorinputs.searchEditorInput": false,
        "workbench.editors.gettingStartedInput": false,
        "workbench.input.interactive": false
      },
      "additionalProperties": false,
      "defaultDefaultValue": {
        "default": false,
        "imagePreview.previewEditor": false,
        "jsProfileVisualizer.cpuprofile.table": false,
        "jsProfileVisualizer.heapprofile.table": false,
        "jsProfileVisualizer.heapsnapshot.table": false,
        "jupyter-notebook": false,
        "mainThreadWebview-browserPreview": true,
        "mainThreadWebview-markdown.preview": false,
        "mainThreadWebview-simpleBrowser.view": true,
        "notebookOutputEditor": false,
        "repl": false,
        "terminalEditor": true,
        "vscode.audioPreview": false,
        "vscode.videoPreview": false,
        "workbench.editor.chatSession": true,
        "workbench.editor.processExplorer": true,
        "workbench.editorinputs.searchEditorInput": false,
        "workbench.editors.gettingStartedInput": false,
        "workbench.input.interactive": false
      },
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.centeredLayoutAutoResize": {
      "type": "boolean",
      "default": true,
      "description": "Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.centeredLayoutFixedWidth": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether the centered layout tries to maintain constant width when the window is resized.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.closeEmptyGroups": {
      "type": "boolean",
      "description": "Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.closeOnFileDelete": {
      "type": "boolean",
      "description": "Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.customLabels.enabled": {
      "type": "boolean",
      "markdownDescription": "Controls whether the custom workbench editor labels should be applied.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.customLabels.patterns": {
      "type": "object",
      "markdownDescription": "Controls the rendering of the editor label. Each __Item__ is a pattern that matches a file path. Both relative and absolute file paths are supported. The relative path must include the WORKSPACE_FOLDER (e.g `WORKSPACE_FOLDER/src/**.tsx` or `*/src/**.tsx`). Absolute patterns must start with a `/`. In case multiple patterns match, the longest matching path will be picked. Each __Value__ is the template for the rendered editor when the __Item__ matches. Variables are substituted based on the context:\n- `${dirname}`: name of the folder in which the file is located (e.g. `WORKSPACE_FOLDER/folder/file.txt -> folder`).\n- `${dirname(N)}`: name of the nth parent folder in which the file is located (e.g. `N=2: WORKSPACE_FOLDER/static/folder/file.txt -> WORKSPACE_FOLDER`). Folders can be picked from the start of the path by using negative numbers (e.g. `N=-1: WORKSPACE_FOLDER/folder/file.txt -> WORKSPACE_FOLDER`). If the __Item__ is an absolute pattern path, the first folder (`N=-1`) refers to the first folder in the absolute path, otherwise it corresponds to the workspace folder.\n- `${filename}`: name of the file without the file extension (e.g. `WORKSPACE_FOLDER/folder/file.txt -> file`).\n- `${extname}`: the file extension (e.g. `WORKSPACE_FOLDER/folder/file.txt -> txt`).\n- `${extname(N)}`: the nth extension of the file separated by '.' (e.g. `N=2: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext1`). Extension can be picked from the start of the extension by using negative numbers (e.g. `N=-1: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext2`).\n\nExample: `\"**/static/**/*.html\": \"${filename} - ${dirname} (${extname})\"` will render a file `WORKSPACE_FOLDER/static/folder/file.html` as `file - folder (html)`.",
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ],
        "markdownDescription": "The template which should be rendered when the pattern matches. May include the variables ${dirname}, ${filename} and ${extname}.",
        "minLength": 1,
        "pattern": ".*[a-zA-Z0-9].*"
      },
      "default": {},
      "defaultDefaultValue": {},
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.decorations.badges": {
      "type": "boolean",
      "markdownDescription": "Controls whether editor file decorations should use badges.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.decorations.colors": {
      "type": "boolean",
      "markdownDescription": "Controls whether editor file decorations should use colors.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.defaultBinaryEditor": {
      "type": "string",
      "default": "",
      "enum": [
        "",
        "default",
        "imagePreview.previewEditor",
        "jsProfileVisualizer.cpuprofile.table",
        "jsProfileVisualizer.heapprofile.table",
        "jsProfileVisualizer.heapsnapshot.table",
        "jupyter-notebook",
        "notebookOutputEditor",
        "repl",
        "vscode.audioPreview",
        "vscode.markdown.preview.editor",
        "vscode.videoPreview",
        "workbench.editor.chatSession",
        "workbench.editorinputs.searchEditorInput",
        "workbench.editors.gettingStartedInput"
      ],
      "description": "The default editor for files detected as binary. If undefined, the user will be presented with a picker.",
      "defaultDefaultValue": "",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.doubleClickTabToToggleEditorGroupSizes": {
      "type": "string",
      "enum": [
        "expand",
        "maximize",
        "off"
      ],
      "default": "expand",
      "markdownDescription": "Controls how the editor group is resized when double clicking on a tab. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.",
      "enumDescriptions": [
        "The editor group takes as much space as possible by making all other editor groups as small as possible.",
        "All other editor groups are hidden and the current editor group is maximized to take up the entire editor area.",
        "No editor group is resized when double clicking on a tab."
      ],
      "defaultDefaultValue": "expand",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.dragToOpenWindow": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls if editors can be dragged out of the window to open them in a new window. Press and hold the `Alt` key while dragging to toggle this dynamically.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.editorActionsLocation": {
      "type": "string",
      "enum": [
        "default",
        "hidden",
        "titleBar"
      ],
      "markdownEnumDescriptions": [
        "Show editor actions in the window title bar when `#workbench.editor.showTabs#` is set to `none`. Otherwise, editor actions are shown in the editor tab bar.",
        "Editor actions are not shown.",
        "Show editor actions in the window title bar. If `#window.customTitleBarVisibility#` is set to `never`, editor actions are hidden."
      ],
      "markdownDescription": "Controls where the editor actions are shown.",
      "default": "default",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.empty.hint": {
      "type": "string",
      "enum": [
        "hidden",
        "text"
      ],
      "default": "text",
      "markdownDescription": "Controls if the empty editor text hint should be visible in the editor.",
      "defaultDefaultValue": "text",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.enablePreview": {
      "type": "boolean",
      "description": "Controls whether preview mode is used when editors open. There is a maximum of one preview mode editor per editor group. This editor displays its filename in italics on its tab or title label and in the Open Editors view. Its contents will be replaced by the next editor opened in preview mode. Making a change in a preview mode editor will persist it, as will a double-click on its label, or the 'Keep Open' option in its label context menu. Opening a file from Explorer with a double-click persists its editor immediately.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.enablePreviewFromCodeNavigation": {
      "type": "boolean",
      "markdownDescription": "Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.enablePreviewFromQuickOpen": {
      "type": "boolean",
      "markdownDescription": "Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). When enabled, hold Ctrl before selection to open an editor as a non-preview. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.focusRecentEditorAfterClose": {
      "type": "boolean",
      "description": "Controls whether editors are closed in most recently used order or from left to right.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.highlightModifiedTabs": {
      "type": "boolean",
      "markdownDescription": "Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `#workbench.editor.showTabs#` is not set to multiple.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.historyBasedLanguageDetection": {
      "type": "boolean",
      "default": true,
      "description": "Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.labelFormat": {
      "type": "string",
      "enum": [
        "default",
        "long",
        "medium",
        "short"
      ],
      "enumDescriptions": [
        "Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.",
        "Show the name of the file followed by its absolute path.",
        "Show the name of the file followed by its path relative to the workspace folder.",
        "Show the name of the file followed by its directory name."
      ],
      "default": "default",
      "description": "Controls the format of the label for an editor.",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.languageDetection": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.",
      "scope": 6,
      "defaultDefaultValue": true,
      "restricted": false
    },
    "workbench.editor.languageDetectionHints": {
      "type": "object",
      "default": {
        "notebookEditors": true,
        "untitledEditors": true
      },
      "description": "When enabled, shows a Status bar Quick Fix when the editor language doesn't match detected content language.",
      "additionalProperties": false,
      "properties": {
        "notebookEditors": {
          "type": "boolean",
          "description": "Show in notebook editors"
        },
        "untitledEditors": {
          "type": "boolean",
          "description": "Show in untitled text editors"
        }
      },
      "defaultDefaultValue": {
        "notebookEditors": true,
        "untitledEditors": true
      },
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.limit.enabled": {
      "type": "boolean",
      "default": false,
      "description": "Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.limit.excludeDirty": {
      "type": "boolean",
      "default": false,
      "description": "Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.limit.perEditorGroup": {
      "type": "boolean",
      "default": false,
      "description": "Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.limit.value": {
      "type": "number",
      "default": 10,
      "exclusiveMinimum": 0,
      "markdownDescription": "Controls the maximum number of opened editors. Use the `#workbench.editor.limit.perEditorGroup#` setting to control this limit per editor group or across all groups.",
      "defaultDefaultValue": 10,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.mouseBackForwardToNavigate": {
      "type": "boolean",
      "description": "Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.navigationScope": {
      "type": "string",
      "enum": [
        "default",
        "editor",
        "editorGroup"
      ],
      "default": "default",
      "markdownDescription": "Controls the scope of history navigation in editors for commands such as 'Go Back' and 'Go Forward'.",
      "enumDescriptions": [
        "Navigate across all opened editors and editor groups.",
        "Navigate only in the active editor.",
        "Navigate only in editors of the active editor group."
      ],
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.openPositioning": {
      "type": "string",
      "enum": [
        "first",
        "last",
        "left",
        "right"
      ],
      "default": "right",
      "markdownDescription": "Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.",
      "defaultDefaultValue": "right",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.openSideBySideDirection": {
      "type": "string",
      "enum": [
        "down",
        "right"
      ],
      "default": "right",
      "markdownDescription": "Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one. This also impacts the split editor action in the editor toolbar.",
      "defaultDefaultValue": "right",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.pinnedTabSizing": {
      "type": "string",
      "enum": [
        "compact",
        "normal",
        "shrink"
      ],
      "default": "normal",
      "enumDescriptions": [
        "A pinned tab will show in a compact form with only icon or first letter of the editor name.",
        "A pinned tab inherits the look of non pinned tabs.",
        "A pinned tab shrinks to a compact fixed size showing parts of the editor name."
      ],
      "markdownDescription": "Controls the size of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.",
      "defaultDefaultValue": "normal",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.pinnedTabsOnSeparateRow": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "When enabled, displays pinned tabs in a separate row above all other tabs. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.preferHistoryBasedLanguageDetection": {
      "type": "boolean",
      "default": false,
      "description": "When enabled, a language detection model that takes into account editor history will be given higher precedence.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.preventPinnedEditorClose": {
      "type": "string",
      "enum": [
        "keyboard",
        "keyboardAndMouse",
        "mouse",
        "never"
      ],
      "default": "keyboardAndMouse",
      "enumDescriptions": [
        "Prevent closing the pinned editor when using the keyboard.",
        "Always prevent closing the pinned editor when using mouse middle click or keyboard.",
        "Prevent closing the pinned editor when using mouse middle click.",
        "Never prevent closing a pinned editor."
      ],
      "description": "Controls whether pinned editors should close when keyboard or middle mouse click is used for closing.",
      "defaultDefaultValue": "keyboardAndMouse",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.restoreViewState": {
      "type": "boolean",
      "markdownDescription": "Restores the last editor view state (such as scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `#workbench.editor.sharedViewState#` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.",
      "default": true,
      "scope": 6,
      "defaultDefaultValue": true,
      "restricted": false
    },
    "workbench.editor.revealIfOpen": {
      "type": "boolean",
      "description": "Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, such as when forcing an editor to open in a specific group or to the side of the currently active group.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.scrollToSwitchTabs": {
      "type": "boolean",
      "markdownDescription": "Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.sharedViewState": {
      "type": "boolean",
      "description": "Preserves the most recent editor view state (such as scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.showIcons": {
      "type": "boolean",
      "description": "Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.showTabs": {
      "type": "string",
      "enum": [
        "multiple",
        "none",
        "single"
      ],
      "enumDescriptions": [
        "Each editor is displayed as a tab in the editor title area.",
        "The editor title area is not displayed.",
        "The active editor is displayed as a single large tab in the editor title area."
      ],
      "description": "Controls whether opened editors should show as individual tabs, one single large tab or if the title area should not be shown.",
      "default": "multiple",
      "defaultDefaultValue": "multiple",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.splitInGroupLayout": {
      "type": "string",
      "enum": [
        "horizontal",
        "vertical"
      ],
      "default": "horizontal",
      "markdownDescription": "Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.",
      "enumDescriptions": [
        "Editors are positioned from left to right.",
        "Editors are positioned from top to bottom."
      ],
      "defaultDefaultValue": "horizontal",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.splitOnDragAndDrop": {
      "type": "boolean",
      "default": true,
      "description": "Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.splitSizing": {
      "type": "string",
      "enum": [
        "auto",
        "distribute",
        "split"
      ],
      "default": "auto",
      "enumDescriptions": [
        "Splits the active editor group to equal parts, unless all editor groups are already in equal parts. In that case, splits all the editor groups to equal parts.",
        "Splits all the editor groups to equal parts.",
        "Splits the active editor group to equal parts."
      ],
      "description": "Controls the size of editor groups when splitting them.",
      "defaultDefaultValue": "auto",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.tabActionCloseVisibility": {
      "type": "boolean",
      "default": true,
      "description": "Controls the visibility of the tab close action button.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.tabActionLocation": {
      "type": "string",
      "enum": [
        "left",
        "right"
      ],
      "default": "right",
      "markdownDescription": "Controls the position of the editor's tabs action buttons (close, unpin). This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.",
      "defaultDefaultValue": "right",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.tabActionUnpinVisibility": {
      "type": "boolean",
      "default": true,
      "description": "Controls the visibility of the tab unpin action button.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.tabSizing": {
      "type": "string",
      "enum": [
        "fit",
        "fixed",
        "shrink"
      ],
      "default": "fit",
      "enumDescriptions": [
        "Always keep tabs large enough to show the full editor label.",
        "Make all tabs the same size, while allowing them to get smaller when the available space is not enough to show all tabs at once.",
        "Allow tabs to get smaller when the available space is not enough to show all tabs at once."
      ],
      "markdownDescription": "Controls the size of editor tabs. This value is ignored when `#workbench.editor.showTabs#` is not set to `multiple`.",
      "defaultDefaultValue": "fit",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.tabSizingFixedMaxWidth": {
      "type": "number",
      "default": 160,
      "minimum": 38,
      "markdownDescription": "Controls the maximum width of tabs when `#workbench.editor.tabSizing#` size is set to `fixed`.",
      "defaultDefaultValue": 160,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.tabSizingFixedMinWidth": {
      "type": "number",
      "default": 50,
      "minimum": 38,
      "markdownDescription": "Controls the minimum width of tabs when `#workbench.editor.tabSizing#` size is set to `fixed`.",
      "defaultDefaultValue": 50,
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.titleScrollbarSizing": {
      "type": "string",
      "enum": [
        "default",
        "large"
      ],
      "enumDescriptions": [
        "The default size.",
        "Increases the size, so it can be grabbed more easily with the mouse."
      ],
      "description": "Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.",
      "default": "default",
      "defaultDefaultValue": "default",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.untitled.labelFormat": {
      "type": "string",
      "enum": [
        "content",
        "name"
      ],
      "enumDescriptions": [
        "The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.",
        "The name of the untitled file is not derived from the contents of the file."
      ],
      "default": "content",
      "description": "Controls the format of the label for an untitled editor.",
      "defaultDefaultValue": "content",
      "scope": 4,
      "restricted": false
    },
    "workbench.editor.wrapTabs": {
      "type": "boolean",
      "markdownDescription": "Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `#workbench.editor.showTabs#` is not set to '`multiple`'.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.editorAssociations": {
      "type": "object",
      "markdownDescription": "Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `\"*.hex\": \"hexEditor.hexedit\"`). These have precedence over the default behavior.",
      "patternProperties": {
        ".*": {
          "type": "string",
          "enum": [
            "default",
            "imagePreview.previewEditor",
            "jsProfileVisualizer.cpuprofile.table",
            "jsProfileVisualizer.heapprofile.table",
            "jsProfileVisualizer.heapsnapshot.table",
            "jupyter-notebook",
            "notebookOutputEditor",
            "repl",
            "vscode.audioPreview",
            "vscode.markdown.preview.editor",
            "vscode.videoPreview",
            "workbench.editor.chatSession",
            "workbench.editorinputs.searchEditorInput",
            "workbench.editors.gettingStartedInput"
          ]
        }
      },
      "default": {},
      "scope": 4,
      "restricted": false
    },
    "workbench.editorLargeFileConfirmation": {
      "type": "number",
      "default": 1024,
      "minimum": 1,
      "scope": 5,
      "markdownDescription": "Controls the minimum size of a file in MB before asking for confirmation when opening in the editor. Note that this setting may not apply to all editor types and environments.",
      "defaultDefaultValue": 1024,
      "restricted": false
    },
    "workbench.experimental.cloudChanges.autoStore": {
      "enum": [
        "off",
        "onShutdown"
      ],
      "enumDescriptions": [
        "Never attempt to automatically store working changes in the cloud.",
        "Automatically store current working changes in the cloud on window close."
      ],
      "type": "string",
      "tags": [
        "experimental",
        "usesOnlineServices"
      ],
      "default": "off",
      "markdownDescription": "Controls whether to automatically store available working changes in the cloud for the current workspace. This setting has no effect in the web.",
      "defaultDefaultValue": "off",
      "scope": 4,
      "restricted": false
    },
    "workbench.experimental.cloudChanges.partialMatches.enabled": {
      "type": "boolean",
      "tags": [
        "experimental",
        "usesOnlineServices"
      ],
      "default": false,
      "markdownDescription": "Controls whether to surface cloud changes which partially match the current session.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.experimental.share.enabled": {
      "type": "boolean",
      "default": false,
      "tags": [
        "experimental"
      ],
      "markdownDescription": "Controls whether to render the Share action next to the command center when `#window.commandCenter#` is `true`.",
      "restricted": false,
      "defaultDefaultValue": false,
      "scope": 4
    },
    "workbench.externalBrowser": {
      "type": "string",
      "markdownDescription": "Configure the browser to use for opening http or https links externally. This can either be the name of the browser (`edge`, `chrome`, `firefox`) or an absolute path to the browser's executable. Will use the system default if not set.",
      "included": true,
      "restricted": true,
      "default": "",
      "scope": 4
    },
    "workbench.externalUriOpeners": {
      "type": "object",
      "markdownDescription": "Configure the opener to use for external URIs (http, https).",
      "defaultSnippets": [
        {
          "body": {
            "example.com": "$1"
          }
        }
      ],
      "additionalProperties": {
        "anyOf": [
          {
            "type": "string",
            "markdownDescription": "Map URI pattern to an opener id.\nExample patterns: \n\n- `https://microsoft.com`: Matches this specific domain using https\n- `https://microsoft.com:8080`: Matches this specific domain on this port using https\n- `https://microsoft.com:*`: Matches this specific domain on any port using https\n- `https://microsoft.com/foo`: Matches `https://microsoft.com/foo` and `https://microsoft.com/foo/bar`, but not `https://microsoft.com/foobar` or `https://microsoft.com/bar`\n- `https://*.microsoft.com`: Match all domains ending in `microsoft.com` using https\n- `microsoft.com`: Match this specific domain using either http or https\n- `*.microsoft.com`: Match all domains ending in `microsoft.com` using either http or https\n- `http://192.168.0.1`: Matches this specific IP using http\n- `http://192.168.0.*`: Matches all IP's with this prefix using http\n- `*`: Match all domains using either http or https"
          },
          {
            "type": "string",
            "markdownDescription": "Map URI pattern to an opener id.\nExample patterns: \n\n- `https://microsoft.com`: Matches this specific domain using https\n- `https://microsoft.com:8080`: Matches this specific domain on this port using https\n- `https://microsoft.com:*`: Matches this specific domain on any port using https\n- `https://microsoft.com/foo`: Matches `https://microsoft.com/foo` and `https://microsoft.com/foo/bar`, but not `https://microsoft.com/foobar` or `https://microsoft.com/bar`\n- `https://*.microsoft.com`: Match all domains ending in `microsoft.com` using https\n- `microsoft.com`: Match this specific domain using either http or https\n- `*.microsoft.com`: Match all domains ending in `microsoft.com` using either http or https\n- `http://192.168.0.1`: Matches this specific IP using http\n- `http://192.168.0.*`: Matches all IP's with this prefix using http\n- `*`: Match all domains using either http or https",
            "enum": [
              "default"
            ],
            "enumDescriptions": [
              "Open using VS Code's standard opener."
            ]
          },
          {
            "type": "string",
            "enum": []
          }
        ]
      },
      "default": {},
      "scope": 4,
      "restricted": false
    },
    "workbench.hover.delay": {
      "type": "number",
      "description": "Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.",
      "default": 500,
      "minimum": 0,
      "defaultDefaultValue": 500,
      "scope": 4,
      "restricted": false
    },
    "workbench.iconTheme": {
      "type": [
        "string",
        "null"
      ],
      "default": "vs-seti",
      "description": "Specifies the file icon theme used in the workbench or 'null' to not show any file icons.",
      "enum": [
        null,
        "vs-minimal",
        "vs-seti"
      ],
      "enumItemLabels": [
        "None",
        "Minimal (Visual Studio Code)",
        "Seti (Visual Studio Code)"
      ],
      "enumDescriptions": [
        "No file icons",
        "",
        ""
      ],
      "errorMessage": "File icon theme is unknown or not installed.",
      "defaultDefaultValue": "vs-seti",
      "scope": 4,
      "restricted": false
    },
    "workbench.layoutControl.enabled": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether the layout control is shown in the custom title bar. This setting only has an effect when `#window.customTitleBarVisibility#` is not set to `never`.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.layoutControl.type": {
      "type": "string",
      "enum": [
        "both",
        "menu",
        "toggles"
      ],
      "enumDescriptions": [
        "Shows both the dropdown and toggle buttons.",
        "Shows a single button with a dropdown of layout options.",
        "Shows several buttons for toggling the visibility of the panels and side bar."
      ],
      "default": "both",
      "description": "Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.",
      "defaultDefaultValue": "both",
      "scope": 4,
      "restricted": false
    },
    "workbench.list.defaultFindMatchType": {
      "type": "string",
      "enum": [
        "contiguous",
        "fuzzy"
      ],
      "enumDescriptions": [
        "Use contiguous matching when searching.",
        "Use fuzzy matching when searching."
      ],
      "default": "fuzzy",
      "description": "Controls the type of matching used when searching lists and trees in the workbench.",
      "defaultDefaultValue": "fuzzy",
      "scope": 4,
      "restricted": false
    },
    "workbench.list.defaultFindMode": {
      "type": "string",
      "enum": [
        "filter",
        "highlight"
      ],
      "enumDescriptions": [
        "Filter elements when searching.",
        "Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements."
      ],
      "default": "highlight",
      "description": "Controls the default find mode for lists and trees in the workbench.",
      "defaultDefaultValue": "highlight",
      "scope": 4,
      "restricted": false
    },
    "workbench.list.fastScrollSensitivity": {
      "type": "number",
      "default": 5,
      "markdownDescription": "Scrolling speed multiplier when pressing `Alt`.",
      "defaultDefaultValue": 5,
      "scope": 4,
      "restricted": false
    },
    "workbench.list.horizontalScrolling": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.list.keyboardNavigation": {
      "type": "string",
      "enum": [
        "filter",
        "highlight",
        "simple"
      ],
      "enumDescriptions": [
        "Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.",
        "Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.",
        "Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes."
      ],
      "default": "highlight",
      "description": "Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.",
      "deprecated": true,
      "deprecationMessage": "Please use 'workbench.list.defaultFindMode' and\t'workbench.list.typeNavigationMode' instead.",
      "defaultDefaultValue": "highlight",
      "scope": 4,
      "restricted": false
    },
    "workbench.list.mouseWheelScrollSensitivity": {
      "type": "number",
      "default": 1,
      "markdownDescription": "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.",
      "defaultDefaultValue": 1,
      "scope": 4,
      "restricted": false
    },
    "workbench.list.multiSelectModifier": {
      "type": "string",
      "enum": [
        "alt",
        "ctrlCmd"
      ],
      "markdownEnumDescriptions": [
        "Maps to `Alt` on Windows and Linux and to `Option` on macOS.",
        "Maps to `Control` on Windows and Linux and to `Command` on macOS."
      ],
      "default": "ctrlCmd",
      "description": "The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.",
      "defaultDefaultValue": "ctrlCmd",
      "scope": 4,
      "restricted": false
    },
    "workbench.list.openMode": {
      "type": "string",
      "enum": [
        "doubleClick",
        "singleClick"
      ],
      "default": "singleClick",
      "description": "Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.",
      "defaultDefaultValue": "singleClick",
      "scope": 4,
      "restricted": false
    },
    "workbench.list.scrollByPage": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether clicks in the scrollbar scroll page by page.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.list.smoothScrolling": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether lists and trees have smooth scrolling.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.list.typeNavigationMode": {
      "type": "string",
      "enum": [
        "automatic",
        "trigger"
      ],
      "default": "automatic",
      "markdownDescription": "Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run.",
      "defaultDefaultValue": "automatic",
      "scope": 4,
      "restricted": false
    },
    "workbench.localHistory.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries.",
      "scope": 5,
      "defaultDefaultValue": true,
      "restricted": false
    },
    "workbench.localHistory.exclude": {
      "type": "object",
      "patternProperties": {
        ".*": {
          "type": "boolean"
        }
      },
      "markdownDescription": "Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files from the local file history. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Changing this setting has no effect on existing local file history entries.",
      "scope": 5,
      "default": {},
      "restricted": false
    },
    "workbench.localHistory.maxFileEntries": {
      "type": "number",
      "default": 50,
      "minimum": 0,
      "description": "Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded.",
      "scope": 5,
      "defaultDefaultValue": 50,
      "restricted": false
    },
    "workbench.localHistory.maxFileSize": {
      "type": "number",
      "default": 256,
      "minimum": 1,
      "description": "Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries.",
      "scope": 5,
      "defaultDefaultValue": 256,
      "restricted": false
    },
    "workbench.localHistory.mergeWindow": {
      "type": "number",
      "default": 10,
      "minimum": 1,
      "markdownDescription": "Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries.",
      "scope": 5,
      "defaultDefaultValue": 10,
      "restricted": false
    },
    "workbench.navigationControl.enabled": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether the navigation control is shown in the custom title bar. This setting only has an effect when `#window.customTitleBarVisibility#` is not set to `never`.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.panel.defaultLocation": {
      "type": "string",
      "enum": [
        "bottom",
        "left",
        "right",
        "top"
      ],
      "default": "bottom",
      "description": "Controls the default location of the panel (Terminal, Debug Console, Output, Problems) in a new workspace. It can either show at the bottom, top, right, or left of the editor area.",
      "defaultDefaultValue": "bottom",
      "scope": 4,
      "restricted": false
    },
    "workbench.panel.opensMaximized": {
      "type": "string",
      "enum": [
        "always",
        "never",
        "preserve"
      ],
      "default": "preserve",
      "description": "Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.",
      "enumDescriptions": [
        "Always maximize the panel when opening it.",
        "Never maximize the panel when opening it.",
        "Open the panel to the state that it was in, before it was closed."
      ],
      "defaultDefaultValue": "preserve",
      "scope": 4,
      "restricted": false
    },
    "workbench.panel.showLabels": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether activity items in the panel title are shown as label or icon.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.preferredDarkColorTheme": {
      "type": "string",
      "markdownDescription": "Specifies the color theme when system color mode is dark and `#window.autoDetectColorScheme#` is enabled.",
      "default": "Default Dark Modern",
      "tags": [
        "colorThemeConfiguration"
      ],
      "enum": [
        "Abyss",
        "Default Dark Modern",
        "Default Dark+",
        "Default High Contrast",
        "Default High Contrast Light",
        "Default Light Modern",
        "Default Light+",
        "Kimbie Dark",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue",
        "Visual Studio Dark",
        "Visual Studio Light"
      ],
      "enumDescriptions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "enumItemLabels": [
        "Abyss",
        "Dark (Visual Studio)",
        "Dark High Contrast",
        "Dark Modern",
        "Dark+",
        "Kimbie Dark",
        "Light (Visual Studio)",
        "Light High Contrast",
        "Light Modern",
        "Light+",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue"
      ],
      "errorMessage": "Theme is unknown or not installed.",
      "defaultDefaultValue": "Default Dark Modern",
      "scope": 4,
      "restricted": false
    },
    "workbench.preferredHighContrastColorTheme": {
      "type": "string",
      "markdownDescription": "Specifies the color theme when in high contrast dark mode and `#window.autoDetectHighContrast#` is enabled.",
      "default": "Default High Contrast",
      "tags": [
        "colorThemeConfiguration"
      ],
      "enum": [
        "Abyss",
        "Default Dark Modern",
        "Default Dark+",
        "Default High Contrast",
        "Default High Contrast Light",
        "Default Light Modern",
        "Default Light+",
        "Kimbie Dark",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue",
        "Visual Studio Dark",
        "Visual Studio Light"
      ],
      "enumDescriptions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "enumItemLabels": [
        "Abyss",
        "Dark (Visual Studio)",
        "Dark High Contrast",
        "Dark Modern",
        "Dark+",
        "Kimbie Dark",
        "Light (Visual Studio)",
        "Light High Contrast",
        "Light Modern",
        "Light+",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue"
      ],
      "errorMessage": "Theme is unknown or not installed.",
      "defaultDefaultValue": "Default High Contrast",
      "scope": 4,
      "restricted": false
    },
    "workbench.preferredHighContrastLightColorTheme": {
      "type": "string",
      "markdownDescription": "Specifies the color theme when in high contrast light mode and `#window.autoDetectHighContrast#` is enabled.",
      "default": "Default High Contrast Light",
      "tags": [
        "colorThemeConfiguration"
      ],
      "enum": [
        "Abyss",
        "Default Dark Modern",
        "Default Dark+",
        "Default High Contrast",
        "Default High Contrast Light",
        "Default Light Modern",
        "Default Light+",
        "Kimbie Dark",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue",
        "Visual Studio Dark",
        "Visual Studio Light"
      ],
      "enumDescriptions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "enumItemLabels": [
        "Abyss",
        "Dark (Visual Studio)",
        "Dark High Contrast",
        "Dark Modern",
        "Dark+",
        "Kimbie Dark",
        "Light (Visual Studio)",
        "Light High Contrast",
        "Light Modern",
        "Light+",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue"
      ],
      "errorMessage": "Theme is unknown or not installed.",
      "defaultDefaultValue": "Default High Contrast Light",
      "scope": 4,
      "restricted": false
    },
    "workbench.preferredLightColorTheme": {
      "type": "string",
      "markdownDescription": "Specifies the color theme when system color mode is light and `#window.autoDetectColorScheme#` is enabled.",
      "default": "Default Light Modern",
      "tags": [
        "colorThemeConfiguration"
      ],
      "enum": [
        "Abyss",
        "Default Dark Modern",
        "Default Dark+",
        "Default High Contrast",
        "Default High Contrast Light",
        "Default Light Modern",
        "Default Light+",
        "Kimbie Dark",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue",
        "Visual Studio Dark",
        "Visual Studio Light"
      ],
      "enumDescriptions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "enumItemLabels": [
        "Abyss",
        "Dark (Visual Studio)",
        "Dark High Contrast",
        "Dark Modern",
        "Dark+",
        "Kimbie Dark",
        "Light (Visual Studio)",
        "Light High Contrast",
        "Light Modern",
        "Light+",
        "Monokai",
        "Monokai Dimmed",
        "Quiet Light",
        "Red",
        "Solarized Dark",
        "Solarized Light",
        "Tomorrow Night Blue"
      ],
      "errorMessage": "Theme is unknown or not installed.",
      "defaultDefaultValue": "Default Light Modern",
      "scope": 4,
      "restricted": false
    },
    "workbench.productIconTheme": {
      "type": [
        "string",
        "null"
      ],
      "default": "Default",
      "description": "Specifies the product icon theme used.",
      "enum": [
        "Default"
      ],
      "enumItemLabels": [
        "Default"
      ],
      "enumDescriptions": [
        "Default"
      ],
      "errorMessage": "Product icon theme is unknown or not installed.",
      "defaultDefaultValue": "Default",
      "scope": 4,
      "restricted": false
    },
    "workbench.quickOpen.closeOnFocusLost": {
      "type": "boolean",
      "description": "Controls whether Quick Open should close automatically once it loses focus.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.quickOpen.preserveInput": {
      "type": "boolean",
      "description": "Controls whether the last typed input to Quick Open should be restored when opening it the next time.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.reduceMotion": {
      "type": "string",
      "description": "Controls whether the workbench should render with fewer animations.",
      "enumDescriptions": [
        "Render with reduced motion based on OS configuration.",
        "Do not render with reduced motion",
        "Always render with reduced motion."
      ],
      "default": "auto",
      "tags": [
        "accessibility"
      ],
      "enum": [
        "auto",
        "off",
        "on"
      ],
      "defaultDefaultValue": "auto",
      "scope": 4,
      "restricted": false
    },
    "workbench.remoteIndicator.showExtensionRecommendations": {
      "type": "boolean",
      "markdownDescription": "When enabled, remote extensions recommendations will be shown in the Remote Indicator menu.",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.sash.hoverDelay": {
      "type": "number",
      "default": 300,
      "minimum": 0,
      "maximum": 2000,
      "description": "Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.",
      "defaultDefaultValue": 300,
      "scope": 4,
      "restricted": false
    },
    "workbench.sash.size": {
      "type": "number",
      "default": 4,
      "minimum": 1,
      "maximum": 20,
      "description": "Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.",
      "defaultDefaultValue": 4,
      "scope": 4,
      "restricted": false
    },
    "workbench.secondarySideBar.defaultVisibility": {
      "type": "string",
      "enum": [
        "hidden",
        "maximized",
        "maximizedInWorkspace",
        "visible",
        "visibleInWorkspace"
      ],
      "default": "hidden",
      "experiment": {
        "mode": "startup"
      },
      "description": "Controls the default visibility of the secondary side bar in workspaces or empty windows opened for the first time.",
      "enumDescriptions": [
        "The secondary side bar is hidden by default.",
        "The secondary side bar is visible and maximized by default.",
        "The secondary side bar is visible and maximized by default if a workspace is opened.",
        "The secondary side bar is visible by default.",
        "The secondary side bar is visible by default if a workspace is opened."
      ],
      "defaultDefaultValue": "hidden",
      "scope": 4,
      "restricted": false,
      "tags": [
        "onExP"
      ]
    },
    "workbench.secondarySideBar.showLabels": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether activity items in the secondary side bar title are shown as label or icon. This setting only has an effect when `#workbench.activityBar.location#` is not set to `top`.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.settings.editor": {
      "type": "string",
      "enum": [
        "json",
        "ui"
      ],
      "enumDescriptions": [
        "Use the JSON file editor.",
        "Use the settings UI editor."
      ],
      "description": "Determines which Settings editor to use by default.",
      "default": "ui",
      "scope": 4,
      "defaultDefaultValue": "ui",
      "restricted": false
    },
    "workbench.settings.enableNaturalLanguageSearch": {
      "type": "boolean",
      "description": "Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.",
      "default": true,
      "scope": 4,
      "tags": [
        "usesOnlineServices"
      ],
      "defaultDefaultValue": true,
      "restricted": false
    },
    "workbench.settings.openDefaultKeybindings": {
      "type": "boolean",
      "description": "Controls whether opening keybinding settings also opens an editor showing all default keybindings.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.settings.openDefaultSettings": {
      "type": "boolean",
      "description": "Controls whether opening settings also opens an editor showing all default settings.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.settings.settingsSearchTocBehavior": {
      "type": "string",
      "enum": [
        "filter",
        "hide"
      ],
      "enumDescriptions": [
        "Filter the Table of Contents to just categories that have matching settings. Clicking on a category will filter the results to that category.",
        "Hide the Table of Contents while searching."
      ],
      "description": "Controls the behavior of the Settings editor Table of Contents while searching. If this setting is being changed in the Settings editor, the setting will take effect after the search query is modified.",
      "default": "filter",
      "scope": 4,
      "defaultDefaultValue": "filter",
      "restricted": false
    },
    "workbench.settings.showAISearchToggle": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether the AI search results toggle is shown in the search bar in the Settings editor after doing a search and once AI search results are available.",
      "tags": [
        "experimental",
        "onExP"
      ],
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.settings.useSplitJSON": {
      "type": "boolean",
      "markdownDescription": "Controls whether to use the split JSON editor when editing settings as JSON.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.sideBar.location": {
      "type": "string",
      "enum": [
        "left",
        "right"
      ],
      "default": "left",
      "description": "Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench.",
      "defaultDefaultValue": "left",
      "scope": 4,
      "restricted": false
    },
    "workbench.startupEditor": {
      "scope": 5,
      "type": "string",
      "enum": [
        "newUntitledFile",
        "none",
        "readme",
        "terminal",
        "welcomePage",
        "welcomePageInEmptyWorkbench"
      ],
      "enumDescriptions": [
        "Open a new untitled text file (only applies when opening an empty window).",
        "Start without an editor.",
        "Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.",
        "Open a new terminal in the editor area.",
        "Open the Welcome page, with content to aid in getting started with VS Code and extensions.",
        "Open the Welcome page when opening an empty workbench."
      ],
      "default": "welcomePage",
      "description": "Controls which editor is shown at startup, if none are restored from the previous session.",
      "defaultDefaultValue": "welcomePage",
      "restricted": false
    },
    "workbench.statusBar.visible": {
      "type": "boolean",
      "default": true,
      "description": "Controls the visibility of the status bar at the bottom of the workbench.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.tips.enabled": {
      "type": "boolean",
      "default": true,
      "description": "When enabled, will show the watermark tips when no editor is open.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.tree.enableStickyScroll": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether sticky scrolling is enabled in trees.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "workbench.tree.expandMode": {
      "type": "string",
      "enum": [
        "doubleClick",
        "singleClick"
      ],
      "default": "singleClick",
      "description": "Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.",
      "defaultDefaultValue": "singleClick",
      "scope": 4,
      "restricted": false
    },
    "workbench.tree.indent": {
      "type": "number",
      "default": 8,
      "minimum": 4,
      "maximum": 40,
      "description": "Controls tree indentation in pixels.",
      "defaultDefaultValue": 8,
      "scope": 4,
      "restricted": false
    },
    "workbench.tree.renderIndentGuides": {
      "type": "string",
      "enum": [
        "always",
        "none",
        "onHover"
      ],
      "default": "onHover",
      "description": "Controls whether the tree should render indent guides.",
      "defaultDefaultValue": "onHover",
      "scope": 4,
      "restricted": false
    },
    "workbench.tree.stickyScrollMaxItemCount": {
      "type": "number",
      "minimum": 1,
      "default": 7,
      "markdownDescription": "Controls the number of sticky elements displayed in the tree when `#workbench.tree.enableStickyScroll#` is enabled.",
      "defaultDefaultValue": 7,
      "scope": 4,
      "restricted": false
    },
    "workbench.view.alwaysShowHeaderActions": {
      "type": "boolean",
      "default": false,
      "description": "Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.",
      "defaultDefaultValue": false,
      "scope": 4,
      "restricted": false
    },
    "workbench.view.showQuietly": {
      "type": "object",
      "description": "If an extension requests a hidden view to be shown, display a clickable status bar indicator instead.",
      "scope": 4,
      "properties": {
        "workbench.panel.output": {
          "type": "boolean",
          "description": "Output view"
        }
      },
      "additionalProperties": false,
      "default": {},
      "restricted": false
    },
    "workbench.welcomePage.walkthroughs.openOnInstall": {
      "scope": 2,
      "type": "boolean",
      "default": true,
      "description": "When enabled, an extension's walkthrough will open upon install of the extension.",
      "defaultDefaultValue": true,
      "restricted": false
    },
    "zenMode.centerLayout": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether turning on Zen Mode also centers the layout.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "zenMode.fullScreen": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether turning on Zen Mode also puts the workbench into full screen mode.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "zenMode.hideActivityBar": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "zenMode.hideLineNumbers": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether turning on Zen Mode also hides the editor line numbers.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "zenMode.hideStatusBar": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "zenMode.restore": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether a window should restore to Zen Mode if it was exited in Zen Mode.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    },
    "zenMode.showTabs": {
      "type": "string",
      "enum": [
        "multiple",
        "none",
        "single"
      ],
      "description": "Controls whether turning on Zen Mode should show multiple editor tabs, a single editor tab, or hide the editor title area completely.",
      "enumDescriptions": [
        "Each editor is displayed as a tab in the editor title area.",
        "The editor title area is not displayed.",
        "The active editor is displayed as a single large tab in the editor title area."
      ],
      "default": "multiple",
      "defaultDefaultValue": "multiple",
      "scope": 4,
      "restricted": false
    },
    "zenMode.silentNotifications": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether notifications do not disturb mode should be enabled while in Zen Mode. If true, only error notifications will pop out.",
      "defaultDefaultValue": true,
      "scope": 4,
      "restricted": false
    }
  },
  "patternProperties": {
    "^(\\[([^\\]]+)\\])+$": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage"
    }
  },
  "additionalProperties": true,
  "allowTrailingCommas": true,
  "allowComments": true,
  "$defs": {
    "_0": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.insertSpaces": false
      },
      "defaultValueSource": {}
    },
    "_1": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {}
    },
    "_2": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "diffEditor.ignoreTrimWhitespace": false
      },
      "defaultValueSource": {}
    },
    "_3": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "diffEditor.ignoreTrimWhitespace": false,
        "editor.defaultColorDecorators": "never"
      },
      "defaultValueSource": {}
    },
    "_4": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.quickSuggestions": {
          "strings": true
        },
        "editor.suggest.insertMode": "replace"
      },
      "defaultValueSource": {}
    },
    "_5": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.maxTokenizationLineLength": 2500
      },
      "defaultValueSource": {}
    },
    "_6": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.suggest.insertMode": "replace"
      },
      "defaultValueSource": {}
    },
    "_7": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.defaultColorDecorators": "never"
      },
      "defaultValueSource": {}
    },
    "_8": {
      "type": "object",
      "description": "Configure editor settings to be overridden for a language.",
      "errorMessage": "This setting does not support per-language configuration.",
      "$ref": "vscode://schemas/settings/resourceLanguage",
      "default": {
        "editor.unicodeHighlight.ambiguousCharacters": false,
        "editor.unicodeHighlight.invisibleCharacters": false,
        "diffEditor.ignoreTrimWhitespace": false,
        "editor.wordWrap": "on",
        "editor.quickSuggestions": {
          "comments": "off",
          "strings": "off",
          "other": "off"
        }
      },
      "defaultValueSource": {}
    },
    "_9": {
      "$ref": "vscode://schemas/workbench-colors",
      "additionalProperties": false
    },
    "_10": {
      "description": "Sets the colors and styles for comments",
      "$ref": "vscode://schemas/textmate-colors#/definitions/colorGroup"
    },
    "_11": {
      "description": "Sets the colors and styles for strings literals.",
      "$ref": "vscode://schemas/textmate-colors#/definitions/colorGroup"
    },
    "_12": {
      "description": "Sets the colors and styles for keywords.",
      "$ref": "vscode://schemas/textmate-colors#/definitions/colorGroup"
    },
    "_13": {
      "description": "Sets the colors and styles for number literals.",
      "$ref": "vscode://schemas/textmate-colors#/definitions/colorGroup"
    },
    "_14": {
      "description": "Sets the colors and styles for type declarations and references.",
      "$ref": "vscode://schemas/textmate-colors#/definitions/colorGroup"
    },
    "_15": {
      "description": "Sets the colors and styles for functions declarations and references.",
      "$ref": "vscode://schemas/textmate-colors#/definitions/colorGroup"
    },
    "_16": {
      "description": "Sets the colors and styles for variables declarations and references.",
      "$ref": "vscode://schemas/textmate-colors#/definitions/colorGroup"
    },
    "_17": {
      "description": "Sets colors and styles using textmate theming rules (advanced).",
      "$ref": "vscode://schemas/textmate-colors"
    },
    "_18": {
      "description": "Whether semantic highlighting should be enabled for this theme.",
      "deprecationMessage": "Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.",
      "markdownDeprecationMessage": "Use `enabled` in `#editor.semanticTokenColorCustomizations#` setting instead.",
      "type": "boolean"
    },
    "_19": {
      "properties": {
        "comments": {
          "$ref": "#/$defs/_10"
        },
        "strings": {
          "$ref": "#/$defs/_11"
        },
        "keywords": {
          "$ref": "#/$defs/_12"
        },
        "numbers": {
          "$ref": "#/$defs/_13"
        },
        "types": {
          "$ref": "#/$defs/_14"
        },
        "functions": {
          "$ref": "#/$defs/_15"
        },
        "variables": {
          "$ref": "#/$defs/_16"
        },
        "textMateRules": {
          "$ref": "#/$defs/_17"
        },
        "semanticHighlighting": {
          "$ref": "#/$defs/_18"
        }
      },
      "additionalProperties": false
    },
    "_20": {
      "type": "boolean",
      "description": "Whether semantic highlighting is enabled or disabled for this theme",
      "suggestSortText": "0_enabled"
    },
    "_21": {
      "$ref": "vscode://schemas/token-styling",
      "description": "Semantic token styling rules for this theme.",
      "suggestSortText": "0_rules"
    },
    "_22": {
      "type": "object",
      "properties": {
        "enabled": {
          "$ref": "#/$defs/_20"
        },
        "rules": {
          "$ref": "#/$defs/_21"
        }
      },
      "additionalProperties": false
    },
    "_23": {
      "markdownDescription": "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_24": {
      "markdownEnumDescriptions": [
        "",
        "Only accept a suggestion with `Enter` when it makes a textual change.",
        ""
      ],
      "markdownDescription": "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.",
      "type": "string",
      "enum": [
        "on",
        "smart",
        "off"
      ],
      "default": "on",
      "defaultDefaultValue": "on",
      "scope": 6,
      "restricted": false
    },
    "_25": {
      "type": "string",
      "enum": [
        "auto",
        "on",
        "off"
      ],
      "enumDescriptions": [
        "Use platform APIs to detect when a Screen Reader is attached.",
        "Optimize for usage with a Screen Reader.",
        "Assume a screen reader is not attached."
      ],
      "default": "auto",
      "tags": [
        "accessibility"
      ],
      "description": "Controls if the UI should run in a mode where it is optimized for screen readers.",
      "defaultDefaultValue": "auto",
      "scope": 6,
      "restricted": false
    },
    "_26": {
      "description": "Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.",
      "tags": [
        "accessibility"
      ],
      "type": "integer",
      "default": 500,
      "minimum": 1,
      "maximum": 1073741824,
      "defaultDefaultValue": 500,
      "scope": 6,
      "restricted": false
    },
    "_27": {
      "description": "Controls whether to allow using variable line heights in the editor.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_28": {
      "description": "Controls whether to allow using variable fonts in the editor.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_29": {
      "description": "Controls whether to allow using variable fonts in the editor in the accessibility mode.",
      "tags": [
        "accessibility"
      ],
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_30": {
      "enumDescriptions": [
        "",
        "Use language configurations to determine when to autoclose brackets.",
        "Autoclose brackets only when the cursor is to the left of whitespace.",
        ""
      ],
      "description": "Controls whether the editor should automatically close brackets after the user adds an opening bracket.",
      "type": "string",
      "enum": [
        "always",
        "languageDefined",
        "beforeWhitespace",
        "never"
      ],
      "default": "languageDefined",
      "defaultDefaultValue": "languageDefined",
      "scope": 6,
      "restricted": false
    },
    "_31": {
      "enumDescriptions": [
        "",
        "Use language configurations to determine when to autoclose comments.",
        "Autoclose comments only when the cursor is to the left of whitespace.",
        ""
      ],
      "description": "Controls whether the editor should automatically close comments after the user adds an opening comment.",
      "type": "string",
      "enum": [
        "always",
        "languageDefined",
        "beforeWhitespace",
        "never"
      ],
      "default": "languageDefined",
      "defaultDefaultValue": "languageDefined",
      "scope": 6,
      "restricted": false
    },
    "_32": {
      "description": "Control whether inline suggestions are announced by a screen reader.",
      "tags": [
        "accessibility"
      ],
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_33": {
      "enumDescriptions": [
        "",
        "Remove adjacent closing quotes or brackets only if they were automatically inserted.",
        ""
      ],
      "description": "Controls whether the editor should remove adjacent closing quotes or brackets when deleting.",
      "type": "string",
      "enum": [
        "always",
        "auto",
        "never"
      ],
      "default": "auto",
      "defaultDefaultValue": "auto",
      "scope": 6,
      "restricted": false
    },
    "_34": {
      "enumDescriptions": [
        "",
        "Type over closing quotes or brackets only if they were automatically inserted.",
        ""
      ],
      "description": "Controls whether the editor should type over closing quotes or brackets.",
      "type": "string",
      "enum": [
        "always",
        "auto",
        "never"
      ],
      "default": "auto",
      "defaultDefaultValue": "auto",
      "scope": 6,
      "restricted": false
    },
    "_35": {
      "enumDescriptions": [
        "",
        "Use language configurations to determine when to autoclose quotes.",
        "Autoclose quotes only when the cursor is to the left of whitespace.",
        ""
      ],
      "description": "Controls whether the editor should automatically close quotes after the user adds an opening quote.",
      "type": "string",
      "enum": [
        "always",
        "languageDefined",
        "beforeWhitespace",
        "never"
      ],
      "default": "languageDefined",
      "defaultDefaultValue": "languageDefined",
      "scope": 6,
      "restricted": false
    },
    "_36": {
      "enumDescriptions": [
        "The editor will not insert indentation automatically.",
        "The editor will keep the current line's indentation.",
        "The editor will keep the current line's indentation and honor language defined brackets.",
        "The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.",
        "The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages."
      ],
      "description": "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.",
      "type": "string",
      "enum": [
        "none",
        "keep",
        "brackets",
        "advanced",
        "full"
      ],
      "default": "full",
      "defaultDefaultValue": "full",
      "scope": 6,
      "restricted": false
    },
    "_37": {
      "description": "Controls whether the editor should automatically auto-indent the pasted content.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_38": {
      "description": "Controls whether the editor should automatically auto-indent the pasted content when pasted within a string. This takes effect when autoIndentOnPaste is true.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_39": {
      "enumDescriptions": [
        "Use language configurations to determine when to automatically surround selections.",
        "Surround with quotes but not brackets.",
        "Surround with brackets but not quotes.",
        ""
      ],
      "description": "Controls whether the editor should automatically surround selections when typing quotes or brackets.",
      "type": "string",
      "enum": [
        "languageDefined",
        "quotes",
        "brackets",
        "never"
      ],
      "default": "languageDefined",
      "defaultDefaultValue": "languageDefined",
      "scope": 6,
      "restricted": false
    },
    "_40": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether bracket pair colorization is enabled or not. Use `#workbench.colorCustomizations#` to override the bracket highlight colors.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_41": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether each bracket type has its own independent color pool.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_42": {
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        true,
        "active",
        false
      ],
      "enumDescriptions": [
        "Enables bracket pair guides.",
        "Enables bracket pair guides only for the active bracket pair.",
        "Disables bracket pair guides."
      ],
      "default": false,
      "description": "Controls whether bracket pair guides are enabled or not.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_43": {
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        true,
        "active",
        false
      ],
      "enumDescriptions": [
        "Enables horizontal guides as addition to vertical bracket pair guides.",
        "Enables horizontal guides only for the active bracket pair.",
        "Disables horizontal bracket pair guides."
      ],
      "default": "active",
      "description": "Controls whether horizontal bracket pair guides are enabled or not.",
      "defaultDefaultValue": "active",
      "scope": 6,
      "restricted": false
    },
    "_44": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the editor should highlight the active bracket pair.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_45": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the editor should render indent guides.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_46": {
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        true,
        "always",
        false
      ],
      "enumDescriptions": [
        "Highlights the active indent guide.",
        "Highlights the active indent guide even if bracket guides are highlighted.",
        "Do not highlight the active indent guide."
      ],
      "default": true,
      "description": "Controls whether the editor should highlight the active indent guide.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_47": {
      "description": "Controls whether the editor shows CodeLens.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_48": {
      "description": "Controls the font family for CodeLens.",
      "type": "string",
      "default": "",
      "defaultDefaultValue": "",
      "scope": 6,
      "restricted": false
    },
    "_49": {
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 100,
      "markdownDescription": "Controls the font size in pixels for CodeLens. When set to 0, 90% of `#editor.fontSize#` is used.",
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_50": {
      "description": "Controls whether the editor should render the inline color decorators and color picker.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_51": {
      "markdownDescription": "Controls the max number of color decorators that can be rendered in an editor at once.",
      "type": "integer",
      "default": 500,
      "minimum": 1,
      "maximum": 1000000,
      "defaultDefaultValue": 500,
      "scope": 6,
      "restricted": false
    },
    "_52": {
      "description": "Enable that the selection with the mouse and keys is doing column selection.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_53": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether a space character is inserted when commenting.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_54": {
      "type": "boolean",
      "default": true,
      "description": "Controls if empty lines should be ignored with toggle, add or remove actions for line comments.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_55": {
      "description": "Controls whether syntax highlighting should be copied into the clipboard.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_56": {
      "description": "Control the cursor animation style.",
      "type": "string",
      "enum": [
        "blink",
        "smooth",
        "phase",
        "expand",
        "solid"
      ],
      "default": "blink",
      "defaultDefaultValue": "blink",
      "scope": 6,
      "restricted": false
    },
    "_57": {
      "enumDescriptions": [
        "Smooth caret animation is disabled.",
        "Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture.",
        "Smooth caret animation is always enabled."
      ],
      "description": "Controls whether the smooth caret animation should be enabled.",
      "type": "string",
      "enum": [
        "off",
        "explicit",
        "on"
      ],
      "default": "off",
      "defaultDefaultValue": "off",
      "scope": 6,
      "restricted": false
    },
    "_58": {
      "description": "Controls the cursor style in insert input mode.",
      "type": "string",
      "enum": [
        "line",
        "block",
        "underline",
        "line-thin",
        "block-outline",
        "underline-thin"
      ],
      "default": "line",
      "defaultDefaultValue": "line",
      "scope": 6,
      "restricted": false
    },
    "_59": {
      "description": "Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.",
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 1073741824,
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_60": {
      "enumDescriptions": [
        "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API.",
        "`cursorSurroundingLines` is enforced always."
      ],
      "markdownDescription": "Controls when `#editor.cursorSurroundingLines#` should be enforced.",
      "type": "string",
      "enum": [
        "default",
        "all"
      ],
      "default": "default",
      "defaultDefaultValue": "default",
      "scope": 6,
      "restricted": false
    },
    "_61": {
      "markdownDescription": "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.",
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 1073741824,
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_62": {
      "markdownDescription": "Controls the height of the cursor when `#editor.cursorStyle#` is set to `line`. Cursor's max height depends on line height.",
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 1073741824,
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_63": {
      "description": "Controls whether the editor should allow moving selections via drag and drop.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_64": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether you can drag and drop a file into a text editor by holding down the `Shift` key (instead of opening the file in an editor).",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_65": {
      "type": "string",
      "markdownDescription": "Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped.",
      "enum": [
        "afterDrop",
        "never"
      ],
      "enumDescriptions": [
        "Show the drop selector widget after a file is dropped into the editor.",
        "Never show the drop selector widget. Instead the default drop provider is always used."
      ],
      "default": "afterDrop",
      "defaultDefaultValue": "afterDrop",
      "scope": 6,
      "restricted": false
    },
    "_66": {
      "description": "Sets whether the EditContext API should be used instead of the text area to power input in the editor.",
      "included": true,
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_67": {
      "description": "Controls whether copying without a selection copies the current line.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_68": {
      "tags": [
        "experimental"
      ],
      "enumDescriptions": [
        "Use regular DOM-based rendering.",
        "Use GPU acceleration."
      ],
      "description": "Controls whether to use the experimental GPU acceleration to render the editor.",
      "type": "string",
      "enum": [
        "off",
        "on"
      ],
      "default": "off",
      "defaultDefaultValue": "off",
      "scope": 6,
      "restricted": false
    },
    "_69": {
      "enumDescriptions": [
        "Use a new rendering method with svgs.",
        "Use a new rendering method with font characters.",
        "Use the stable rendering method."
      ],
      "description": "Controls whether whitespace is rendered with a new, experimental method.",
      "type": "string",
      "enum": [
        "svg",
        "font",
        "off"
      ],
      "default": "svg",
      "defaultDefaultValue": "svg",
      "scope": 6,
      "restricted": false
    },
    "_70": {
      "markdownDescription": "Scrolling speed multiplier when pressing `Alt`.",
      "type": "number",
      "default": 5,
      "defaultDefaultValue": 5,
      "scope": 6,
      "restricted": false
    },
    "_71": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the cursor should jump to find matches while typing.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_72": {
      "type": "string",
      "enum": [
        "never",
        "always",
        "selection"
      ],
      "default": "always",
      "enumDescriptions": [
        "Never seed search string from the editor selection.",
        "Always seed search string from the editor selection, including word at cursor position.",
        "Only seed search string from the editor selection."
      ],
      "description": "Controls whether the search string in the Find Widget is seeded from the editor selection.",
      "defaultDefaultValue": "always",
      "scope": 6,
      "restricted": false
    },
    "_73": {
      "type": "string",
      "enum": [
        "never",
        "always",
        "multiline"
      ],
      "default": "never",
      "enumDescriptions": [
        "Never turn on Find in Selection automatically (default).",
        "Always turn on Find in Selection automatically.",
        "Turn on Find in Selection automatically when multiple lines of content are selected."
      ],
      "description": "Controls the condition for turning on Find in Selection automatically.",
      "defaultDefaultValue": "never",
      "scope": 6,
      "restricted": false
    },
    "_74": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_75": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_76": {
      "type": "string",
      "enum": [
        "never",
        "workspace"
      ],
      "default": "workspace",
      "enumDescriptions": [
        "Do not store search history from the find widget.",
        "Store search history across the active workspace"
      ],
      "description": "Controls how the find widget history should be stored",
      "defaultDefaultValue": "workspace",
      "scope": 6,
      "restricted": false
    },
    "_77": {
      "type": "string",
      "enum": [
        "never",
        "workspace"
      ],
      "default": "workspace",
      "enumDescriptions": [
        "Do not store history from the replace widget.",
        "Store replace history across the active workspace"
      ],
      "description": "Controls how the replace widget history should be stored",
      "defaultDefaultValue": "workspace",
      "scope": 6,
      "restricted": false
    },
    "_78": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the Find Widget should search as you type.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_79": {
      "description": "Controls whether the editor has code folding enabled.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_80": {
      "enumDescriptions": [
        "Use a language-specific folding strategy if available, else the indentation-based one.",
        "Use the indentation-based folding strategy."
      ],
      "description": "Controls the strategy for computing folding ranges.",
      "type": "string",
      "enum": [
        "auto",
        "indentation"
      ],
      "default": "auto",
      "defaultDefaultValue": "auto",
      "scope": 6,
      "restricted": false
    },
    "_81": {
      "description": "Controls whether the editor should highlight folded ranges.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_82": {
      "description": "Controls whether the editor automatically collapses import ranges.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_83": {
      "description": "The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.",
      "type": "integer",
      "default": 5000,
      "minimum": 10,
      "maximum": 65000,
      "defaultDefaultValue": 5000,
      "scope": 6,
      "restricted": false
    },
    "_84": {
      "description": "Controls whether clicking on the empty content after a folded line will unfold the line.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_85": {
      "description": "Controls the font family.",
      "type": "string",
      "default": "'Droid Sans Mono', 'monospace', monospace",
      "defaultDefaultValue": "'Droid Sans Mono', 'monospace', monospace",
      "scope": 6,
      "restricted": false,
      "defaultSnippets": [
        {
          "body": "DejaVu Math TeX Gyre"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans"
        },
        {
          "body": "DejaVu Sans Mono"
        },
        {
          "body": "DejaVu Sans Mono"
        },
        {
          "body": "DejaVu Sans Mono"
        },
        {
          "body": "DejaVu Sans Mono"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "DejaVu Serif"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Lato"
        },
        {
          "body": "Liberation Mono"
        },
        {
          "body": "Liberation Mono"
        },
        {
          "body": "Liberation Mono"
        },
        {
          "body": "Liberation Mono"
        },
        {
          "body": "Liberation Sans"
        },
        {
          "body": "Liberation Sans"
        },
        {
          "body": "Liberation Sans"
        },
        {
          "body": "Liberation Sans"
        },
        {
          "body": "Liberation Serif"
        },
        {
          "body": "Liberation Serif"
        },
        {
          "body": "Liberation Serif"
        },
        {
          "body": "Liberation Serif"
        },
        {
          "body": "Noto Color Emoji"
        }
      ]
    },
    "_86": {
      "anyOf": [
        {
          "type": "boolean",
          "description": "Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property."
        },
        {
          "type": "string",
          "description": "Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures."
        }
      ],
      "description": "Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_87": {
      "type": "number",
      "minimum": 6,
      "maximum": 100,
      "default": 14,
      "description": "Controls the font size in pixels.",
      "defaultDefaultValue": 14,
      "scope": 6,
      "restricted": false
    },
    "_88": {
      "anyOf": [
        {
          "$ref": "#/$defs/_283"
        },
        {
          "$ref": "#/$defs/_284"
        },
        {
          "$ref": "#/$defs/_285"
        }
      ],
      "default": "normal",
      "description": "Controls the font weight. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000.",
      "defaultDefaultValue": "normal",
      "scope": 6,
      "restricted": false
    },
    "_89": {
      "anyOf": [
        {
          "type": "boolean",
          "description": "Enables/Disables the translation from font-weight to font-variation-settings. Change this to a string for fine-grained control of the 'font-variation-settings' CSS property."
        },
        {
          "type": "string",
          "description": "Explicit 'font-variation-settings' CSS property. A boolean can be passed instead if one only needs to translate font-weight to font-variation-settings."
        }
      ],
      "description": "Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property.",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_90": {
      "description": "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_91": {
      "description": "Controls whether the editor should automatically format the line after typing.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_92": {
      "description": "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_93": {
      "deprecationMessage": "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.",
      "default": null,
      "scope": 6,
      "restricted": false
    },
    "_94": {
      "description": "Controls the behavior the 'Go to Definition'-command when multiple target locations exist.",
      "type": "string",
      "enum": [
        "peek",
        "gotoAndPeek",
        "goto"
      ],
      "default": "peek",
      "enumDescriptions": [
        "Show Peek view of the results (default)",
        "Go to the primary result and show a Peek view",
        "Go to the primary result and enable Peek-less navigation to others"
      ],
      "defaultDefaultValue": "peek",
      "scope": 6,
      "restricted": false
    },
    "_95": {
      "description": "Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.",
      "type": "string",
      "enum": [
        "peek",
        "gotoAndPeek",
        "goto"
      ],
      "default": "peek",
      "enumDescriptions": [
        "Show Peek view of the results (default)",
        "Go to the primary result and show a Peek view",
        "Go to the primary result and enable Peek-less navigation to others"
      ],
      "defaultDefaultValue": "peek",
      "scope": 6,
      "restricted": false
    },
    "_96": {
      "description": "Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.",
      "type": "string",
      "enum": [
        "peek",
        "gotoAndPeek",
        "goto"
      ],
      "default": "peek",
      "enumDescriptions": [
        "Show Peek view of the results (default)",
        "Go to the primary result and show a Peek view",
        "Go to the primary result and enable Peek-less navigation to others"
      ],
      "defaultDefaultValue": "peek",
      "scope": 6,
      "restricted": false
    },
    "_97": {
      "description": "Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.",
      "type": "string",
      "enum": [
        "peek",
        "gotoAndPeek",
        "goto"
      ],
      "default": "peek",
      "enumDescriptions": [
        "Show Peek view of the results (default)",
        "Go to the primary result and show a Peek view",
        "Go to the primary result and enable Peek-less navigation to others"
      ],
      "defaultDefaultValue": "peek",
      "scope": 6,
      "restricted": false
    },
    "_98": {
      "description": "Controls the behavior the 'Go to References'-command when multiple target locations exist.",
      "type": "string",
      "enum": [
        "peek",
        "gotoAndPeek",
        "goto"
      ],
      "default": "peek",
      "enumDescriptions": [
        "Show Peek view of the results (default)",
        "Go to the primary result and show a Peek view",
        "Go to the primary result and enable Peek-less navigation to others"
      ],
      "defaultDefaultValue": "peek",
      "scope": 6,
      "restricted": false
    },
    "_99": {
      "type": "string",
      "default": "editor.action.goToReferences",
      "enum": [
        "",
        "editor.action.referenceSearch.trigger",
        "editor.action.goToReferences",
        "editor.action.peekImplementation",
        "editor.action.goToImplementation",
        "editor.action.peekTypeDefinition",
        "editor.action.goToTypeDefinition",
        "editor.action.peekDeclaration",
        "editor.action.revealDeclaration",
        "editor.action.peekDefinition",
        "editor.action.revealDefinitionAside",
        "editor.action.revealDefinition"
      ],
      "description": "Alternative command id that is being executed when the result of 'Go to Definition' is the current location.",
      "defaultDefaultValue": "editor.action.goToReferences",
      "scope": 6,
      "restricted": false
    },
    "_100": {
      "type": "string",
      "default": "editor.action.goToReferences",
      "enum": [
        "",
        "editor.action.referenceSearch.trigger",
        "editor.action.goToReferences",
        "editor.action.peekImplementation",
        "editor.action.goToImplementation",
        "editor.action.peekTypeDefinition",
        "editor.action.goToTypeDefinition",
        "editor.action.peekDeclaration",
        "editor.action.revealDeclaration",
        "editor.action.peekDefinition",
        "editor.action.revealDefinitionAside",
        "editor.action.revealDefinition"
      ],
      "description": "Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.",
      "defaultDefaultValue": "editor.action.goToReferences",
      "scope": 6,
      "restricted": false
    },
    "_101": {
      "type": "string",
      "default": "editor.action.goToReferences",
      "enum": [
        "",
        "editor.action.referenceSearch.trigger",
        "editor.action.goToReferences",
        "editor.action.peekImplementation",
        "editor.action.goToImplementation",
        "editor.action.peekTypeDefinition",
        "editor.action.goToTypeDefinition",
        "editor.action.peekDeclaration",
        "editor.action.revealDeclaration",
        "editor.action.peekDefinition",
        "editor.action.revealDefinitionAside",
        "editor.action.revealDefinition"
      ],
      "description": "Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.",
      "defaultDefaultValue": "editor.action.goToReferences",
      "scope": 6,
      "restricted": false
    },
    "_102": {
      "type": "string",
      "default": "",
      "enum": [
        "",
        "editor.action.referenceSearch.trigger",
        "editor.action.goToReferences",
        "editor.action.peekImplementation",
        "editor.action.goToImplementation",
        "editor.action.peekTypeDefinition",
        "editor.action.goToTypeDefinition",
        "editor.action.peekDeclaration",
        "editor.action.revealDeclaration",
        "editor.action.peekDefinition",
        "editor.action.revealDefinitionAside",
        "editor.action.revealDefinition"
      ],
      "description": "Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.",
      "defaultDefaultValue": "",
      "scope": 6,
      "restricted": false
    },
    "_103": {
      "type": "string",
      "default": "",
      "enum": [
        "",
        "editor.action.referenceSearch.trigger",
        "editor.action.goToReferences",
        "editor.action.peekImplementation",
        "editor.action.goToImplementation",
        "editor.action.peekTypeDefinition",
        "editor.action.goToTypeDefinition",
        "editor.action.peekDeclaration",
        "editor.action.revealDeclaration",
        "editor.action.peekDefinition",
        "editor.action.revealDefinitionAside",
        "editor.action.revealDefinition"
      ],
      "description": "Alternative command id that is being executed when the result of 'Go to Reference' is the current location.",
      "defaultDefaultValue": "",
      "scope": 6,
      "restricted": false
    },
    "_104": {
      "description": "Controls whether the cursor should be hidden in the overview ruler.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_105": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the hover is shown.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_106": {
      "type": "number",
      "default": 300,
      "minimum": 0,
      "maximum": 10000,
      "description": "Controls the delay in milliseconds after which the hover is shown.",
      "defaultDefaultValue": 300,
      "scope": 6,
      "restricted": false
    },
    "_107": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the hover should remain visible when mouse is moved over it.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_108": {
      "type": "integer",
      "minimum": 0,
      "default": 300,
      "description": "Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled.",
      "defaultDefaultValue": 300,
      "scope": 6,
      "restricted": false
    },
    "_109": {
      "type": "boolean",
      "default": true,
      "description": "Prefer showing hovers above the line, if there's space.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_110": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to automatically show inline suggestions in the editor.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_111": {
      "type": "string",
      "default": "onHover",
      "enum": [
        "always",
        "onHover",
        "never"
      ],
      "enumDescriptions": [
        "Show the inline suggestion toolbar whenever an inline suggestion is shown.",
        "Show the inline suggestion toolbar when hovering over an inline suggestion.",
        "Never show the inline suggestion toolbar."
      ],
      "description": "Controls when to show the inline suggestion toolbar.",
      "defaultDefaultValue": "onHover",
      "scope": 6,
      "restricted": false
    },
    "_112": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to show syntax highlighting for inline suggestions in the editor.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_113": {
      "type": "boolean",
      "default": false,
      "description": "Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_114": {
      "type": "string",
      "default": "",
      "tags": [
        "experimental",
        "onExP"
      ],
      "description": "Suppresses inline completions for specified extension IDs -- comma separated.",
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": "",
      "scope": 6,
      "restricted": false
    },
    "_115": {
      "type": "boolean",
      "default": false,
      "tags": [
        "experimental",
        "onExP"
      ],
      "description": "Controls whether to trigger a command when the inline suggestion provider changes.",
      "experiment": {
        "mode": "startup"
      },
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_116": {
      "type": "string",
      "default": "default",
      "description": "Controls the font family of the inline suggestions.",
      "defaultDefaultValue": "default",
      "scope": 6,
      "restricted": false
    },
    "_117": {
      "type": "string",
      "default": "always",
      "description": "Controls whether showing a suggestion will shift the code to make space for the suggestion inline.",
      "enum": [
        "always",
        "horizontal",
        "never"
      ],
      "tags": [
        "nextEditSuggestions"
      ],
      "defaultDefaultValue": "always",
      "scope": 6,
      "restricted": false
    },
    "_118": {
      "type": "string",
      "default": "auto",
      "description": "Controls whether larger suggestions can be shown side by side.",
      "enum": [
        "auto",
        "never"
      ],
      "enumDescriptions": [
        "Larger suggestions will show side by side if there is enough space, otherwise they will be shown below.",
        "Larger suggestions are never shown side by side and will always be shown below."
      ],
      "tags": [
        "nextEditSuggestions"
      ],
      "defaultDefaultValue": "auto",
      "scope": 6,
      "restricted": false
    },
    "_119": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether the suggestion will show as collapsed until jumping to it.",
      "tags": [
        "nextEditSuggestions"
      ],
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_120": {
      "description": "Controls the letter spacing in pixels.",
      "type": "number",
      "default": 0,
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_121": {
      "type": "string",
      "enum": [
        "off",
        "onCode",
        "on"
      ],
      "default": "onCode",
      "enumDescriptions": [
        "Disable the code action menu.",
        "Show the code action menu when the cursor is on lines with code.",
        "Show the code action menu when the cursor is on lines with code or on empty lines."
      ],
      "description": "Enables the Code Action lightbulb in the editor.",
      "defaultDefaultValue": "onCode",
      "scope": 6,
      "restricted": false
    },
    "_122": {
      "markdownDescription": "Controls the line height. \n - Use 0 to automatically compute the line height from the font size.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values.",
      "type": "number",
      "default": 0,
      "minimum": 0,
      "maximum": 150,
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_123": {
      "type": "string",
      "enum": [
        "off",
        "on",
        "relative",
        "interval"
      ],
      "enumDescriptions": [
        "Line numbers are not rendered.",
        "Line numbers are rendered as absolute number.",
        "Line numbers are rendered as distance in lines to cursor position.",
        "Line numbers are rendered every 10 lines."
      ],
      "default": "on",
      "description": "Controls the display of line numbers.",
      "defaultDefaultValue": "on",
      "scope": 6,
      "restricted": false
    },
    "_124": {
      "description": "Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_125": {
      "description": "Controls whether the editor should detect links and make them clickable.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_126": {
      "description": "Highlight matching brackets.",
      "type": "string",
      "enum": [
        "always",
        "near",
        "never"
      ],
      "default": "always",
      "defaultDefaultValue": "always",
      "scope": 6,
      "restricted": false
    },
    "_127": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the minimap is shown.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_128": {
      "type": "string",
      "enum": [
        "none",
        "mouseover",
        "scroll"
      ],
      "enumDescriptions": [
        "The minimap is always shown.",
        "The minimap is hidden when mouse is not over the minimap and shown when mouse is over the minimap.",
        "The minimap is only shown when the editor is scrolled"
      ],
      "default": "none",
      "description": "Controls whether the minimap is hidden automatically.",
      "defaultDefaultValue": "none",
      "scope": 6,
      "restricted": false
    },
    "_129": {
      "type": "string",
      "enum": [
        "proportional",
        "fill",
        "fit"
      ],
      "enumDescriptions": [
        "The minimap has the same size as the editor contents (and might scroll).",
        "The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).",
        "The minimap will shrink as necessary to never be larger than the editor (no scrolling)."
      ],
      "default": "proportional",
      "description": "Controls the size of the minimap.",
      "defaultDefaultValue": "proportional",
      "scope": 6,
      "restricted": false
    },
    "_130": {
      "type": "string",
      "enum": [
        "left",
        "right"
      ],
      "default": "right",
      "description": "Controls the side where to render the minimap.",
      "defaultDefaultValue": "right",
      "scope": 6,
      "restricted": false
    },
    "_131": {
      "type": "string",
      "enum": [
        "always",
        "mouseover"
      ],
      "default": "mouseover",
      "description": "Controls when the minimap slider is shown.",
      "defaultDefaultValue": "mouseover",
      "scope": 6,
      "restricted": false
    },
    "_132": {
      "type": "number",
      "default": 1,
      "minimum": 1,
      "maximum": 3,
      "enum": [
        1,
        2,
        3
      ],
      "description": "Scale of content drawn in the minimap: 1, 2 or 3.",
      "defaultDefaultValue": 1,
      "scope": 6,
      "restricted": false
    },
    "_133": {
      "type": "boolean",
      "default": true,
      "description": "Render the actual characters on a line as opposed to color blocks.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_134": {
      "type": "number",
      "default": 120,
      "description": "Limit the width of the minimap to render at most a certain number of columns.",
      "defaultDefaultValue": 120,
      "scope": 6,
      "restricted": false
    },
    "_135": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether named regions are shown as section headers in the minimap.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_136": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether MARK: comments are shown as section headers in the minimap.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_137": {
      "type": "string",
      "default": "\\bMARK:\\s*(?<separator>-?)\\s*(?<label>.*)$",
      "description": "Defines the regular expression used to find section headers in comments. The regex must contain a named match group `label` (written as `(?<label>.+)`) that encapsulates the section header, otherwise it will not work. Optionally you can include another match group named `separator`. Use \\n in the pattern to match multi-line headers.",
      "defaultDefaultValue": "\\bMARK:\\s*(?<separator>-?)\\s*(?<label>.*)$",
      "scope": 6,
      "restricted": false
    },
    "_138": {
      "type": "number",
      "default": 9,
      "description": "Controls the font size of section headers in the minimap.",
      "defaultDefaultValue": 9,
      "scope": 6,
      "restricted": false
    },
    "_139": {
      "type": "number",
      "default": 1,
      "description": "Controls the amount of space (in pixels) between characters of section header. This helps the readability of the header in small font sizes.",
      "defaultDefaultValue": 1,
      "scope": 6,
      "restricted": false
    },
    "_140": {
      "markdownDescription": "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.",
      "type": "number",
      "default": 1,
      "defaultDefaultValue": 1,
      "scope": 6,
      "restricted": false
    },
    "_141": {
      "markdownDescription": "Zoom the font of the editor when using mouse wheel and holding `Ctrl`.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_142": {
      "description": "Merge multiple cursors when they are overlapping.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_143": {
      "markdownEnumDescriptions": [
        "Maps to `Control` on Windows and Linux and to `Command` on macOS.",
        "Maps to `Alt` on Windows and Linux and to `Option` on macOS."
      ],
      "markdownDescription": "The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).",
      "type": "string",
      "enum": [
        "ctrlCmd",
        "alt"
      ],
      "default": "alt",
      "defaultDefaultValue": "alt",
      "scope": 6,
      "restricted": false
    },
    "_144": {
      "markdownEnumDescriptions": [
        "Each cursor pastes a single line of the text.",
        "Each cursor pastes the full text."
      ],
      "markdownDescription": "Controls pasting when the line count of the pasted text matches the cursor count.",
      "type": "string",
      "enum": [
        "spread",
        "full"
      ],
      "default": "spread",
      "defaultDefaultValue": "spread",
      "scope": 6,
      "restricted": false
    },
    "_145": {
      "markdownDescription": "Controls the max number of cursors that can be in an active editor at once.",
      "type": "integer",
      "default": 10000,
      "minimum": 1,
      "maximum": 100000,
      "defaultDefaultValue": 10000,
      "scope": 6,
      "restricted": false
    },
    "_146": {
      "markdownEnumDescriptions": [
        "Does not highlight occurrences.",
        "Highlights occurrences only in the current file.",
        "Experimental: Highlights occurrences across all valid open files."
      ],
      "markdownDescription": "Controls whether occurrences should be highlighted across open files.",
      "type": "string",
      "enum": [
        "off",
        "singleFile",
        "multiFile"
      ],
      "default": "singleFile",
      "defaultDefaultValue": "singleFile",
      "scope": 6,
      "restricted": false
    },
    "_147": {
      "description": "Controls the delay in milliseconds after which occurrences are highlighted.",
      "tags": [
        "preview"
      ],
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 2000,
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_148": {
      "description": "Controls the cursor style in overtype input mode.",
      "type": "string",
      "enum": [
        "line",
        "block",
        "underline",
        "line-thin",
        "block-outline",
        "underline-thin"
      ],
      "default": "block",
      "defaultDefaultValue": "block",
      "scope": 6,
      "restricted": false
    },
    "_149": {
      "description": "Controls whether pasting should overtype.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_150": {
      "description": "Controls whether a border should be drawn around the overview ruler.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_151": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "maximum": 1000,
      "description": "Controls the amount of space between the top edge of the editor and the first line.",
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_152": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "maximum": 1000,
      "description": "Controls the amount of space between the bottom edge of the editor and the last line.",
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_153": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Controls whether you can paste content in different ways.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_154": {
      "type": "string",
      "markdownDescription": "Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted.",
      "enum": [
        "afterPaste",
        "never"
      ],
      "enumDescriptions": [
        "Show the paste selector widget after content is pasted into the editor.",
        "Never show the paste selector widget. Instead the default pasting behavior is always used."
      ],
      "default": "afterPaste",
      "defaultDefaultValue": "afterPaste",
      "scope": 6,
      "restricted": false
    },
    "_155": {
      "type": "boolean",
      "default": true,
      "description": "Enables a pop-up that shows parameter documentation and type information as you type.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_156": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the parameter hints menu cycles or closes when reaching the end of the list.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_157": {
      "enumDescriptions": [
        "Focus the tree when opening peek",
        "Focus the editor when opening peek"
      ],
      "description": "Controls whether to focus the inline editor or the tree in the peek widget.",
      "type": "string",
      "enum": [
        "tree",
        "editor"
      ],
      "default": "tree",
      "defaultDefaultValue": "tree",
      "scope": 6,
      "restricted": false
    },
    "_158": {
      "description": "Controls whether the Go to Definition mouse gesture always opens the peek widget.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_159": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "strings": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/_402"
            }
          ],
          "default": "off",
          "description": "Enable quick suggestions inside strings."
        },
        "comments": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/_402"
            }
          ],
          "default": "off",
          "description": "Enable quick suggestions inside comments."
        },
        "other": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/_402"
            }
          ],
          "default": "on",
          "description": "Enable quick suggestions outside of strings and comments."
        }
      },
      "default": {
        "other": "on",
        "comments": "off",
        "strings": "off"
      },
      "markdownDescription": "Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the `#editor.suggestOnTriggerCharacters#`-setting which controls if suggestions are triggered by special characters.",
      "defaultDefaultValue": {
        "other": "on",
        "comments": "off",
        "strings": "off"
      },
      "scope": 6,
      "restricted": false
    },
    "_160": {
      "description": "Controls the delay in milliseconds after which quick suggestions will show up.",
      "experiment": {
        "mode": "startup"
      },
      "type": "integer",
      "default": 10,
      "minimum": 0,
      "maximum": 1073741824,
      "defaultDefaultValue": 10,
      "scope": 6,
      "restricted": false,
      "tags": [
        "onExP"
      ]
    },
    "_161": {
      "description": "Controls whether the editor auto renames on type.",
      "markdownDeprecationMessage": "Deprecated, use `editor.linkedEditing` instead.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false,
      "deprecationMessage": "Deprecated, use `editor.linkedEditing` instead."
    },
    "_162": {
      "description": "Whether to render rich screen reader content when the `editor.editContext` is enabled.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_163": {
      "description": "Controls whether the editor should render control characters.",
      "restricted": true,
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6
    },
    "_164": {
      "description": "Render last line number when the file ends with a newline.",
      "type": "string",
      "enum": [
        "off",
        "on",
        "dimmed"
      ],
      "default": "dimmed",
      "defaultDefaultValue": "dimmed",
      "scope": 6,
      "restricted": false
    },
    "_165": {
      "enumDescriptions": [
        "",
        "",
        "",
        "Highlights both the gutter and the current line."
      ],
      "description": "Controls how the editor should render the current line highlight.",
      "type": "string",
      "enum": [
        "none",
        "gutter",
        "line",
        "all"
      ],
      "default": "line",
      "defaultDefaultValue": "line",
      "scope": 6,
      "restricted": false
    },
    "_166": {
      "description": "Controls if the editor should render the current line highlight only when the editor is focused.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_167": {
      "enumDescriptions": [
        "",
        "Render whitespace characters except for single spaces between words.",
        "Render whitespace characters only on selected text.",
        "Render only trailing whitespace characters.",
        ""
      ],
      "description": "Controls how the editor should render whitespace characters.",
      "type": "string",
      "enum": [
        "none",
        "boundary",
        "selection",
        "trailing",
        "all"
      ],
      "default": "selection",
      "defaultDefaultValue": "selection",
      "scope": 6,
      "restricted": false
    },
    "_168": {
      "description": "Controls whether selections should have rounded corners.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_169": {
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/_403"
          },
          {
            "type": [
              "object"
            ],
            "properties": {
              "column": {
                "$ref": "#/$defs/_403"
              },
              "color": {
                "type": "string",
                "description": "Color of this editor ruler.",
                "format": "color-hex"
              }
            }
          }
        ]
      },
      "default": [],
      "description": "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.",
      "defaultDefaultValue": [],
      "scope": 6,
      "restricted": false
    },
    "_170": {
      "type": "string",
      "enum": [
        "auto",
        "visible",
        "hidden"
      ],
      "enumDescriptions": [
        "The vertical scrollbar will be visible only when necessary.",
        "The vertical scrollbar will always be visible.",
        "The vertical scrollbar will always be hidden."
      ],
      "default": "auto",
      "description": "Controls the visibility of the vertical scrollbar.",
      "defaultDefaultValue": "auto",
      "scope": 6,
      "restricted": false
    },
    "_171": {
      "type": "string",
      "enum": [
        "auto",
        "visible",
        "hidden"
      ],
      "enumDescriptions": [
        "The horizontal scrollbar will be visible only when necessary.",
        "The horizontal scrollbar will always be visible.",
        "The horizontal scrollbar will always be hidden."
      ],
      "default": "auto",
      "description": "Controls the visibility of the horizontal scrollbar.",
      "defaultDefaultValue": "auto",
      "scope": 6,
      "restricted": false
    },
    "_172": {
      "type": "number",
      "default": 14,
      "description": "The width of the vertical scrollbar.",
      "defaultDefaultValue": 14,
      "scope": 6,
      "restricted": false
    },
    "_173": {
      "type": "number",
      "default": 12,
      "description": "The height of the horizontal scrollbar.",
      "defaultDefaultValue": 12,
      "scope": 6,
      "restricted": false
    },
    "_174": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether clicks scroll by page or jump to click position.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_175": {
      "type": "boolean",
      "default": false,
      "description": "When set, the horizontal scrollbar will not increase the size of the editor's content.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_176": {
      "description": "Controls the number of extra characters beyond which the editor will scroll horizontally.",
      "type": "integer",
      "default": 4,
      "minimum": 0,
      "maximum": 1073741824,
      "defaultDefaultValue": 4,
      "scope": 6,
      "restricted": false
    },
    "_177": {
      "description": "Controls whether the editor will scroll beyond the last line.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_178": {
      "description": "Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_179": {
      "description": "Controls whether the Linux primary clipboard should be supported.",
      "included": true,
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_180": {
      "description": "Controls whether the editor should highlight matches similar to the selection.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_181": {
      "description": "Controls how many characters can be in the selection before similiar matches are not highlighted. Set to zero for unlimited.",
      "type": "integer",
      "default": 200,
      "minimum": 0,
      "maximum": 1073741824,
      "defaultDefaultValue": 200,
      "scope": 6,
      "restricted": false
    },
    "_182": {
      "description": "Controls whether the editor should highlight selection matches that span multiple lines.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_183": {
      "enumDescriptions": [
        "Always show the folding controls.",
        "Never show the folding controls and reduce the gutter size.",
        "Only show the folding controls when the mouse is over the gutter."
      ],
      "description": "Controls when the folding controls on the gutter are shown.",
      "type": "string",
      "enum": [
        "always",
        "never",
        "mouseover"
      ],
      "default": "mouseover",
      "defaultDefaultValue": "mouseover",
      "scope": 6,
      "restricted": false
    },
    "_184": {
      "description": "Controls fading out of unused code.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_185": {
      "enumDescriptions": [
        "Show snippet suggestions on top of other suggestions.",
        "Show snippet suggestions below other suggestions.",
        "Show snippets suggestions with other suggestions.",
        "Do not show snippet suggestions."
      ],
      "description": "Controls whether snippets are shown with other suggestions and how they are sorted.",
      "type": "string",
      "enum": [
        "top",
        "bottom",
        "inline",
        "none"
      ],
      "default": "inline",
      "defaultDefaultValue": "inline",
      "scope": 6,
      "restricted": false
    },
    "_186": {
      "description": "Whether leading and trailing whitespace should always be selected.",
      "default": true,
      "type": "boolean",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_187": {
      "description": "Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected.",
      "default": true,
      "type": "boolean",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_188": {
      "description": "Controls whether the editor will scroll using an animation.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_189": {
      "type": "boolean",
      "default": true,
      "description": "Shows the nested current scopes during the scroll at the top of the editor.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_190": {
      "type": "number",
      "default": 5,
      "minimum": 1,
      "maximum": 20,
      "description": "Defines the maximum number of sticky lines to show.",
      "defaultDefaultValue": 5,
      "scope": 6,
      "restricted": false
    },
    "_191": {
      "type": "string",
      "enum": [
        "outlineModel",
        "foldingProviderModel",
        "indentationModel"
      ],
      "default": "outlineModel",
      "description": "Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.",
      "defaultDefaultValue": "outlineModel",
      "scope": 6,
      "restricted": false
    },
    "_192": {
      "type": "boolean",
      "default": true,
      "description": "Enable scrolling of Sticky Scroll with the editor's horizontal scrollbar.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_193": {
      "description": "Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_194": {
      "type": "string",
      "enum": [
        "insert",
        "replace"
      ],
      "enumDescriptions": [
        "Insert suggestion without overwriting text right of the cursor.",
        "Insert suggestion and overwrite text right of the cursor."
      ],
      "default": "insert",
      "description": "Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.",
      "defaultDefaultValue": "insert",
      "scope": 6,
      "restricted": false
    },
    "_195": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether filtering and sorting suggestions accounts for small typos.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_196": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether sorting favors words that appear close to the cursor.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_197": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_198": {
      "type": "string",
      "enum": [
        "always",
        "never",
        "whenTriggerCharacter",
        "whenQuickSuggestion"
      ],
      "enumDescriptions": [
        "Always select a suggestion when automatically triggering IntelliSense.",
        "Never select a suggestion when automatically triggering IntelliSense.",
        "Select a suggestion only when triggering IntelliSense from a trigger character.",
        "Select a suggestion only when triggering IntelliSense as you type."
      ],
      "default": "always",
      "markdownDescription": "Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions (`#editor.quickSuggestions#` and `#editor.suggestOnTriggerCharacters#`) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.",
      "defaultDefaultValue": "always",
      "scope": 6,
      "restricted": false
    },
    "_199": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether an active snippet prevents quick suggestions.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_200": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether to show or hide icons in suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_201": {
      "type": "boolean",
      "default": false,
      "description": "Controls the visibility of the status bar at the bottom of the suggest widget.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_202": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether to preview the suggestion outcome in the editor.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_203": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether suggest details show inline with the label or only in the details widget.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_204": {
      "type": "number",
      "deprecationMessage": "This setting is deprecated. The suggest widget can now be resized.",
      "default": 0,
      "scope": 6,
      "restricted": false
    },
    "_205": {
      "type": "object",
      "deprecationMessage": "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.",
      "default": {},
      "scope": 6,
      "restricted": false
    },
    "_206": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `method`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_207": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `function`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_208": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `constructor`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_209": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `deprecated`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_210": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_211": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `field`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_212": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `variable`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_213": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `class`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_214": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `struct`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_215": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `interface`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_216": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `module`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_217": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `property`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_218": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `event`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_219": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `operator`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_220": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `unit`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_221": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `value`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_222": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `constant`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_223": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `enum`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_224": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `enumMember`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_225": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `keyword`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_226": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `text`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_227": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `color`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_228": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `file`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_229": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `reference`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_230": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `customcolor`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_231": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `folder`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_232": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `typeParameter`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_233": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `snippet`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_234": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `user`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_235": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "When enabled IntelliSense shows `issues`-suggestions.",
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_236": {
      "markdownDescription": "Font size for the suggest widget. When set to `0`, the value of `#editor.fontSize#` is used.",
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 1000,
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_237": {
      "markdownDescription": "Line height for the suggest widget. When set to `0`, the value of `#editor.lineHeight#` is used. The minimum value is 8.",
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "maximum": 1000,
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_238": {
      "description": "Controls whether suggestions should automatically show up when typing trigger characters.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_239": {
      "markdownEnumDescriptions": [
        "Always select the first suggestion.",
        "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.",
        "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`."
      ],
      "description": "Controls how suggestions are pre-selected when showing the suggest list.",
      "type": "string",
      "enum": [
        "first",
        "recentlyUsed",
        "recentlyUsedByPrefix"
      ],
      "default": "first",
      "defaultDefaultValue": "first",
      "scope": 6,
      "restricted": false
    },
    "_240": {
      "enumDescriptions": [
        "Tab complete will insert the best matching suggestion when pressing tab.",
        "Disable tab completions.",
        "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled."
      ],
      "description": "Enables tab completions.",
      "type": "string",
      "enum": [
        "on",
        "off",
        "onlySnippets"
      ],
      "default": "off",
      "defaultDefaultValue": "off",
      "scope": 6,
      "restricted": false
    },
    "_241": {
      "description": "Controls whether the editor will also delete the next line's indentation whitespace when deleting a newline.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_242": {
      "restricted": true,
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        true,
        false,
        "inUntrustedWorkspace"
      ],
      "default": "inUntrustedWorkspace",
      "description": "Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.",
      "defaultDefaultValue": "inUntrustedWorkspace",
      "scope": 6
    },
    "_243": {
      "restricted": true,
      "type": "boolean",
      "default": true,
      "description": "Controls whether characters that just reserve space or have no width at all are highlighted.",
      "defaultDefaultValue": true,
      "scope": 6
    },
    "_244": {
      "restricted": true,
      "type": "boolean",
      "default": true,
      "description": "Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.",
      "defaultDefaultValue": true,
      "scope": 6
    },
    "_245": {
      "restricted": true,
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        true,
        false,
        "inUntrustedWorkspace"
      ],
      "default": "inUntrustedWorkspace",
      "description": "Controls whether characters in comments should also be subject to Unicode highlighting.",
      "defaultDefaultValue": "inUntrustedWorkspace",
      "scope": 6
    },
    "_246": {
      "restricted": true,
      "type": [
        "boolean",
        "string"
      ],
      "enum": [
        true,
        false,
        "inUntrustedWorkspace"
      ],
      "default": true,
      "description": "Controls whether characters in strings should also be subject to Unicode highlighting.",
      "defaultDefaultValue": true,
      "scope": 6
    },
    "_247": {
      "restricted": true,
      "type": "object",
      "default": {},
      "description": "Defines allowed characters that are not being highlighted.",
      "additionalProperties": {
        "type": "boolean"
      },
      "defaultDefaultValue": {},
      "scope": 6
    },
    "_248": {
      "restricted": true,
      "type": "object",
      "additionalProperties": {
        "type": "boolean"
      },
      "default": {
        "_os": true,
        "_vscode": true
      },
      "description": "Unicode characters that are common in allowed locales are not being highlighted.",
      "defaultDefaultValue": {
        "_os": true,
        "_vscode": true
      },
      "scope": 6
    },
    "_249": {
      "enumDescriptions": [
        "Unusual line terminators are automatically removed.",
        "Unusual line terminators are ignored.",
        "Unusual line terminators prompt to be removed."
      ],
      "description": "Remove unusual line terminators that might cause problems.",
      "type": "string",
      "enum": [
        "auto",
        "off",
        "prompt"
      ],
      "default": "prompt",
      "defaultDefaultValue": "prompt",
      "scope": 6,
      "restricted": false
    },
    "_250": {
      "description": "Spaces and tabs are inserted and deleted in alignment with tab stops.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_251": {
      "markdownEnumDescriptions": [
        "Use the default line break rule.",
        "Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal."
      ],
      "description": "Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.",
      "type": "string",
      "enum": [
        "normal",
        "keepAll"
      ],
      "default": "normal",
      "defaultDefaultValue": "normal",
      "scope": 6,
      "restricted": false
    },
    "_252": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/_329"
        }
      ],
      "description": "Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.).",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": [],
      "defaultDefaultValue": [],
      "scope": 6,
      "restricted": false
    },
    "_253": {
      "description": "Characters that will be used as word separators when doing word related navigations or operations.",
      "type": "string",
      "default": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
      "defaultDefaultValue": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
      "scope": 6,
      "restricted": false
    },
    "_254": {
      "markdownEnumDescriptions": [
        "Lines will never wrap.",
        "Lines will wrap at the viewport width.",
        "Lines will wrap at `#editor.wordWrapColumn#`.",
        "Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`."
      ],
      "description": "Controls how lines should wrap.",
      "type": "string",
      "enum": [
        "off",
        "on",
        "wordWrapColumn",
        "bounded"
      ],
      "default": "off",
      "defaultDefaultValue": "off",
      "scope": 6,
      "restricted": false
    },
    "_255": {
      "markdownDescription": "Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.",
      "type": "integer",
      "default": 80,
      "minimum": 1,
      "maximum": 1073741824,
      "defaultDefaultValue": 80,
      "scope": 6,
      "restricted": false
    },
    "_256": {
      "type": "string",
      "enum": [
        "none",
        "same",
        "indent",
        "deepIndent"
      ],
      "enumDescriptions": [
        "No indentation. Wrapped lines begin at column 1.",
        "Wrapped lines get the same indentation as the parent.",
        "Wrapped lines get +1 indentation toward the parent.",
        "Wrapped lines get +2 indentation toward the parent."
      ],
      "description": "Controls the indentation of wrapped lines.",
      "default": "same",
      "defaultDefaultValue": "same",
      "scope": 6,
      "restricted": false
    },
    "_257": {
      "enumDescriptions": [
        "Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.",
        "Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases."
      ],
      "type": "string",
      "enum": [
        "simple",
        "advanced"
      ],
      "default": "simple",
      "description": "Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.",
      "defaultDefaultValue": "simple",
      "scope": 6,
      "restricted": false
    },
    "_258": {
      "description": "Controls strikethrough deprecated variables.",
      "type": "boolean",
      "default": true,
      "defaultDefaultValue": true,
      "scope": 6,
      "restricted": false
    },
    "_259": {
      "description": "Make scrolling inertial - mostly useful with touchpad on linux.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_260": {
      "type": "string",
      "default": "on",
      "description": "Enables the inlay hints in the editor.",
      "enum": [
        "on",
        "onUnlessPressed",
        "offUnlessPressed",
        "off"
      ],
      "markdownEnumDescriptions": [
        "Inlay hints are enabled",
        "Inlay hints are showing by default and hide when holding Ctrl+Alt",
        "Inlay hints are hidden by default and show when holding Ctrl+Alt",
        "Inlay hints are disabled"
      ],
      "defaultDefaultValue": "on",
      "scope": 6,
      "restricted": false
    },
    "_261": {
      "type": "number",
      "default": 0,
      "markdownDescription": "Controls font size of inlay hints in the editor. As default the `#editor.fontSize#` is used when the configured value is less than `5` or greater than the editor font size.",
      "defaultDefaultValue": 0,
      "scope": 6,
      "restricted": false
    },
    "_262": {
      "type": "string",
      "default": "",
      "markdownDescription": "Controls font family of inlay hints in the editor. When set to empty, the `#editor.fontFamily#` is used.",
      "defaultDefaultValue": "",
      "scope": 6,
      "restricted": false
    },
    "_263": {
      "type": "boolean",
      "default": false,
      "description": "Enables the padding around the inlay hints in the editor.",
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_264": {
      "type": "number",
      "default": 43,
      "markdownDescription": "Maximum overall length of inlay hints, for a single line, before they get truncated by the editor. Set to `0` to never truncate",
      "defaultDefaultValue": 43,
      "scope": 6,
      "restricted": false
    },
    "_265": {
      "markdownDescription": "Controls whether literal `\\n` shall trigger a wordWrap when `#editor.wordWrap#` is enabled.\n\nFor example:\n```c\nchar* str=\"hello\\nworld\"\n```\nwill be displayed as\n```c\nchar* str=\"hello\\n\n           world\"\n```",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_266": {
      "markdownDescription": "Controls whether the editor receives tabs or defers them to the workbench for navigation.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_267": {
      "enumDescriptions": [
        "Show default color decorators only when no extension provides colors decorators.",
        "Always show default color decorators.",
        "Never show default color decorators."
      ],
      "description": "Controls whether inline color decorations should be shown using the default document color provider.",
      "type": "string",
      "enum": [
        "auto",
        "always",
        "never"
      ],
      "default": "auto",
      "defaultDefaultValue": "auto",
      "scope": 6,
      "restricted": false
    },
    "_268": {
      "enumDescriptions": [
        "Make the color picker appear both on click and hover of the color decorator",
        "Make the color picker appear on hover of the color decorator",
        "Make the color picker appear on click of the color decorator"
      ],
      "description": "Controls the condition to make a color picker appear from a color decorator.",
      "type": "string",
      "enum": [
        "clickAndHover",
        "hover",
        "click"
      ],
      "default": "clickAndHover",
      "defaultDefaultValue": "clickAndHover",
      "scope": 6,
      "restricted": false
    },
    "_269": {
      "description": "Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_270": {
      "description": "Controls whether the editor will scroll when the middle button is pressed.",
      "type": "boolean",
      "default": false,
      "defaultDefaultValue": false,
      "scope": 6,
      "restricted": false
    },
    "_271": {
      "type": "boolean",
      "default": true
    },
    "_272": {
      "type": "boolean",
      "description": "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern."
    },
    "_273": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "A single path to a shell executable.",
          "type": [
            "string"
          ],
          "items": {
            "type": "string"
          }
        },
        "args": {
          "$ref": "#/$defs/_274"
        },
        "overrideName": {
          "$ref": "#/$defs/_275"
        },
        "icon": {
          "$ref": "#/$defs/_276"
        },
        "color": {
          "$ref": "#/$defs/_277"
        },
        "env": {
          "$ref": "#/$defs/_278"
        }
      }
    },
    "_274": {
      "description": "An optional set of arguments to run the shell executable with.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "_275": {
      "description": "Whether or not to replace the dynamic terminal title that detects what program is running with the static profile name.",
      "type": "boolean"
    },
    "_276": {
      "description": "A codicon ID to associate with the terminal icon.",
      "type": "string",
      "enum": [
        "add",
        "plus",
        "gist-new",
        "repo-create",
        "lightbulb",
        "light-bulb",
        "repo",
        "repo-delete",
        "gist-fork",
        "repo-forked",
        "git-pull-request",
        "git-pull-request-abandoned",
        "record-keys",
        "keyboard",
        "tag",
        "git-pull-request-label",
        "tag-add",
        "tag-remove",
        "person",
        "person-follow",
        "person-outline",
        "person-filled",
        "git-branch",
        "git-branch-create",
        "git-branch-delete",
        "source-control",
        "mirror",
        "mirror-public",
        "star",
        "star-add",
        "star-delete",
        "star-empty",
        "comment",
        "comment-add",
        "alert",
        "warning",
        "search",
        "search-save",
        "log-out",
        "sign-out",
        "log-in",
        "sign-in",
        "eye",
        "eye-unwatch",
        "eye-watch",
        "circle-filled",
        "primitive-dot",
        "close-dirty",
        "debug-breakpoint",
        "debug-breakpoint-disabled",
        "debug-hint",
        "terminal-decoration-success",
        "primitive-square",
        "edit",
        "pencil",
        "info",
        "issue-opened",
        "gist-private",
        "git-fork-private",
        "lock",
        "mirror-private",
        "close",
        "remove-close",
        "x",
        "repo-sync",
        "sync",
        "clone",
        "desktop-download",
        "beaker",
        "microscope",
        "vm",
        "device-desktop",
        "file",
        "file-text",
        "more",
        "ellipsis",
        "kebab-horizontal",
        "mail-reply",
        "reply",
        "organization",
        "organization-filled",
        "organization-outline",
        "new-file",
        "file-add",
        "new-folder",
        "file-directory-create",
        "trash",
        "trashcan",
        "history",
        "clock",
        "folder",
        "file-directory",
        "symbol-folder",
        "logo-github",
        "mark-github",
        "github",
        "terminal",
        "console",
        "repl",
        "zap",
        "symbol-event",
        "error",
        "stop",
        "variable",
        "symbol-variable",
        "array",
        "symbol-array",
        "symbol-module",
        "symbol-package",
        "symbol-namespace",
        "symbol-object",
        "symbol-method",
        "symbol-function",
        "symbol-constructor",
        "symbol-boolean",
        "symbol-null",
        "symbol-numeric",
        "symbol-number",
        "symbol-structure",
        "symbol-struct",
        "symbol-parameter",
        "symbol-type-parameter",
        "symbol-key",
        "symbol-text",
        "symbol-reference",
        "go-to-file",
        "symbol-enum",
        "symbol-value",
        "symbol-ruler",
        "symbol-unit",
        "activate-breakpoints",
        "archive",
        "arrow-both",
        "arrow-down",
        "arrow-left",
        "arrow-right",
        "arrow-small-down",
        "arrow-small-left",
        "arrow-small-right",
        "arrow-small-up",
        "arrow-up",
        "bell",
        "bold",
        "book",
        "bookmark",
        "debug-breakpoint-conditional-unverified",
        "debug-breakpoint-conditional",
        "debug-breakpoint-conditional-disabled",
        "debug-breakpoint-data-unverified",
        "debug-breakpoint-data",
        "debug-breakpoint-data-disabled",
        "debug-breakpoint-log-unverified",
        "debug-breakpoint-log",
        "debug-breakpoint-log-disabled",
        "briefcase",
        "broadcast",
        "browser",
        "bug",
        "calendar",
        "case-sensitive",
        "check",
        "checklist",
        "chevron-down",
        "chevron-left",
        "chevron-right",
        "chevron-up",
        "chrome-close",
        "chrome-maximize",
        "chrome-minimize",
        "chrome-restore",
        "circle-outline",
        "circle",
        "debug-breakpoint-unverified",
        "terminal-decoration-incomplete",
        "circle-slash",
        "circuit-board",
        "clear-all",
        "clippy",
        "close-all",
        "cloud-download",
        "cloud-upload",
        "code",
        "collapse-all",
        "color-mode",
        "comment-discussion",
        "credit-card",
        "dash",
        "dashboard",
        "database",
        "debug-continue",
        "debug-disconnect",
        "debug-pause",
        "debug-restart",
        "debug-start",
        "debug-step-into",
        "debug-step-out",
        "debug-step-over",
        "debug-stop",
        "debug",
        "device-camera-video",
        "device-camera",
        "device-mobile",
        "diff-added",
        "diff-ignored",
        "diff-modified",
        "diff-removed",
        "diff-renamed",
        "diff",
        "diff-sidebyside",
        "discard",
        "editor-layout",
        "empty-window",
        "exclude",
        "extensions",
        "eye-closed",
        "file-binary",
        "file-code",
        "file-media",
        "file-pdf",
        "file-submodule",
        "file-symlink-directory",
        "file-symlink-file",
        "file-zip",
        "files",
        "filter",
        "flame",
        "fold-down",
        "fold-up",
        "fold",
        "folder-active",
        "folder-opened",
        "gear",
        "gift",
        "gist-secret",
        "gist",
        "git-commit",
        "git-compare",
        "compare-changes",
        "git-merge",
        "github-action",
        "github-alt",
        "globe",
        "grabber",
        "graph",
        "gripper",
        "heart",
        "home",
        "horizontal-rule",
        "hubot",
        "inbox",
        "issue-reopened",
        "issues",
        "italic",
        "jersey",
        "json",
        "kebab-vertical",
        "key",
        "law",
        "lightbulb-autofix",
        "link-external",
        "link",
        "list-ordered",
        "list-unordered",
        "live-share",
        "loading",
        "location",
        "mail-read",
        "mail",
        "markdown",
        "megaphone",
        "mention",
        "milestone",
        "git-pull-request-milestone",
        "mortar-board",
        "move",
        "multiple-windows",
        "mute",
        "no-newline",
        "note",
        "octoface",
        "open-preview",
        "package",
        "paintcan",
        "pin",
        "play",
        "run",
        "plug",
        "preserve-case",
        "preview",
        "project",
        "pulse",
        "question",
        "quote",
        "radio-tower",
        "reactions",
        "references",
        "refresh",
        "regex",
        "remote-explorer",
        "remote",
        "remove",
        "replace-all",
        "replace",
        "repo-clone",
        "repo-force-push",
        "repo-pull",
        "repo-push",
        "report",
        "request-changes",
        "rocket",
        "root-folder-opened",
        "root-folder",
        "rss",
        "ruby",
        "save-all",
        "save-as",
        "save",
        "screen-full",
        "screen-normal",
        "search-stop",
        "server",
        "settings-gear",
        "settings",
        "shield",
        "smiley",
        "sort-precedence",
        "split-horizontal",
        "split-vertical",
        "squirrel",
        "star-full",
        "star-half",
        "symbol-class",
        "symbol-color",
        "symbol-constant",
        "symbol-enum-member",
        "symbol-field",
        "symbol-file",
        "symbol-interface",
        "symbol-keyword",
        "symbol-misc",
        "symbol-operator",
        "symbol-property",
        "wrench",
        "wrench-subaction",
        "symbol-snippet",
        "tasklist",
        "telescope",
        "text-size",
        "three-bars",
        "thumbsdown",
        "thumbsup",
        "tools",
        "triangle-down",
        "triangle-left",
        "triangle-right",
        "triangle-up",
        "twitter",
        "unfold",
        "unlock",
        "unmute",
        "unverified",
        "verified",
        "versions",
        "vm-active",
        "vm-outline",
        "vm-running",
        "watch",
        "whitespace",
        "whole-word",
        "window",
        "word-wrap",
        "zoom-in",
        "zoom-out",
        "list-filter",
        "list-flat",
        "list-selection",
        "selection",
        "list-tree",
        "debug-breakpoint-function-unverified",
        "debug-breakpoint-function",
        "debug-breakpoint-function-disabled",
        "debug-stackframe-active",
        "circle-small-filled",
        "debug-stackframe-dot",
        "terminal-decoration-mark",
        "debug-stackframe",
        "debug-stackframe-focused",
        "debug-breakpoint-unsupported",
        "symbol-string",
        "debug-reverse-continue",
        "debug-step-back",
        "debug-restart-frame",
        "debug-alt",
        "call-incoming",
        "call-outgoing",
        "menu",
        "expand-all",
        "feedback",
        "git-pull-request-reviewer",
        "group-by-ref-type",
        "ungroup-by-ref-type",
        "account",
        "git-pull-request-assignee",
        "bell-dot",
        "debug-console",
        "library",
        "output",
        "run-all",
        "sync-ignored",
        "pinned",
        "github-inverted",
        "server-process",
        "server-environment",
        "pass",
        "issue-closed",
        "stop-circle",
        "play-circle",
        "record",
        "debug-alt-small",
        "vm-connect",
        "cloud",
        "merge",
        "export",
        "graph-left",
        "magnet",
        "notebook",
        "redo",
        "check-all",
        "pinned-dirty",
        "pass-filled",
        "circle-large-filled",
        "circle-large",
        "circle-large-outline",
        "combine",
        "gather",
        "table",
        "variable-group",
        "type-hierarchy",
        "type-hierarchy-sub",
        "type-hierarchy-super",
        "git-pull-request-create",
        "run-above",
        "run-below",
        "notebook-template",
        "debug-rerun",
        "workspace-trusted",
        "workspace-untrusted",
        "workspace-unknown",
        "terminal-cmd",
        "terminal-debian",
        "terminal-linux",
        "terminal-powershell",
        "terminal-tmux",
        "terminal-ubuntu",
        "terminal-bash",
        "arrow-swap",
        "copy",
        "person-add",
        "filter-filled",
        "wand",
        "debug-line-by-line",
        "inspect",
        "layers",
        "layers-dot",
        "layers-active",
        "compass",
        "compass-dot",
        "compass-active",
        "azure",
        "issue-draft",
        "git-pull-request-closed",
        "git-pull-request-draft",
        "debug-all",
        "debug-coverage",
        "run-errors",
        "folder-library",
        "debug-continue-small",
        "beaker-stop",
        "graph-line",
        "graph-scatter",
        "pie-chart",
        "bracket",
        "bracket-dot",
        "bracket-error",
        "lock-small",
        "azure-devops",
        "verified-filled",
        "newline",
        "layout",
        "layout-activitybar-left",
        "layout-activitybar-right",
        "layout-panel-left",
        "layout-panel-center",
        "layout-panel-justify",
        "layout-panel-right",
        "layout-panel",
        "layout-sidebar-left",
        "layout-sidebar-right",
        "layout-statusbar",
        "layout-menubar",
        "layout-centered",
        "target",
        "indent",
        "record-small",
        "error-small",
        "terminal-decoration-error",
        "arrow-circle-down",
        "arrow-circle-left",
        "arrow-circle-right",
        "arrow-circle-up",
        "layout-sidebar-right-off",
        "layout-panel-off",
        "layout-sidebar-left-off",
        "blank",
        "heart-filled",
        "map",
        "map-horizontal",
        "fold-horizontal",
        "map-filled",
        "map-horizontal-filled",
        "fold-horizontal-filled",
        "circle-small",
        "bell-slash",
        "bell-slash-dot",
        "comment-unresolved",
        "git-pull-request-go-to-changes",
        "git-pull-request-new-changes",
        "search-fuzzy",
        "comment-draft",
        "send",
        "sparkle",
        "insert",
        "mic",
        "thumbsdown-filled",
        "thumbsup-filled",
        "coffee",
        "snake",
        "game",
        "vr",
        "chip",
        "piano",
        "music",
        "mic-filled",
        "repo-fetch",
        "copilot",
        "lightbulb-sparkle",
        "robot",
        "sparkle-filled",
        "diff-single",
        "diff-multiple",
        "surround-with",
        "share",
        "git-stash",
        "git-stash-apply",
        "git-stash-pop",
        "vscode",
        "vscode-insiders",
        "code-oss",
        "run-coverage",
        "run-all-coverage",
        "coverage",
        "github-project",
        "map-vertical",
        "fold-vertical",
        "map-vertical-filled",
        "fold-vertical-filled",
        "go-to-search",
        "percentage",
        "sort-percentage",
        "attach",
        "go-to-editing-session",
        "edit-session",
        "code-review",
        "copilot-warning",
        "python",
        "copilot-large",
        "copilot-warning-large",
        "keyboard-tab",
        "copilot-blocked",
        "copilot-not-connected",
        "flag",
        "lightbulb-empty",
        "symbol-method-arrow",
        "copilot-unavailable",
        "repo-pinned",
        "keyboard-tab-above",
        "keyboard-tab-below",
        "git-pull-request-done",
        "mcp",
        "extensions-large",
        "layout-panel-dock",
        "layout-sidebar-left-dock",
        "layout-sidebar-right-dock",
        "copilot-in-progress",
        "copilot-error",
        "copilot-success",
        "chat-sparkle",
        "search-sparkle",
        "edit-sparkle",
        "copilot-snooze",
        "send-to-remote-agent",
        "dialog-error",
        "dialog-warning",
        "dialog-info",
        "dialog-close",
        "tree-item-expanded",
        "tree-filter-on-type-on",
        "tree-filter-on-type-off",
        "tree-filter-clear",
        "tree-item-loading",
        "menu-selection",
        "menu-submenu",
        "menubar-more",
        "scrollbar-button-left",
        "scrollbar-button-right",
        "scrollbar-button-up",
        "scrollbar-button-down",
        "toolbar-more",
        "quick-input-back",
        "drop-down-button",
        "symbol-customcolor",
        "export",
        "workspace-unspecified",
        "newline",
        "thumbsdown-filled",
        "thumbsup-filled",
        "git-fetch",
        "lightbulb-sparkle-autofix",
        "debug-breakpoint-pending"
      ],
      "markdownEnumDescriptions": [
        "$(add)",
        "$(plus)",
        "$(gist-new)",
        "$(repo-create)",
        "$(lightbulb)",
        "$(light-bulb)",
        "$(repo)",
        "$(repo-delete)",
        "$(gist-fork)",
        "$(repo-forked)",
        "$(git-pull-request)",
        "$(git-pull-request-abandoned)",
        "$(record-keys)",
        "$(keyboard)",
        "$(tag)",
        "$(git-pull-request-label)",
        "$(tag-add)",
        "$(tag-remove)",
        "$(person)",
        "$(person-follow)",
        "$(person-outline)",
        "$(person-filled)",
        "$(git-branch)",
        "$(git-branch-create)",
        "$(git-branch-delete)",
        "$(source-control)",
        "$(mirror)",
        "$(mirror-public)",
        "$(star)",
        "$(star-add)",
        "$(star-delete)",
        "$(star-empty)",
        "$(comment)",
        "$(comment-add)",
        "$(alert)",
        "$(warning)",
        "$(search)",
        "$(search-save)",
        "$(log-out)",
        "$(sign-out)",
        "$(log-in)",
        "$(sign-in)",
        "$(eye)",
        "$(eye-unwatch)",
        "$(eye-watch)",
        "$(circle-filled)",
        "$(primitive-dot)",
        "$(close-dirty)",
        "$(debug-breakpoint)",
        "$(debug-breakpoint-disabled)",
        "$(debug-hint)",
        "$(terminal-decoration-success)",
        "$(primitive-square)",
        "$(edit)",
        "$(pencil)",
        "$(info)",
        "$(issue-opened)",
        "$(gist-private)",
        "$(git-fork-private)",
        "$(lock)",
        "$(mirror-private)",
        "$(close)",
        "$(remove-close)",
        "$(x)",
        "$(repo-sync)",
        "$(sync)",
        "$(clone)",
        "$(desktop-download)",
        "$(beaker)",
        "$(microscope)",
        "$(vm)",
        "$(device-desktop)",
        "$(file)",
        "$(file-text)",
        "$(more)",
        "$(ellipsis)",
        "$(kebab-horizontal)",
        "$(mail-reply)",
        "$(reply)",
        "$(organization)",
        "$(organization-filled)",
        "$(organization-outline)",
        "$(new-file)",
        "$(file-add)",
        "$(new-folder)",
        "$(file-directory-create)",
        "$(trash)",
        "$(trashcan)",
        "$(history)",
        "$(clock)",
        "$(folder)",
        "$(file-directory)",
        "$(symbol-folder)",
        "$(logo-github)",
        "$(mark-github)",
        "$(github)",
        "$(terminal)",
        "$(console)",
        "$(repl)",
        "$(zap)",
        "$(symbol-event)",
        "$(error)",
        "$(stop)",
        "$(variable)",
        "$(symbol-variable)",
        "$(array)",
        "$(symbol-array)",
        "$(symbol-module)",
        "$(symbol-package)",
        "$(symbol-namespace)",
        "$(symbol-object)",
        "$(symbol-method)",
        "$(symbol-function)",
        "$(symbol-constructor)",
        "$(symbol-boolean)",
        "$(symbol-null)",
        "$(symbol-numeric)",
        "$(symbol-number)",
        "$(symbol-structure)",
        "$(symbol-struct)",
        "$(symbol-parameter)",
        "$(symbol-type-parameter)",
        "$(symbol-key)",
        "$(symbol-text)",
        "$(symbol-reference)",
        "$(go-to-file)",
        "$(symbol-enum)",
        "$(symbol-value)",
        "$(symbol-ruler)",
        "$(symbol-unit)",
        "$(activate-breakpoints)",
        "$(archive)",
        "$(arrow-both)",
        "$(arrow-down)",
        "$(arrow-left)",
        "$(arrow-right)",
        "$(arrow-small-down)",
        "$(arrow-small-left)",
        "$(arrow-small-right)",
        "$(arrow-small-up)",
        "$(arrow-up)",
        "$(bell)",
        "$(bold)",
        "$(book)",
        "$(bookmark)",
        "$(debug-breakpoint-conditional-unverified)",
        "$(debug-breakpoint-conditional)",
        "$(debug-breakpoint-conditional-disabled)",
        "$(debug-breakpoint-data-unverified)",
        "$(debug-breakpoint-data)",
        "$(debug-breakpoint-data-disabled)",
        "$(debug-breakpoint-log-unverified)",
        "$(debug-breakpoint-log)",
        "$(debug-breakpoint-log-disabled)",
        "$(briefcase)",
        "$(broadcast)",
        "$(browser)",
        "$(bug)",
        "$(calendar)",
        "$(case-sensitive)",
        "$(check)",
        "$(checklist)",
        "$(chevron-down)",
        "$(chevron-left)",
        "$(chevron-right)",
        "$(chevron-up)",
        "$(chrome-close)",
        "$(chrome-maximize)",
        "$(chrome-minimize)",
        "$(chrome-restore)",
        "$(circle-outline)",
        "$(circle)",
        "$(debug-breakpoint-unverified)",
        "$(terminal-decoration-incomplete)",
        "$(circle-slash)",
        "$(circuit-board)",
        "$(clear-all)",
        "$(clippy)",
        "$(close-all)",
        "$(cloud-download)",
        "$(cloud-upload)",
        "$(code)",
        "$(collapse-all)",
        "$(color-mode)",
        "$(comment-discussion)",
        "$(credit-card)",
        "$(dash)",
        "$(dashboard)",
        "$(database)",
        "$(debug-continue)",
        "$(debug-disconnect)",
        "$(debug-pause)",
        "$(debug-restart)",
        "$(debug-start)",
        "$(debug-step-into)",
        "$(debug-step-out)",
        "$(debug-step-over)",
        "$(debug-stop)",
        "$(debug)",
        "$(device-camera-video)",
        "$(device-camera)",
        "$(device-mobile)",
        "$(diff-added)",
        "$(diff-ignored)",
        "$(diff-modified)",
        "$(diff-removed)",
        "$(diff-renamed)",
        "$(diff)",
        "$(diff-sidebyside)",
        "$(discard)",
        "$(editor-layout)",
        "$(empty-window)",
        "$(exclude)",
        "$(extensions)",
        "$(eye-closed)",
        "$(file-binary)",
        "$(file-code)",
        "$(file-media)",
        "$(file-pdf)",
        "$(file-submodule)",
        "$(file-symlink-directory)",
        "$(file-symlink-file)",
        "$(file-zip)",
        "$(files)",
        "$(filter)",
        "$(flame)",
        "$(fold-down)",
        "$(fold-up)",
        "$(fold)",
        "$(folder-active)",
        "$(folder-opened)",
        "$(gear)",
        "$(gift)",
        "$(gist-secret)",
        "$(gist)",
        "$(git-commit)",
        "$(git-compare)",
        "$(compare-changes)",
        "$(git-merge)",
        "$(github-action)",
        "$(github-alt)",
        "$(globe)",
        "$(grabber)",
        "$(graph)",
        "$(gripper)",
        "$(heart)",
        "$(home)",
        "$(horizontal-rule)",
        "$(hubot)",
        "$(inbox)",
        "$(issue-reopened)",
        "$(issues)",
        "$(italic)",
        "$(jersey)",
        "$(json)",
        "$(kebab-vertical)",
        "$(key)",
        "$(law)",
        "$(lightbulb-autofix)",
        "$(link-external)",
        "$(link)",
        "$(list-ordered)",
        "$(list-unordered)",
        "$(live-share)",
        "$(loading)",
        "$(location)",
        "$(mail-read)",
        "$(mail)",
        "$(markdown)",
        "$(megaphone)",
        "$(mention)",
        "$(milestone)",
        "$(git-pull-request-milestone)",
        "$(mortar-board)",
        "$(move)",
        "$(multiple-windows)",
        "$(mute)",
        "$(no-newline)",
        "$(note)",
        "$(octoface)",
        "$(open-preview)",
        "$(package)",
        "$(paintcan)",
        "$(pin)",
        "$(play)",
        "$(run)",
        "$(plug)",
        "$(preserve-case)",
        "$(preview)",
        "$(project)",
        "$(pulse)",
        "$(question)",
        "$(quote)",
        "$(radio-tower)",
        "$(reactions)",
        "$(references)",
        "$(refresh)",
        "$(regex)",
        "$(remote-explorer)",
        "$(remote)",
        "$(remove)",
        "$(replace-all)",
        "$(replace)",
        "$(repo-clone)",
        "$(repo-force-push)",
        "$(repo-pull)",
        "$(repo-push)",
        "$(report)",
        "$(request-changes)",
        "$(rocket)",
        "$(root-folder-opened)",
        "$(root-folder)",
        "$(rss)",
        "$(ruby)",
        "$(save-all)",
        "$(save-as)",
        "$(save)",
        "$(screen-full)",
        "$(screen-normal)",
        "$(search-stop)",
        "$(server)",
        "$(settings-gear)",
        "$(settings)",
        "$(shield)",
        "$(smiley)",
        "$(sort-precedence)",
        "$(split-horizontal)",
        "$(split-vertical)",
        "$(squirrel)",
        "$(star-full)",
        "$(star-half)",
        "$(symbol-class)",
        "$(symbol-color)",
        "$(symbol-constant)",
        "$(symbol-enum-member)",
        "$(symbol-field)",
        "$(symbol-file)",
        "$(symbol-interface)",
        "$(symbol-keyword)",
        "$(symbol-misc)",
        "$(symbol-operator)",
        "$(symbol-property)",
        "$(wrench)",
        "$(wrench-subaction)",
        "$(symbol-snippet)",
        "$(tasklist)",
        "$(telescope)",
        "$(text-size)",
        "$(three-bars)",
        "$(thumbsdown)",
        "$(thumbsup)",
        "$(tools)",
        "$(triangle-down)",
        "$(triangle-left)",
        "$(triangle-right)",
        "$(triangle-up)",
        "$(twitter)",
        "$(unfold)",
        "$(unlock)",
        "$(unmute)",
        "$(unverified)",
        "$(verified)",
        "$(versions)",
        "$(vm-active)",
        "$(vm-outline)",
        "$(vm-running)",
        "$(watch)",
        "$(whitespace)",
        "$(whole-word)",
        "$(window)",
        "$(word-wrap)",
        "$(zoom-in)",
        "$(zoom-out)",
        "$(list-filter)",
        "$(list-flat)",
        "$(list-selection)",
        "$(selection)",
        "$(list-tree)",
        "$(debug-breakpoint-function-unverified)",
        "$(debug-breakpoint-function)",
        "$(debug-breakpoint-function-disabled)",
        "$(debug-stackframe-active)",
        "$(circle-small-filled)",
        "$(debug-stackframe-dot)",
        "$(terminal-decoration-mark)",
        "$(debug-stackframe)",
        "$(debug-stackframe-focused)",
        "$(debug-breakpoint-unsupported)",
        "$(symbol-string)",
        "$(debug-reverse-continue)",
        "$(debug-step-back)",
        "$(debug-restart-frame)",
        "$(debug-alt)",
        "$(call-incoming)",
        "$(call-outgoing)",
        "$(menu)",
        "$(expand-all)",
        "$(feedback)",
        "$(git-pull-request-reviewer)",
        "$(group-by-ref-type)",
        "$(ungroup-by-ref-type)",
        "$(account)",
        "$(git-pull-request-assignee)",
        "$(bell-dot)",
        "$(debug-console)",
        "$(library)",
        "$(output)",
        "$(run-all)",
        "$(sync-ignored)",
        "$(pinned)",
        "$(github-inverted)",
        "$(server-process)",
        "$(server-environment)",
        "$(pass)",
        "$(issue-closed)",
        "$(stop-circle)",
        "$(play-circle)",
        "$(record)",
        "$(debug-alt-small)",
        "$(vm-connect)",
        "$(cloud)",
        "$(merge)",
        "$(export)",
        "$(graph-left)",
        "$(magnet)",
        "$(notebook)",
        "$(redo)",
        "$(check-all)",
        "$(pinned-dirty)",
        "$(pass-filled)",
        "$(circle-large-filled)",
        "$(circle-large)",
        "$(circle-large-outline)",
        "$(combine)",
        "$(gather)",
        "$(table)",
        "$(variable-group)",
        "$(type-hierarchy)",
        "$(type-hierarchy-sub)",
        "$(type-hierarchy-super)",
        "$(git-pull-request-create)",
        "$(run-above)",
        "$(run-below)",
        "$(notebook-template)",
        "$(debug-rerun)",
        "$(workspace-trusted)",
        "$(workspace-untrusted)",
        "$(workspace-unknown)",
        "$(terminal-cmd)",
        "$(terminal-debian)",
        "$(terminal-linux)",
        "$(terminal-powershell)",
        "$(terminal-tmux)",
        "$(terminal-ubuntu)",
        "$(terminal-bash)",
        "$(arrow-swap)",
        "$(copy)",
        "$(person-add)",
        "$(filter-filled)",
        "$(wand)",
        "$(debug-line-by-line)",
        "$(inspect)",
        "$(layers)",
        "$(layers-dot)",
        "$(layers-active)",
        "$(compass)",
        "$(compass-dot)",
        "$(compass-active)",
        "$(azure)",
        "$(issue-draft)",
        "$(git-pull-request-closed)",
        "$(git-pull-request-draft)",
        "$(debug-all)",
        "$(debug-coverage)",
        "$(run-errors)",
        "$(folder-library)",
        "$(debug-continue-small)",
        "$(beaker-stop)",
        "$(graph-line)",
        "$(graph-scatter)",
        "$(pie-chart)",
        "$(bracket)",
        "$(bracket-dot)",
        "$(bracket-error)",
        "$(lock-small)",
        "$(azure-devops)",
        "$(verified-filled)",
        "$(newline)",
        "$(layout)",
        "$(layout-activitybar-left)",
        "$(layout-activitybar-right)",
        "$(layout-panel-left)",
        "$(layout-panel-center)",
        "$(layout-panel-justify)",
        "$(layout-panel-right)",
        "$(layout-panel)",
        "$(layout-sidebar-left)",
        "$(layout-sidebar-right)",
        "$(layout-statusbar)",
        "$(layout-menubar)",
        "$(layout-centered)",
        "$(target)",
        "$(indent)",
        "$(record-small)",
        "$(error-small)",
        "$(terminal-decoration-error)",
        "$(arrow-circle-down)",
        "$(arrow-circle-left)",
        "$(arrow-circle-right)",
        "$(arrow-circle-up)",
        "$(layout-sidebar-right-off)",
        "$(layout-panel-off)",
        "$(layout-sidebar-left-off)",
        "$(blank)",
        "$(heart-filled)",
        "$(map)",
        "$(map-horizontal)",
        "$(fold-horizontal)",
        "$(map-filled)",
        "$(map-horizontal-filled)",
        "$(fold-horizontal-filled)",
        "$(circle-small)",
        "$(bell-slash)",
        "$(bell-slash-dot)",
        "$(comment-unresolved)",
        "$(git-pull-request-go-to-changes)",
        "$(git-pull-request-new-changes)",
        "$(search-fuzzy)",
        "$(comment-draft)",
        "$(send)",
        "$(sparkle)",
        "$(insert)",
        "$(mic)",
        "$(thumbsdown-filled)",
        "$(thumbsup-filled)",
        "$(coffee)",
        "$(snake)",
        "$(game)",
        "$(vr)",
        "$(chip)",
        "$(piano)",
        "$(music)",
        "$(mic-filled)",
        "$(repo-fetch)",
        "$(copilot)",
        "$(lightbulb-sparkle)",
        "$(robot)",
        "$(sparkle-filled)",
        "$(diff-single)",
        "$(diff-multiple)",
        "$(surround-with)",
        "$(share)",
        "$(git-stash)",
        "$(git-stash-apply)",
        "$(git-stash-pop)",
        "$(vscode)",
        "$(vscode-insiders)",
        "$(code-oss)",
        "$(run-coverage)",
        "$(run-all-coverage)",
        "$(coverage)",
        "$(github-project)",
        "$(map-vertical)",
        "$(fold-vertical)",
        "$(map-vertical-filled)",
        "$(fold-vertical-filled)",
        "$(go-to-search)",
        "$(percentage)",
        "$(sort-percentage)",
        "$(attach)",
        "$(go-to-editing-session)",
        "$(edit-session)",
        "$(code-review)",
        "$(copilot-warning)",
        "$(python)",
        "$(copilot-large)",
        "$(copilot-warning-large)",
        "$(keyboard-tab)",
        "$(copilot-blocked)",
        "$(copilot-not-connected)",
        "$(flag)",
        "$(lightbulb-empty)",
        "$(symbol-method-arrow)",
        "$(copilot-unavailable)",
        "$(repo-pinned)",
        "$(keyboard-tab-above)",
        "$(keyboard-tab-below)",
        "$(git-pull-request-done)",
        "$(mcp)",
        "$(extensions-large)",
        "$(layout-panel-dock)",
        "$(layout-sidebar-left-dock)",
        "$(layout-sidebar-right-dock)",
        "$(copilot-in-progress)",
        "$(copilot-error)",
        "$(copilot-success)",
        "$(chat-sparkle)",
        "$(search-sparkle)",
        "$(edit-sparkle)",
        "$(copilot-snooze)",
        "$(send-to-remote-agent)",
        "$(dialog-error)",
        "$(dialog-warning)",
        "$(dialog-info)",
        "$(dialog-close)",
        "$(tree-item-expanded)",
        "$(tree-filter-on-type-on)",
        "$(tree-filter-on-type-off)",
        "$(tree-filter-clear)",
        "$(tree-item-loading)",
        "$(menu-selection)",
        "$(menu-submenu)",
        "$(menubar-more)",
        "$(scrollbar-button-left)",
        "$(scrollbar-button-right)",
        "$(scrollbar-button-up)",
        "$(scrollbar-button-down)",
        "$(toolbar-more)",
        "$(quick-input-back)",
        "$(drop-down-button)",
        "$(symbol-customcolor)",
        "$(export)",
        "$(workspace-unspecified)",
        "$(newline)",
        "$(thumbsdown-filled)",
        "$(thumbsup-filled)",
        "$(git-fetch)",
        "$(lightbulb-sparkle-autofix)",
        "$(debug-breakpoint-pending)"
      ]
    },
    "_277": {
      "description": "A theme color ID to associate with the terminal icon.",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "terminal.ansiBlack",
        "terminal.ansiRed",
        "terminal.ansiGreen",
        "terminal.ansiYellow",
        "terminal.ansiBlue",
        "terminal.ansiMagenta",
        "terminal.ansiCyan",
        "terminal.ansiWhite"
      ],
      "default": null
    },
    "_278": {
      "markdownDescription": "An object with environment variables that will be added to the terminal profile process. Set to `null` to delete environment variables from the base environment.",
      "type": "object",
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ]
      },
      "default": {}
    },
    "_279": {
      "type": "object",
      "required": [
        "extensionIdentifier",
        "id",
        "title"
      ],
      "properties": {
        "extensionIdentifier": {
          "description": "The extension that contributed this profile.",
          "type": "string"
        },
        "id": {
          "description": "The id of the extension terminal",
          "type": "string"
        },
        "title": {
          "description": "The name of the extension terminal",
          "type": "string"
        },
        "args": {
          "$ref": "#/$defs/_274"
        },
        "overrideName": {
          "$ref": "#/$defs/_275"
        },
        "icon": {
          "$ref": "#/$defs/_276"
        },
        "color": {
          "$ref": "#/$defs/_277"
        },
        "env": {
          "$ref": "#/$defs/_278"
        }
      }
    },
    "_280": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "A single path to a shell executable or an array of paths that will be used as fallbacks when one fails.",
          "type": [
            "string",
            "array"
          ],
          "items": {
            "type": "string"
          }
        },
        "args": {
          "$ref": "#/$defs/_274"
        },
        "overrideName": {
          "$ref": "#/$defs/_275"
        },
        "icon": {
          "$ref": "#/$defs/_276"
        },
        "color": {
          "$ref": "#/$defs/_277"
        },
        "env": {
          "$ref": "#/$defs/_278"
        }
      }
    },
    "_281": {
      "anyOf": [
        {
          "$ref": "#/$defs/_279"
        },
        {
          "type": "null"
        },
        {
          "$ref": "#/$defs/_280"
        }
      ]
    },
    "_282": {
      "type": "string",
      "uniqueItems": true
    },
    "_283": {
      "type": "number",
      "minimum": 1,
      "maximum": 1000,
      "errorMessage": "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed."
    },
    "_284": {
      "type": "string",
      "pattern": "^(normal|bold|1000|[1-9][0-9]{0,2})$"
    },
    "_285": {
      "enum": [
        "normal",
        "bold",
        "100",
        "200",
        "300",
        "400",
        "500",
        "600",
        "700",
        "800",
        "900"
      ]
    },
    "_286": {
      "type": "boolean",
      "enum": [
        true,
        false
      ],
      "enumDescriptions": [
        "Automatically approve the pattern.",
        "Require explicit approval for the pattern."
      ],
      "description": "The start of a command to match against. A regular expression can be provided by wrapping the string in `/` characters."
    },
    "_287": {
      "deprecated": true,
      "markdownDeprecationMessage": "Use `#chat.tools.terminal.autoApprove#` instead",
      "default": null,
      "scope": 4,
      "restricted": false,
      "deprecationMessage": "Use `#chat.tools.terminal.autoApprove#` instead"
    },
    "_288": {
      "type": "string",
      "enum": [
        "ui",
        "workspace"
      ],
      "enumDescriptions": [
        "UI extension kind. In a remote window, such extensions are enabled only when available on the local machine.",
        "Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote."
      ]
    },
    "_289": {
      "type": "boolean",
      "description": "Automatically prompt for elevation (if needed) when this port is forwarded. Elevate is required if the local port is a privileged port.",
      "default": false
    },
    "_290": {
      "type": "string",
      "description": "Label that will be shown in the UI for this port.",
      "default": "Application"
    },
    "_291": {
      "type": "boolean",
      "markdownDescription": "When true, a modal dialog will show if the chosen local port isn't used for forwarding.",
      "default": false
    },
    "_292": {
      "type": "string",
      "enum": [
        "http",
        "https"
      ],
      "description": "The protocol to use when forwarding this port."
    },
    "_293": {
      "type": [
        "array",
        "null"
      ],
      "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
      "default": [
        "${workspaceFolder}/**",
        "!**/node_modules/**"
      ],
      "items": {
        "type": "string"
      }
    },
    "_294": {
      "type": [
        "array"
      ],
      "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
      "default": [
        "${workspaceFolder}/**/*.(m|c|)js",
        "!**/node_modules/**"
      ],
      "items": {
        "type": "string"
      },
      "tags": [
        "setup"
      ]
    },
    "_295": {
      "type": "boolean",
      "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
      "default": false
    },
    "_296": {
      "description": "Show the async calls that led to the current call stack.",
      "default": true,
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "required": [
            "onAttach"
          ],
          "properties": {
            "onAttach": {
              "$ref": "#/$defs/_404"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "onceBreakpointResolved"
          ],
          "properties": {
            "onceBreakpointResolved": {
              "$ref": "#/$defs/_404"
            }
          }
        }
      ]
    },
    "_297": {
      "type": "array",
      "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
      "default": [
        "${/**"
      ]
    },
    "_298": {
      "type": "boolean",
      "description": "Automatically step through generated code that cannot be mapped back to the original source.",
      "default": true
    },
    "_299": {
      "type": "boolean",
      "description": "Use JavaScript source maps (if they exist).",
      "default": true
    },
    "_300": {
      "type": "boolean",
      "default": true,
      "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers."
    },
    "_301": {
      "type": "object",
      "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
      "default": {
        "webpack://?:*/*": "${workspaceFolder}/*",
        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
        "meteor://💻app/*": "${workspaceFolder}/*"
      }
    },
    "_302": {
      "type": "number",
      "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
      "default": 10000
    },
    "_303": {
      "type": "object",
      "description": "Timeouts for several debugger operations.",
      "default": {},
      "properties": {
        "sourceMapMinPause": {
          "type": "number",
          "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
          "default": 1000
        },
        "sourceMapCumulativePause": {
          "type": "number",
          "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
          "default": 1000
        },
        "hoverEvaluation": {
          "type": "number",
          "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
          "default": 500
        }
      },
      "additionalProperties": false,
      "markdownDescription": "Timeouts for several debugger operations."
    },
    "_304": {
      "description": "Configures what diagnostic output is produced.",
      "default": true,
      "oneOf": [
        {
          "type": "boolean",
          "description": "Trace may be set to 'true' to write diagnostic logs to the disk."
        },
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "stdio": {
              "type": "boolean",
              "description": "Whether to return trace data from the launched application or browser."
            },
            "logFile": {
              "type": [
                "string",
                "null"
              ],
              "description": "Configures where on disk logs are written."
            }
          }
        }
      ]
    },
    "_305": {
      "enum": [
        "console",
        "std"
      ],
      "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
      "default": "console"
    },
    "_306": {
      "default": true,
      "type": "boolean",
      "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example."
    },
    "_307": {
      "type": "string",
      "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      "
    },
    "_308": {
      "type": "string",
      "deprecated": true,
      "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181"
    },
    "_309": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/_282"
      },
      "default": [],
      "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped."
    },
    "_310": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function."
    },
    "_311": {
      "type": "string",
      "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
      "default": "${workspaceFolder}",
      "docDefault": "localRoot || ${workspaceFolder}",
      "tags": [
        "setup"
      ]
    },
    "_312": {
      "type": [
        "string",
        "null"
      ],
      "description": "Path to the local directory containing the program.",
      "default": null
    },
    "_313": {
      "type": [
        "string",
        "null"
      ],
      "description": "Absolute path to the remote directory containing the program.",
      "default": null
    },
    "_314": {
      "type": "boolean",
      "description": "Attach debugger to new child processes automatically.",
      "default": true
    },
    "_315": {
      "type": "object",
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ]
      },
      "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
      "default": {},
      "tags": [
        "setup"
      ]
    },
    "_316": {
      "type": "string",
      "description": "Absolute path to a file containing environment variable definitions.",
      "default": "${workspaceFolder}/.env"
    },
    "_317": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
      "default": []
    },
    "_318": {
      "type": "number",
      "minimum": 8,
      "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
      "default": 12
    },
    "_319": {
      "type": [
        "string",
        "null"
      ],
      "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
      "default": "npm start",
      "tags": [
        "setup"
      ]
    },
    "_320": {
      "type": "string",
      "enum": [
        "on",
        "off",
        "always"
      ]
    },
    "_321": {
      "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
      "default": true,
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "properties": {
            "delay": {
              "type": "number",
              "minimum": 0,
              "default": 1000
            },
            "maxAttempts": {
              "type": "number",
              "minimum": 0,
              "default": 10
            }
          }
        }
      ]
    },
    "_322": {
      "type": "string",
      "pattern": "^\\${.*}$"
    },
    "_323": {
      "type": "boolean",
      "default": false,
      "description": "Makes `Go to Definition` avoid type declaration files when possible by triggering `Go to Source Definition` instead. This allows `Go to Source Definition` to be triggered with the mouse gesture.",
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_324": {
      "scope": 4,
      "type": "boolean",
      "default": true,
      "markdownDescription": "Automatically update imports when pasting code. Requires TypeScript 5.6+.",
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_325": {
      "type": "object",
      "markdownDescription": "Advanced preferences that control how imports are ordered.",
      "properties": {
        "caseSensitivity": {
          "type": "string",
          "markdownDescription": "Specifies how imports should be sorted with regards to case-sensitivity. If `auto` or unspecified, we will detect the case-sensitivity per file",
          "enum": [
            "auto",
            "caseInsensitive",
            "caseSensitive"
          ],
          "markdownEnumDescriptions": [
            "Detect case-sensitivity for import sorting.",
            "%typescript.preferences.organizeImports.caseSensitivity.insensitive",
            "Sort imports case-sensitively."
          ],
          "default": "auto"
        },
        "typeOrder": {
          "type": "string",
          "markdownDescription": "Specify how type-only named imports should be sorted.",
          "enum": [
            "auto",
            "last",
            "inline",
            "first"
          ],
          "default": "auto",
          "markdownEnumDescriptions": [
            "Detect where type-only named imports should be sorted.",
            "Type only named imports are sorted to the end of the import list. E.g. `import { B, Z, type A, type Y } from 'module';`",
            "Named imports are sorted by name only. E.g. `import { type A, B, type Y, Z } from 'module';`",
            "Type only named imports are sorted to the beginning of the import list. E.g. `import { type A, type Y, B, Z } from 'module';`"
          ]
        },
        "unicodeCollation": {
          "type": "string",
          "markdownDescription": "Specify whether to sort imports using Unicode or Ordinal collation.",
          "enum": [
            "ordinal",
            "unicode"
          ],
          "markdownEnumDescriptions": [
            "Sort imports using the numeric value of each code point.",
            "Sort imports using the Unicode code collation."
          ],
          "default": "ordinal"
        },
        "locale": {
          "type": "string",
          "markdownDescription": "Requires `organizeImports.unicodeCollation: 'unicode'`. Overrides the locale used for collation. Specify `auto` to use the UI locale."
        },
        "numericCollation": {
          "type": "boolean",
          "markdownDescription": "Requires `organizeImports.unicodeCollation: 'unicode'`. Sort numeric strings by integer value."
        },
        "accentCollation": {
          "type": "boolean",
          "markdownDescription": "Requires `organizeImports.unicodeCollation: 'unicode'`. Compare characters with diacritical marks as unequal to base character."
        },
        "caseFirst": {
          "type": "string",
          "markdownDescription": "Requires `organizeImports.unicodeCollation: 'unicode'`, and `organizeImports.caseSensitivity` is not `caseInsensitive`. Indicates whether upper-case will sort before lower-case.",
          "enum": [
            "default",
            "upper",
            "lower"
          ],
          "markdownEnumDescriptions": [
            "Default order given by `locale`.",
            "Upper-case comes before lower-case. E.g. ` A, a, B, b`.",
            "Lower-case comes before upper-case. E.g.` a, A, z, Z`."
          ],
          "default": "default"
        }
      },
      "scope": 4,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "default": {},
      "restricted": false
    },
    "_326": {
      "type": "array",
      "items": [
        {
          "type": "string",
          "description": "The opening bracket character or string sequence."
        },
        {
          "type": "string",
          "description": "The closing bracket character or string sequence."
        }
      ]
    },
    "_327": {
      "type": "object",
      "properties": {
        "when": {
          "type": "string",
          "pattern": "\\w*\\$\\(basename\\)\\w*",
          "default": "$(basename).ext",
          "markdownDescription": "Additional check on the siblings of a matching file. Use \\$(basename) as variable for the matching file name."
        }
      }
    },
    "_328": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "_329": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "_330": {
      "description": "Plays a sound when the active line has a warning.",
      "type": "string",
      "enum": [
        "auto",
        "on",
        "off"
      ],
      "default": "auto",
      "enumDescriptions": [
        "Enable sound when a screen reader is attached.",
        "Enable sound.",
        "Disable sound."
      ],
      "tags": [
        "accessibility"
      ]
    },
    "_331": {
      "type": "object",
      "tags": [
        "accessibility"
      ],
      "additionalProperties": false,
      "default": {
        "sound": "auto",
        "announcement": "auto"
      },
      "description": "Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.",
      "properties": {
        "sound": {
          "$ref": "#/$defs/_330"
        },
        "announcement": {
          "description": "Announces when the active line has a warning.",
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "on",
          "enumDescriptions": [
            "Enable announcement, will only play when in screen reader optimized mode.",
            "Disable announcement."
          ],
          "tags": [
            "accessibility"
          ]
        }
      },
      "defaultDefaultValue": {
        "sound": "auto",
        "announcement": "auto"
      },
      "scope": 5,
      "restricted": false
    },
    "_332": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_333": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Insert semicolon at end of line when completing CSS properties.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_334": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "description": "Enables or disables all validations.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_335": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "When using a vendor-specific prefix make sure to also include all other vendor-specific properties.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_336": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "When using a vendor-specific prefix, also include the standard property.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "warning",
      "restricted": false
    },
    "_337": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Do not use duplicate style definitions.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_338": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Do not use empty rulesets.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "warning",
      "restricted": false
    },
    "_339": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Import statements do not load in parallel.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_340": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Do not use `width` or `height` when using `padding` or `border`.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_341": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "The universal selector (`*`) is known to be slow.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_342": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "No unit for zero needed.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_343": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "markdownDescription": "`@font-face` rule must define `src` and `font-family` properties.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "warning",
      "restricted": false
    },
    "_344": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "error",
      "description": "Hex colors must consist of 3, 4, 6 or 8 hex numbers.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "error",
      "restricted": false
    },
    "_345": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "error",
      "description": "Invalid number of parameters.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "error",
      "restricted": false
    },
    "_346": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Unknown property.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "warning",
      "restricted": false
    },
    "_347": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      },
      "scope": 5,
      "default": [],
      "description": "A list of properties that are not validated against the `unknownProperties` rule.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": [],
      "restricted": false
    },
    "_348": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "IE hacks are only necessary when supporting IE7 and older.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_349": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Unknown vendor specific property.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_350": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "markdownDescription": "Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "warning",
      "restricted": false
    },
    "_351": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_352": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "markdownDescription": "Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_353": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "ignore",
      "description": "Selectors should not contain IDs because these rules are too tightly coupled with the HTML.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_354": {
      "type": "string",
      "scope": 5,
      "enum": [
        "ignore",
        "warning",
        "error"
      ],
      "default": "warning",
      "description": "Unknown at-rule.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "warning",
      "restricted": false
    },
    "_355": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "markdownDescription": "Separate selectors with a new line.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_356": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "markdownDescription": "Separate rulesets by a blank line.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_357": {
      "type": "boolean",
      "scope": 5,
      "default": false,
      "markdownDescription": "Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_358": {
      "type": "string",
      "scope": 5,
      "default": "collapse",
      "enum": [
        "collapse",
        "expand"
      ],
      "markdownDescription": "Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": "collapse",
      "restricted": false
    },
    "_359": {
      "type": "boolean",
      "scope": 5,
      "default": true,
      "markdownDescription": "Whether existing line breaks before rules and declarations should be preserved.",
      "source": {
        "id": "vscode.css-language-features",
        "displayName": "CSS Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_360": {
      "type": "string",
      "enum": [
        "prompt",
        "always",
        "never"
      ],
      "markdownEnumDescriptions": [
        "Prompt on each rename.",
        "Always update paths automatically.",
        "Never rename paths and don't prompt."
      ],
      "default": "prompt",
      "description": "Enable/disable automatic updating of import paths when you rename or move a file in VS Code.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "prompt",
      "restricted": false
    },
    "_361": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable automatic closing of JSX tags.",
      "scope": 6,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_362": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable autocomplete suggestions.",
      "scope": 6,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_363": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable auto import suggestions.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_364": {
      "type": "boolean",
      "default": false,
      "description": "Complete functions with their parameter signature.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_365": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable suggestions for paths in import statements and require calls.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_366": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable suggestion to complete JSDoc comments.",
      "scope": 6,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_367": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Enable/disable generating `@returns` annotations for JSDoc templates.",
      "scope": 6,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_368": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_369": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable auto-import-style completions on partially-typed import statements.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_370": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable snippet completions for class members.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_371": {
      "type": "string",
      "enum": [
        "auto",
        "single",
        "double"
      ],
      "default": "auto",
      "markdownDescription": "Preferred quote style to use for Quick Fixes.",
      "markdownEnumDescriptions": [
        "Infer quote type from existing code",
        "Always use single quotes: `'`",
        "Always use double quotes: `\"`"
      ],
      "scope": 6,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "_372": {
      "type": "string",
      "enum": [
        "shortest",
        "relative",
        "non-relative",
        "project-relative"
      ],
      "markdownEnumDescriptions": [
        "Prefers a non-relative import only if one is available that has fewer path segments than a relative import.",
        "Prefers a relative path to the imported file location.",
        "Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.",
        "Prefers a non-relative import only if the relative import path would leave the package or project directory."
      ],
      "default": "shortest",
      "description": "Preferred path style for auto imports.",
      "scope": 6,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "shortest",
      "restricted": false
    },
    "_373": {
      "type": "string",
      "enum": [
        "auto",
        "minimal",
        "index",
        "js"
      ],
      "enumItemLabels": [
        null,
        null,
        null,
        ".js / .ts"
      ],
      "markdownEnumDescriptions": [
        "Use project settings to select a default.",
        "Shorten `./component/index.js` to `./component`.",
        "Shorten `./component/index.js` to `./component/index`.",
        "Do not shorten path endings; include the `.js` or `.ts` extension."
      ],
      "default": "auto",
      "description": "Preferred path ending for auto imports.",
      "scope": 6,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "auto",
      "restricted": false
    },
    "_374": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "markdownDescription": "Specify glob patterns of files to exclude from auto imports. Relative paths are resolved relative to the workspace root. Patterns are evaluated using tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude) semantics.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "default": [],
      "restricted": false
    },
    "_375": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "markdownDescription": "Specify regular expressions to exclude auto imports with matching import specifiers. Examples:\n\n- `^node:`\n- `lib/internal` (slashes don't need to be escaped...)\n- `/lib\\/internal/i` (...unless including surrounding slashes for `i` or `u` flags)\n- `^lodash$` (only allow subpath imports from lodash)",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "default": [],
      "restricted": false
    },
    "_376": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable introducing aliases for object shorthand properties during renames.",
      "scope": 6,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_377": {
      "type": "boolean",
      "default": true,
      "description": "When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.",
      "scope": 6,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_378": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after a comma delimiter.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_379": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after the constructor keyword.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_380": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after a semicolon in a for statement.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_381": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after a binary operator.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_382": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after keywords in a control flow statement.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_383": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after function keyword for anonymous functions.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_384": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling before function argument parentheses.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_385": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing non-empty parenthesis.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_386": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing non-empty brackets.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_387": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after opening and before closing non-empty braces.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_388": {
      "type": "boolean",
      "default": true,
      "description": "Defines space handling after opening and before closing empty braces.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_389": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing template string braces.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_390": {
      "type": "boolean",
      "default": false,
      "description": "Defines space handling after opening and before closing JSX expression braces.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_391": {
      "type": "boolean",
      "default": false,
      "description": "Defines whether an open brace is put onto a new line for functions or not.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_392": {
      "type": "boolean",
      "default": false,
      "description": "Defines whether an open brace is put onto a new line for control blocks or not.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_393": {
      "type": "string",
      "default": "ignore",
      "description": "Defines handling of optional semicolons.",
      "scope": 5,
      "enum": [
        "ignore",
        "insert",
        "remove"
      ],
      "enumDescriptions": [
        "Don't insert or remove any semicolons.",
        "Insert semicolons at statement ends.",
        "Remove unnecessary semicolons."
      ],
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "ignore",
      "restricted": false
    },
    "_394": {
      "type": "boolean",
      "default": true,
      "description": "Indent case clauses in switch statements. Requires using TypeScript 5.1+ in the workspace.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_395": {
      "type": "string",
      "enum": [
        "none",
        "literals",
        "all"
      ],
      "enumDescriptions": [
        "Disable parameter name hints.",
        "Enable parameter name hints only for literal arguments.",
        "Enable parameter name hints for literal and non-literal arguments."
      ],
      "default": "none",
      "markdownDescription": "Enable/disable inlay hints for parameter names:\n```typescript\n\nparseInt(/* str: */ '123', /* radix: */ 8)\n \n```",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": "none",
      "restricted": false
    },
    "_396": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Suppress parameter name hints on arguments whose text is identical to the parameter name.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_397": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for implicit parameter types:\n```typescript\n\nel.addEventListener('click', e /* :MouseEvent */ => ...)\n \n```",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_398": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for implicit variable types:\n```typescript\n\nconst foo /* :number */ = Date.now();\n \n```",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_399": {
      "type": "boolean",
      "default": true,
      "markdownDescription": "Suppress type hints on variables whose name is identical to the type name.",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": true,
      "restricted": false
    },
    "_400": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for implicit types on property declarations:\n```typescript\n\nclass Foo {\n\tprop /* :number */ = Date.now();\n}\n \n```",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_401": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for implicit return types on function signatures:\n```typescript\n\nfunction foo() /* :number */ {\n\treturn Date.now();\n} \n \n```",
      "scope": 5,
      "source": {
        "id": "vscode.typescript-language-features",
        "displayName": "TypeScript and JavaScript Language Features"
      },
      "defaultDefaultValue": false,
      "restricted": false
    },
    "_402": {
      "type": "string",
      "enum": [
        "on",
        "inline",
        "off"
      ],
      "enumDescriptions": [
        "Quick suggestions show inside the suggest widget",
        "Quick suggestions show as ghost text",
        "Quick suggestions are disabled"
      ]
    },
    "_403": {
      "type": "number",
      "description": "Number of monospace characters at which this editor ruler will render."
    },
    "_404": {
      "type": "number",
      "default": 32
    }
  }
}
