{
  "type": "array",
  "definitions": {
    "colorGroup": {
      "default": "#FF0000",
      "anyOf": [
        {
          "$ref": "#/$defs/_0"
        },
        {
          "type": "string",
          "format": "color-hex"
        }
      ]
    },
    "settings": {
      "type": "object",
      "description": "Colors and styles for the token.",
      "properties": {
        "background": {
          "type": "string",
          "deprecationMessage": "Token background colors are currently not supported."
        },
        "fontStyle": {
          "type": "string",
          "description": "Font style of the rule: 'italic', 'bold', 'underline', 'strikethrough' or a combination. The empty string unsets inherited settings.",
          "pattern": "^(\\s*\\b(italic|bold|underline|strikethrough))*\\s*$",
          "patternErrorMessage": "Font style must be 'italic', 'bold', 'underline', 'strikethrough' or a combination or the empty string.",
          "defaultSnippets": [
            {
              "label": "None (clear inherited style)",
              "bodyText": "\"\""
            },
            {
              "body": "italic"
            },
            {
              "body": "bold"
            },
            {
              "body": "underline"
            },
            {
              "body": "strikethrough"
            },
            {
              "body": "italic bold"
            },
            {
              "body": "italic underline"
            },
            {
              "body": "italic strikethrough"
            },
            {
              "body": "bold underline"
            },
            {
              "body": "bold strikethrough"
            },
            {
              "body": "underline strikethrough"
            },
            {
              "body": "italic bold underline"
            },
            {
              "body": "italic bold strikethrough"
            },
            {
              "body": "italic underline strikethrough"
            },
            {
              "body": "bold underline strikethrough"
            },
            {
              "body": "italic bold underline strikethrough"
            }
          ]
        },
        "foreground": {
          "type": "string",
          "description": "Foreground color for the token.",
          "format": "color-hex",
          "default": "#ff0000"
        }
      },
      "additionalProperties": false,
      "defaultSnippets": [
        {
          "body": {
            "foreground": "${1:#FF0000}",
            "fontStyle": "${2:bold}"
          }
        }
      ]
    }
  },
  "items": {
    "type": "object",
    "defaultSnippets": [
      {
        "body": {
          "scope": "${1:keyword.operator}",
          "settings": {
            "foreground": "${2:#FF0000}"
          }
        }
      }
    ],
    "properties": {
      "name": {
        "type": "string",
        "description": "Description of the rule."
      },
      "scope": {
        "description": "Scope selector against which this rule matches.",
        "anyOf": [
          {
            "$ref": "#/$defs/_1"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/$defs/_1"
            }
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string"
          }
        ]
      },
      "settings": {
        "$ref": "#/$defs/_0"
      }
    },
    "required": [
      "settings"
    ],
    "additionalProperties": false
  },
  "$defs": {
    "_0": {
      "$ref": "#/definitions/settings"
    },
    "_1": {
      "enum": [
        "comment",
        "comment.block",
        "comment.block.documentation",
        "comment.line",
        "constant",
        "constant.character",
        "constant.character.escape",
        "constant.numeric",
        "constant.numeric.integer",
        "constant.numeric.float",
        "constant.numeric.hex",
        "constant.numeric.octal",
        "constant.other",
        "constant.regexp",
        "constant.rgb-value",
        "emphasis",
        "entity",
        "entity.name",
        "entity.name.class",
        "entity.name.function",
        "entity.name.method",
        "entity.name.section",
        "entity.name.selector",
        "entity.name.tag",
        "entity.name.type",
        "entity.other",
        "entity.other.attribute-name",
        "entity.other.inherited-class",
        "invalid",
        "invalid.deprecated",
        "invalid.illegal",
        "keyword",
        "keyword.control",
        "keyword.operator",
        "keyword.operator.new",
        "keyword.operator.assignment",
        "keyword.operator.arithmetic",
        "keyword.operator.logical",
        "keyword.other",
        "markup",
        "markup.bold",
        "markup.changed",
        "markup.deleted",
        "markup.heading",
        "markup.inline.raw",
        "markup.inserted",
        "markup.italic",
        "markup.list",
        "markup.list.numbered",
        "markup.list.unnumbered",
        "markup.other",
        "markup.quote",
        "markup.raw",
        "markup.underline",
        "markup.underline.link",
        "meta",
        "meta.block",
        "meta.cast",
        "meta.class",
        "meta.function",
        "meta.function-call",
        "meta.preprocessor",
        "meta.return-type",
        "meta.selector",
        "meta.tag",
        "meta.type.annotation",
        "meta.type",
        "punctuation.definition.string.begin",
        "punctuation.definition.string.end",
        "punctuation.separator",
        "punctuation.separator.continuation",
        "punctuation.terminator",
        "storage",
        "storage.modifier",
        "storage.type",
        "string",
        "string.interpolated",
        "string.other",
        "string.quoted",
        "string.quoted.double",
        "string.quoted.other",
        "string.quoted.single",
        "string.quoted.triple",
        "string.regexp",
        "string.unquoted",
        "strong",
        "support",
        "support.class",
        "support.constant",
        "support.function",
        "support.other",
        "support.type",
        "support.type.property-name",
        "support.variable",
        "variable",
        "variable.language",
        "variable.name",
        "variable.other",
        "variable.other.readwrite",
        "variable.parameter"
      ]
    }
  }
}
